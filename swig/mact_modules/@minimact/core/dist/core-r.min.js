var Minimact=function(e){"use strict";class t extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class n extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class o extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class s extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class r extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class i extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class a extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class c extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}class l{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class h{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var d,u,p;!function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(d||(d={}));class g{constructor(){}log(e,t){}}g.instance=new g;class m{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class f{static get isBrowser(){return!f.isNode&&"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return!f.isNode&&"object"==typeof self&&"importScripts"in self}static get isReactNative(){return!f.isNode&&"object"==typeof window&&void 0===window.document}static get isNode(){return"undefined"!=typeof process&&process.release&&"node"===process.release.name}}function _(e,t){let n="";return y(e)?(n=`Binary data of length ${e.byteLength}`,t&&(n+=`. Content: '${function(e){const t=new Uint8Array(e);let n="";return t.forEach(e=>{n+=`0x${e<16?"0":""}${e.toString(16)} `}),n.substr(0,n.length-1)}(e)}'`)):"string"==typeof e&&(n=`String data of length ${e.length}`,t&&(n+=`. Content: '${e}'`)),n}function y(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}async function b(e,t,n,o,s,r){const i={},[a,c]=C();i[a]=c,e.log(d.Trace,`(${t} transport) sending data. ${_(s,r.logMessageContent)}.`);const l=y(s)?"arraybuffer":"text",h=await n.post(o,{content:s,headers:{...i,...r.headers},responseType:l,timeout:r.timeout,withCredentials:r.withCredentials});e.log(d.Trace,`(${t} transport) request complete. Response status: ${h.statusCode}.`)}class w{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(e=>{})}}class v{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${(new Date).toISOString()}] ${d[e]}: ${t}`;switch(e){case d.Critical:case d.Error:this.out.error(n);break;case d.Warning:this.out.warn(n);break;case d.Information:this.out.info(n);break;default:this.out.log(n)}}}}function C(){let e="X-SignalR-User-Agent";return f.isNode&&(e="User-Agent"),[e,S("8.0.17",I(),f.isNode?"NodeJS":"Browser",k())]}function S(e,t,n,o){let s="Microsoft SignalR/";const r=e.split(".");return s+=`${r[0]}.${r[1]}`,s+=` (${e}; `,s+=t&&""!==t?`${t}; `:"Unknown OS; ",s+=`${n}`,s+=o?`; ${o}`:"; Unknown Runtime Version",s+=")",s}function I(){if(!f.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function k(){if(f.isNode)return process.versions.node}function T(e){return e.stack?e.stack:e.message?e.message:`${e}`}class E extends h{constructor(e){if(super(),this._logger=e,"undefined"==typeof fetch||f.isNode){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;this._jar=new(e("tough-cookie").CookieJar),"undefined"==typeof fetch?this._fetchType=e("node-fetch"):this._fetchType=fetch,this._fetchType=e("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("could not find global")}());if("undefined"==typeof AbortController){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;this._abortControllerType=e("abort-controller")}else this._abortControllerType=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new o;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const s=new this._abortControllerType;let r;e.abortSignal&&(e.abortSignal.onabort=()=>{s.abort(),r=new o});let i,a=null;if(e.timeout){const t=e.timeout;a=setTimeout(()=>{s.abort(),this._logger.log(d.Warning,"Timeout from HTTP request."),r=new n},t)}""===e.content&&(e.content=void 0),e.content&&(e.headers=e.headers||{},y(e.content)?e.headers["Content-Type"]="application/octet-stream":e.headers["Content-Type"]="text/plain;charset=UTF-8");try{i=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:s.signal})}catch(e){if(r)throw r;throw this._logger.log(d.Warning,`Error from HTTP request. ${e}.`),e}finally{a&&clearTimeout(a),e.abortSignal&&(e.abortSignal.onabort=null)}if(!i.ok){const e=await P(i,"text");throw new t(e||i.statusText,i.status)}const c=P(i,e.responseType),h=await c;return new l(i.status,i.statusText,h)}getCookieString(e){let t="";return f.isNode&&this._jar&&this._jar.getCookies(e,(e,n)=>t=n.join("; ")),t}}function P(e,t){let n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":default:n=e.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`)}return n}class M extends h{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new o):e.method?e.url?new Promise((s,r)=>{const i=new XMLHttpRequest;i.open(e.method,e.url,!0),i.withCredentials=void 0===e.withCredentials||e.withCredentials,i.setRequestHeader("X-Requested-With","XMLHttpRequest"),""===e.content&&(e.content=void 0),e.content&&(y(e.content)?i.setRequestHeader("Content-Type","application/octet-stream"):i.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const a=e.headers;a&&Object.keys(a).forEach(e=>{i.setRequestHeader(e,a[e])}),e.responseType&&(i.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{i.abort(),r(new o)}),e.timeout&&(i.timeout=e.timeout),i.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),i.status>=200&&i.status<300?s(new l(i.status,i.statusText,i.response||i.responseText)):r(new t(i.response||i.responseText||i.statusText,i.status))},i.onerror=()=>{this._logger.log(d.Warning,`Error from HTTP request. ${i.status}: ${i.statusText}.`),r(new t(i.statusText,i.status))},i.ontimeout=()=>{this._logger.log(d.Warning,"Timeout from HTTP request."),r(new n)},i.send(e.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class $ extends h{constructor(e){if(super(),"undefined"!=typeof fetch||f.isNode)this._httpClient=new E(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new M(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new o):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class R{static write(e){return`${e}${R.RecordSeparator}`}static parse(e){if(e[e.length-1]!==R.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(R.RecordSeparator);return t.pop(),t}}R.RecordSeparatorCode=30,R.RecordSeparator=String.fromCharCode(R.RecordSeparatorCode);class A{writeHandshakeRequest(e){return R.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if(y(e)){const o=new Uint8Array(e),s=o.indexOf(R.RecordSeparatorCode);if(-1===s)throw new Error("Message is incomplete.");const r=s+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(o.slice(0,r))),n=o.byteLength>r?o.slice(r).buffer:null}else{const o=e,s=o.indexOf(R.RecordSeparator);if(-1===s)throw new Error("Message is incomplete.");const r=s+1;t=o.substring(0,r),n=o.length>r?o.substring(r):null}const o=R.parse(t),s=JSON.parse(o[0]);if(s.type)throw new Error("Expected a handshake response from the server.");return[n,s]}}!function(e){e[e.Invocation=1]="Invocation",e[e.StreamItem=2]="StreamItem",e[e.Completion=3]="Completion",e[e.StreamInvocation=4]="StreamInvocation",e[e.CancelInvocation=5]="CancelInvocation",e[e.Ping=6]="Ping",e[e.Close=7]="Close",e[e.Ack=8]="Ack",e[e.Sequence=9]="Sequence"}(u||(u={}));class x{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new w(this,e)}}class D{constructor(e,t,n){this._bufferSize=1e5,this._messages=[],this._totalMessageCount=0,this._waitForSequenceMessage=!1,this._nextReceivingSequenceId=1,this._latestReceivedSequenceId=0,this._bufferedByteCount=0,this._reconnectInProgress=!1,this._protocol=e,this._connection=t,this._bufferSize=n}async _send(e){const t=this._protocol.writeMessage(e);let n=Promise.resolve();if(this._isInvocationMessage(e)){this._totalMessageCount++;let e=()=>{},o=()=>{};y(t)?this._bufferedByteCount+=t.byteLength:this._bufferedByteCount+=t.length,this._bufferedByteCount>=this._bufferSize&&(n=new Promise((t,n)=>{e=t,o=n})),this._messages.push(new H(t,this._totalMessageCount,e,o))}try{this._reconnectInProgress||await this._connection.send(t)}catch{this._disconnected()}await n}_ack(e){let t=-1;for(let n=0;n<this._messages.length;n++){const o=this._messages[n];if(o._id<=e.sequenceId)t=n,y(o._message)?this._bufferedByteCount-=o._message.byteLength:this._bufferedByteCount-=o._message.length,o._resolver();else{if(!(this._bufferedByteCount<this._bufferSize))break;o._resolver()}}-1!==t&&(this._messages=this._messages.slice(t+1))}_shouldProcessMessage(e){if(this._waitForSequenceMessage)return e.type===u.Sequence&&(this._waitForSequenceMessage=!1,!0);if(!this._isInvocationMessage(e))return!0;const t=this._nextReceivingSequenceId;return this._nextReceivingSequenceId++,t<=this._latestReceivedSequenceId?(t===this._latestReceivedSequenceId&&this._ackTimer(),!1):(this._latestReceivedSequenceId=t,this._ackTimer(),!0)}_resetSequence(e){e.sequenceId>this._nextReceivingSequenceId?this._connection.stop(new Error("Sequence ID greater than amount of messages we've received.")):this._nextReceivingSequenceId=e.sequenceId}_disconnected(){this._reconnectInProgress=!0,this._waitForSequenceMessage=!0}async _resend(){const e=0!==this._messages.length?this._messages[0]._id:this._totalMessageCount+1;await this._connection.send(this._protocol.writeMessage({type:u.Sequence,sequenceId:e}));const t=this._messages;for(const e of t)await this._connection.send(e._message);this._reconnectInProgress=!1}_dispose(e){null!=e||(e=new Error("Unable to reconnect to server."));for(const t of this._messages)t._rejector(e)}_isInvocationMessage(e){switch(e.type){case u.Invocation:case u.StreamItem:case u.Completion:case u.StreamInvocation:case u.CancelInvocation:return!0;case u.Close:case u.Sequence:case u.Ping:case u.Ack:return!1}}_ackTimer(){void 0===this._ackTimerHandle&&(this._ackTimerHandle=setTimeout(async()=>{try{this._reconnectInProgress||await this._connection.send(this._protocol.writeMessage({type:u.Ack,sequenceId:this._latestReceivedSequenceId}))}catch{}clearTimeout(this._ackTimerHandle),this._ackTimerHandle=void 0},1e3))}}class H{constructor(e,t,n,o){this._message=e,this._id=t,this._resolver=n,this._rejector=o}}!function(e){e.Disconnected="Disconnected",e.Connecting="Connecting",e.Connected="Connected",e.Disconnecting="Disconnecting",e.Reconnecting="Reconnecting"}(p||(p={}));class L{static create(e,t,n,o,s,r,i){return new L(e,t,n,o,s,r,i)}constructor(e,t,n,o,s,r,i){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(d.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},m.isRequired(e,"connection"),m.isRequired(t,"logger"),m.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=null!=s?s:3e4,this.keepAliveIntervalInMilliseconds=null!=r?r:15e3,this._statefulReconnectBufferSize=null!=i?i:1e5,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=o,this._handshakeProtocol=new A,this.connection.onreceive=e=>this._processIncomingData(e),this.connection.onclose=e=>this._connectionClosed(e),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=p.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:u.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==p.Disconnected&&this._connectionState!==p.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==p.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=p.Connecting,this._logger.log(d.Debug,"Starting HubConnection.");try{await this._startInternal(),f.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=p.Connected,this._connectionStarted=!0,this._logger.log(d.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=p.Disconnected,this._logger.log(d.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise((e,t)=>{this._handshakeResolver=e,this._handshakeRejecter=t});await this.connection.start(this._protocol.transferFormat);try{let t=this._protocol.version;this.connection.features.reconnect||(t=1);const n={protocol:this._protocol.name,version:t};if(this._logger.log(d.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(n)),this._logger.log(d.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;!!this.connection.features.reconnect&&(this._messageBuffer=new D(this._protocol,this.connection,this._statefulReconnectBufferSize),this.connection.features.disconnected=this._messageBuffer._disconnected.bind(this._messageBuffer),this.connection.features.resend=()=>{if(this._messageBuffer)return this._messageBuffer._resend()}),this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(e){throw this._logger.log(d.Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(e),e}}async stop(){const e=this._startPromise;this.connection.features.reconnect=!1,this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch(e){}}_stopInternal(e){if(this._connectionState===p.Disconnected)return this._logger.log(d.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===p.Disconnecting)return this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const t=this._connectionState;return this._connectionState=p.Disconnecting,this._logger.log(d.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(d.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(t===p.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new o("The connection was stopped before the hub handshake could complete."),this.connection.stop(e))}async _sendCloseMessage(){try{await this._sendWithProtocol(this._createCloseMessage())}catch{}}stream(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._createStreamInvocation(e,t,o);let r;const i=new x;return i.cancelCallback=()=>{const e=this._createCancelInvocation(s.invocationId);return delete this._callbacks[s.invocationId],r.then(()=>this._sendWithProtocol(e))},this._callbacks[s.invocationId]=(e,t)=>{t?i.error(t):e&&(e.type===u.Completion?e.error?i.error(new Error(e.error)):i.complete():i.next(e.item))},r=this._sendWithProtocol(s).catch(e=>{i.error(e),delete this._callbacks[s.invocationId]}),this._launchStreams(n,r),i}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._messageBuffer?this._messageBuffer._send(e):this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._sendWithProtocol(this._createInvocation(e,t,!0,o));return this._launchStreams(n,s),s}invoke(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._createInvocation(e,t,!1,o);return new Promise((e,t)=>{this._callbacks[s.invocationId]=(n,o)=>{o?t(o):n&&(n.type===u.Completion?n.error?t(new Error(n.error)):e(n.result):t(new Error(`Unexpected message type: ${n.type}`)))};const o=this._sendWithProtocol(s).catch(e=>{t(e),delete this._callbacks[s.invocationId]});this._launchStreams(n,o)})}on(e,t){e&&t&&(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const o=n.indexOf(t);-1!==o&&(n.splice(o,1),0===n.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const e of t)if(!this._messageBuffer||this._messageBuffer._shouldProcessMessage(e))switch(e.type){case u.Invocation:this._invokeClientMethod(e).catch(e=>{this._logger.log(d.Error,`Invoke client method threw error: ${T(e)}`)});break;case u.StreamItem:case u.Completion:{const t=this._callbacks[e.invocationId];if(t){e.type===u.Completion&&delete this._callbacks[e.invocationId];try{t(e)}catch(e){this._logger.log(d.Error,`Stream callback threw error: ${T(e)}`)}}break}case u.Ping:break;case u.Close:{this._logger.log(d.Information,"Close message received from server.");const t=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(t):this._stopPromise=this._stopInternal(t);break}case u.Ack:this._messageBuffer&&this._messageBuffer._ack(e);break;case u.Sequence:this._messageBuffer&&this._messageBuffer._resetSequence(e);break;default:this._logger.log(d.Warning,`Invalid message type: ${e.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(e){const t="Error parsing handshake response: "+e;this._logger.log(d.Error,t);const n=new Error(t);throw this._handshakeRejecter(n),n}if(t.error){const e="Server returned handshake error: "+t.error;this._logger.log(d.Error,e);const n=new Error(e);throw this._handshakeRejecter(n),n}return this._logger.log(d.Debug,"Server handshake complete."),this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===p.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n)return this._logger.log(d.Warning,`No client method with the name '${t}' found.`),void(e.invocationId&&(this._logger.log(d.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null))));const o=n.slice(),s=!!e.invocationId;let r,i,a;for(const n of o)try{const o=r;r=await n.apply(this,e.arguments),s&&r&&o&&(this._logger.log(d.Error,`Multiple results provided for '${t}'. Sending error to server.`),a=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),i=void 0}catch(e){i=e,this._logger.log(d.Error,`A callback for the method '${t}' threw error '${e}'.`)}a?await this._sendWithProtocol(a):s?(i?a=this._createCompletionMessage(e.invocationId,`${i}`,null):void 0!==r?a=this._createCompletionMessage(e.invocationId,null,r):(this._logger.log(d.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),a=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(a)):r&&this._logger.log(d.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(d.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new o("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===p.Disconnecting?this._completeClose(e):this._connectionState===p.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===p.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=p.Disconnected,this._connectionStarted=!1,this._messageBuffer&&(this._messageBuffer._dispose(null!=e?e:new Error("Connection closed.")),this._messageBuffer=void 0),f.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(d.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,o=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),s=this._getNextRetryDelay(n++,0,o);if(null===s)return this._logger.log(d.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(e);if(this._connectionState=p.Reconnecting,e?this._logger.log(d.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(d.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(d.Error,`An onreconnecting callback called with error '${e}' threw error '${t}'.`)}if(this._connectionState!==p.Reconnecting)return void this._logger.log(d.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==s;){if(this._logger.log(d.Information,`Reconnect attempt number ${n} will start in ${s} ms.`),await new Promise(e=>{this._reconnectDelayHandle=setTimeout(e,s)}),this._reconnectDelayHandle=void 0,this._connectionState!==p.Reconnecting)return void this._logger.log(d.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=p.Connected,this._logger.log(d.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach(e=>e.apply(this,[this.connection.connectionId]))}catch(e){this._logger.log(d.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this._logger.log(d.Information,`Reconnect attempt failed because of error '${e}'.`),this._connectionState!==p.Reconnecting)return this._logger.log(d.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===p.Disconnecting&&this._completeClose());o=e instanceof Error?e:new Error(e.toString()),s=this._getNextRetryDelay(n++,Date.now()-t,o)}}this._logger.log(d.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(n){return this._logger.log(d.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${n}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach(n=>{const o=t[n];try{o(null,e)}catch(t){this._logger.log(d.Error,`Stream 'error' callback called with '${e}' threw error: ${T(t)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,o){if(n)return 0!==o.length?{arguments:t,streamIds:o,target:e,type:u.Invocation}:{arguments:t,target:e,type:u.Invocation};{const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:t,invocationId:n.toString(),streamIds:o,target:e,type:u.Invocation}:{arguments:t,invocationId:n.toString(),target:e,type:u.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:e=>{let o;o=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,o)))},next:e=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,e)))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let o=0;o<e.length;o++){const s=e[o];if(this._isObservable(s)){const r=this._invocationId;this._invocationId++,t[r]=s,n.push(r.toString()),e.splice(o,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,n){const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:t,invocationId:o.toString(),streamIds:n,target:e,type:u.StreamInvocation}:{arguments:t,invocationId:o.toString(),target:e,type:u.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:u.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:u.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:u.Completion}:{invocationId:e,result:n,type:u.Completion}}_createCloseMessage(){return{type:u.Close}}}const N=[0,2e3,1e4,3e4,null];class q{constructor(e){this._retryDelays=void 0!==e?[...e,null]:N}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class F{}F.Authorization="Authorization",F.Cookie="Cookie";class j extends h{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=await this._innerClient.send(e);return t&&401===n.statusCode&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):n}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[F.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[F.Authorization]&&delete e.headers[F.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var W,U;!function(e){e[e.None=0]="None",e[e.WebSockets=1]="WebSockets",e[e.ServerSentEvents=2]="ServerSentEvents",e[e.LongPolling=4]="LongPolling"}(W||(W={})),function(e){e[e.Text=1]="Text",e[e.Binary=2]="Binary"}(U||(U={}));let B=class{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}};class O{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new B,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}async connect(e,n){if(m.isRequired(e,"url"),m.isRequired(n,"transferFormat"),m.isIn(n,U,"transferFormat"),this._url=e,this._logger.log(d.Trace,"(LongPolling transport) Connecting."),n===U.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,s]=C(),r={[o]:s,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};n===U.Binary&&(i.responseType="arraybuffer");const a=`${e}&_=${Date.now()}`;this._logger.log(d.Trace,`(LongPolling transport) polling: ${a}.`);const c=await this._httpClient.get(a,i);200!==c.statusCode?(this._logger.log(d.Error,`(LongPolling transport) Unexpected response code: ${c.statusCode}.`),this._closeError=new t(c.statusText||"",c.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _poll(e,o){try{for(;this._running;)try{const n=`${e}&_=${Date.now()}`;this._logger.log(d.Trace,`(LongPolling transport) polling: ${n}.`);const s=await this._httpClient.get(n,o);204===s.statusCode?(this._logger.log(d.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==s.statusCode?(this._logger.log(d.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this._closeError=new t(s.statusText||"",s.statusCode),this._running=!1):s.content?(this._logger.log(d.Trace,`(LongPolling transport) data received. ${_(s.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this._logger.log(d.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(e){this._running?e instanceof n?this._logger.log(d.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=e,this._running=!1):this._logger.log(d.Trace,`(LongPolling transport) Poll errored after shutdown: ${e.message}`)}}finally{this._logger.log(d.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?b(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(d.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(d.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[n,o]=C();e[n]=o;const s={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};let r;try{await this._httpClient.delete(this._url,s)}catch(e){r=e}r?r instanceof t&&(404===r.statusCode?this._logger.log(d.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(d.Trace,`(LongPolling transport) Error sending a DELETE request: ${r}`)):this._logger.log(d.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(d.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(d.Trace,e),this.onclose(this._closeError)}}}class z{constructor(e,t,n,o){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}async connect(e,t){return m.isRequired(e,"url"),m.isRequired(t,"transferFormat"),m.isIn(t,U,"transferFormat"),this._logger.log(d.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((n,o)=>{let s,r=!1;if(t===U.Text){if(f.isBrowser||f.isWebWorker)s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),n={};n.Cookie=t;const[o,r]=C();n[o]=r,s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...n,...this._options.headers}})}try{s.onmessage=e=>{if(this.onreceive)try{this._logger.log(d.Trace,`(SSE transport) data received. ${_(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this._close(e)}},s.onerror=e=>{r?this._close():o(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},s.onopen=()=>{this._logger.log(d.Information,`SSE connected to ${this._url}`),this._eventSource=s,r=!0,n()}}catch(e){return void o(e)}}else o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})}async send(e){return this._eventSource?b(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class K{constructor(e,t,n,o,s,r){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=o,this._webSocketConstructor=s,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=r}async connect(e,t){let n;return m.isRequired(e,"url"),m.isRequired(t,"transferFormat"),m.isIn(t,U,"transferFormat"),this._logger.log(d.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(n=await this._accessTokenFactory()),new Promise((o,s)=>{let r;e=e.replace(/^http/,"ws");const i=this._httpClient.getCookieString(e);let a=!1;if(f.isNode||f.isReactNative){const t={},[o,s]=C();t[o]=s,n&&(t[F.Authorization]=`Bearer ${n}`),i&&(t[F.Cookie]=i),r=new this._webSocketConstructor(e,void 0,{headers:{...t,...this._headers}})}else n&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(n)}`);r||(r=new this._webSocketConstructor(e)),t===U.Binary&&(r.binaryType="arraybuffer"),r.onopen=t=>{this._logger.log(d.Information,`WebSocket connected to ${e}.`),this._webSocket=r,a=!0,o()},r.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"There was an error with the transport",this._logger.log(d.Information,`(WebSockets transport) ${t}.`)},r.onmessage=e=>{if(this._logger.log(d.Trace,`(WebSockets transport) data received. ${_(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(e){return void this._close(e)}},r.onclose=e=>{if(a)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",s(new Error(t))}}})}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(d.Trace,`(WebSockets transport) sending data. ${_(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(d.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class V{constructor(e,t={}){var n;if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,m.isRequired(e,"url"),this._logger=void 0===(n=t.logger)?new v(d.Information):null===n?g.instance:void 0!==n.log?n:new v(n),this.baseUrl=this._resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials,t.timeout=void 0===t.timeout?1e5:t.timeout;let o=null,s=null;if(f.isNode&&"undefined"!=typeof require){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;o=e("ws"),s=e("eventsource")}f.isNode||"undefined"==typeof WebSocket||t.WebSocket?f.isNode&&!t.WebSocket&&o&&(t.WebSocket=o):t.WebSocket=WebSocket,f.isNode||"undefined"==typeof EventSource||t.EventSource?f.isNode&&!t.EventSource&&void 0!==s&&(t.EventSource=s):t.EventSource=EventSource,this._httpClient=new j(t.httpClient||new $(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||U.Binary,m.isIn(e,U,"transferFormat"),this._logger.log(d.Debug,`Starting connection with transfer format '${U[e]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,"Disconnecting"===this._connectionState){const e="Failed to start the HttpConnection before stop() was called.";return this._logger.log(d.Error,e),await this._stopPromise,Promise.reject(new o(e))}if("Connected"!==this._connectionState){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(d.Error,e),Promise.reject(new o(e))}this._connectionStarted=!0}send(e){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new Q(this.transport)),this._sendQueue.send(e))}async stop(e){return"Disconnected"===this._connectionState?(this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(d.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise(e=>{this._stopPromiseResolver=e}),await this._stopInternal(e),void await this._stopPromise)}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch(e){}if(this.transport){try{await this.transport.stop()}catch(e){this._logger.log(d.Error,`HttpConnection.transport.stop() threw error '${e}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(d.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==W.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(W.WebSockets),await this._startTransport(t,e)}else{let n=null,s=0;do{if(n=await this._getNegotiationResponse(t),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new o("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const e=n.accessToken;this._accessTokenFactory=()=>e,this._httpClient._accessToken=e,this._httpClient._accessTokenFactory=void 0}s++}while(n.url&&s<100);if(100===s&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,n,e)}this.transport instanceof O&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(d.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(e){return this._logger.log(d.Error,"Failed to start the connection: "+e),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(e)}}async _getNegotiationResponse(e){const n={},[o,s]=C();n[o]=s;const r=this._resolveNegotiateUrl(e);this._logger.log(d.Debug,`Sending negotiation request: ${r}.`);try{const e=await this._httpClient.post(r,{content:"",headers:{...n,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const t=JSON.parse(e.content);return(!t.negotiateVersion||t.negotiateVersion<1)&&(t.connectionToken=t.connectionId),t.useStatefulReconnect&&!0!==this._options._useStatefulReconnect?Promise.reject(new a("Client didn't negotiate Stateful Reconnect but the server did.")):t}catch(e){let n="Failed to complete negotiation with the server: "+e;return e instanceof t&&404===e.statusCode&&(n+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(d.Error,n),Promise.reject(new a(n))}}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,s){let r=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t))return this._logger.log(d.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(r,s),void(this.connectionId=n.connectionId);const a=[],l=n.availableTransports||[];let h=n;for(const n of l){const c=this._resolveTransportOrError(n,t,s,!0===(null==h?void 0:h.useStatefulReconnect));if(c instanceof Error)a.push(`${n.transport} failed:`),a.push(c);else if(this._isITransport(c)){if(this.transport=c,!h){try{h=await this._getNegotiationResponse(e)}catch(e){return Promise.reject(e)}r=this._createConnectUrl(e,h.connectionToken)}try{return await this._startTransport(r,s),void(this.connectionId=h.connectionId)}catch(e){if(this._logger.log(d.Error,`Failed to start the transport '${n.transport}': ${e}`),h=void 0,a.push(new i(`${n.transport} failed: ${e}`,W[n.transport])),"Connecting"!==this._connectionState){const e="Failed to select transport before stop() was called.";return this._logger.log(d.Debug,e),Promise.reject(new o(e))}}}}return a.length>0?Promise.reject(new c(`Unable to connect to the server with any of the available transports. ${a.join(" ")}`,a)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case W.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new K(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case W.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new z(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case W.LongPolling:return new O(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.features.reconnect?this.transport.onclose=async n=>{let o=!1;if(this.features.reconnect){try{this.features.disconnected(),await this.transport.connect(e,t),await this.features.resend()}catch{o=!0}o&&this._stopConnection(n)}else this._stopConnection(n)}:this.transport.onclose=e=>this._stopConnection(e),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n,o){const i=W[e.transport];if(null==i)return this._logger.log(d.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!==(t&e)}(t,i))return this._logger.log(d.Debug,`Skipping transport '${W[i]}' because it was disabled by the client.`),new r(`'${W[i]}' is disabled by the client.`,i);if(!(e.transferFormats.map(e=>U[e]).indexOf(n)>=0))return this._logger.log(d.Debug,`Skipping transport '${W[i]}' because it does not support the requested transfer format '${U[n]}'.`),new Error(`'${W[i]}' does not support ${U[n]}.`);if(i===W.WebSockets&&!this._options.WebSocket||i===W.ServerSentEvents&&!this._options.EventSource)return this._logger.log(d.Debug,`Skipping transport '${W[i]}' because it is not supported in your environment.'`),new s(`'${W[i]}' is not supported in your environment.`,i);this._logger.log(d.Debug,`Selecting transport '${W[i]}'.`);try{return this.features.reconnect=i===W.WebSockets?o:void 0,this._constructTransport(i)}catch(e){return e}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(e){if(this._logger.log(d.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(d.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),e?this._logger.log(d.Error,`Connection disconnected with error '${e}'.`):this._logger.log(d.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(e=>{this._logger.log(d.Error,`TransportSendQueue.stop() threw error '${e}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(d.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this._logger.log(d.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!f.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(d.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=new URL(e);t.pathname.endsWith("/")?t.pathname+="negotiate":t.pathname+="/negotiate";const n=new URLSearchParams(t.searchParams);return n.has("negotiateVersion")||n.append("negotiateVersion",this._negotiateVersion.toString()),n.has("useStatefulReconnect")?"true"===n.get("useStatefulReconnect")&&(this._options._useStatefulReconnect=!0):!0===this._options._useStatefulReconnect&&n.append("useStatefulReconnect","true"),t.search=n.toString(),t.toString()}}class Q{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new J,this._transportResult=new J,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new J),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new J;const e=this._transportResult;this._transportResult=void 0;const t="string"==typeof this._buffer[0]?this._buffer.join(""):Q._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(t){e.reject(t)}}}static _concatBuffers(e){const t=e.map(e=>e.byteLength).reduce((e,t)=>e+t),n=new Uint8Array(t);let o=0;for(const t of e)n.set(new Uint8Array(t),o),o+=t.byteLength;return n.buffer}}class J{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class X{constructor(){this.name="json",this.version=2,this.transferFormat=U.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=g.instance);const n=R.parse(e),o=[];for(const e of n){const n=JSON.parse(e);if("number"!=typeof n.type)throw new Error("Invalid payload.");switch(n.type){case u.Invocation:this._isInvocationMessage(n);break;case u.StreamItem:this._isStreamItemMessage(n);break;case u.Completion:this._isCompletionMessage(n);break;case u.Ping:case u.Close:break;case u.Ack:this._isAckMessage(n);break;case u.Sequence:this._isSequenceMessage(n);break;default:t.log(d.Information,"Unknown message type '"+n.type+"' ignored.");continue}o.push(n)}return o}writeMessage(e){return R.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_isAckMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Ack message.")}_isSequenceMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Sequence message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const Y={trace:d.Trace,debug:d.Debug,info:d.Information,information:d.Information,warn:d.Warning,warning:d.Warning,error:d.Error,critical:d.Critical,none:d.None};class Z{configureLogging(e){if(m.isRequired(e,"logging"),void 0!==e.log)this.logger=e;else if("string"==typeof e){const t=function(e){const t=Y[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new v(t)}else this.logger=new v(e);return this}withUrl(e,t){return m.isRequired(e,"url"),m.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return m.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new q(e):this.reconnectPolicy=e:this.reconnectPolicy=new q,this}withServerTimeout(e){return m.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return m.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}withStatefulReconnect(e){return void 0===this.httpConnectionOptions&&(this.httpConnectionOptions={}),this.httpConnectionOptions._useStatefulReconnect=!0,this._statefulReconnectBufferSize=null==e?void 0:e.bufferSize,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new V(this.url,e);return L.create(t,this.logger||g.instance,this.protocol||new X,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds,this._statefulReconnectBufferSize)}}class G{constructor(e="/minimact",t={}){this.reconnectInterval=t.reconnectInterval||5e3,this.debugLogging=t.debugLogging||!1,this.eventHandlers=new Map,this.connection=(new Z).withUrl(e).withAutomaticReconnect({nextRetryDelayInMilliseconds:()=>this.reconnectInterval}).configureLogging(this.debugLogging?d.Debug:d.Warning).build(),this.setupEventHandlers()}setupEventHandlers(){this.connection.on("UpdateComponent",(e,t)=>{this.log("UpdateComponent",{componentId:e,html:t}),this.emit("updateComponent",{componentId:e,html:t})}),this.connection.on("ApplyPatches",(e,t)=>{this.log("ApplyPatches",{componentId:e,patches:t}),this.emit("applyPatches",{componentId:e,patches:t})}),this.connection.on("ApplyPrediction",e=>{this.log(`ApplyPrediction (${(100*e.confidence).toFixed(0)}% confident)`,{componentId:e.componentId,patches:e.patches}),this.emit("applyPrediction",{componentId:e.componentId,patches:e.patches,confidence:e.confidence})}),this.connection.on("ApplyCorrection",e=>{this.log("ApplyCorrection (prediction was incorrect)",{componentId:e.componentId,patches:e.patches}),this.emit("applyCorrection",{componentId:e.componentId,patches:e.patches})}),this.connection.on("QueueHint",e=>{this.log(`QueueHint '${e.hintId}' (${(100*e.confidence).toFixed(0)}% confident)`,{componentId:e.componentId,patches:e.patches}),this.emit("queueHint",e)}),this.connection.on("Error",e=>{console.error("[Minimact] Server error:",e),this.emit("error",{message:e})}),this.connection.onreconnecting(e=>{this.log("Reconnecting...",e),this.emit("reconnecting",{error:e})}),this.connection.onreconnected(e=>{this.log("Reconnected",{connectionId:e}),this.emit("reconnected",{connectionId:e})}),this.connection.onclose(e=>{this.log("Connection closed",e),this.emit("closed",{error:e})})}async start(){try{await this.connection.start(),this.log("Connected to Minimact hub"),this.emit("connected",{connectionId:this.connection.connectionId})}catch(e){throw console.error("[Minimact] Failed to connect:",e),e}}async stop(){await this.connection.stop(),this.log("Disconnected from Minimact hub")}async registerComponent(e){try{await this.connection.invoke("RegisterComponent",e),this.log("Registered component",{componentId:e})}catch(e){throw console.error("[Minimact] Failed to register component:",e),e}}async invokeComponentMethod(e,t,n={}){try{const o=JSON.stringify(n);await this.connection.invoke("InvokeComponentMethod",e,t,o),this.log("Invoked method",{componentId:e,methodName:t,args:n})}catch(e){throw console.error("[Minimact] Failed to invoke method:",e),e}}async updateClientState(e,t,n){try{const o=JSON.stringify(n);await this.connection.invoke("UpdateClientState",e,t,o),this.log("Updated client state",{componentId:e,key:t,value:n})}catch(e){console.error("[Minimact] Failed to update client state:",e)}}async updateClientComputedState(e,t){try{await this.connection.invoke("UpdateClientComputedState",e,t),this.log("Updated client-computed state",{componentId:e,computedValues:t})}catch(e){throw console.error("[Minimact] Failed to update client-computed state:",e),e}}async updateComponentState(e,t,n){try{await this.connection.invoke("UpdateComponentState",e,t,n),this.log("Updated component state",{componentId:e,stateKey:t,value:n})}catch(e){throw console.error("[Minimact] Failed to update component state:",e),e}}async updateDomElementState(e,t,n){try{await this.connection.invoke("UpdateDomElementState",e,t,n),this.log("Updated DOM element state",{componentId:e,stateKey:t,snapshot:n})}catch(e){throw console.error("[Minimact] Failed to update DOM element state:",e),e}}async updateComponentStateWithOperation(e,t,n,o){try{await this.connection.invoke("UpdateComponentStateWithOperation",e,t,n,o),this.log("Updated component state with operation",{componentId:e,stateKey:t,operation:o,newValue:n})}catch(e){throw console.error("[Minimact] Failed to update component state with operation:",e),e}}async updateQueryResults(e,t,n){try{await this.connection.invoke("UpdateQueryResults",e,t,n),this.log("Updated query results",{componentId:e,queryKey:t,resultCount:n.length})}catch(e){throw console.error("[Minimact] Failed to update query results:",e),e}}async invoke(e,...t){try{await this.connection.invoke(e,...t),this.log(`Invoked ${e}`,{args:t})}catch(t){throw console.error(`[Minimact] Failed to invoke ${e}:`,t),t}}on(e,t){this.eventHandlers.has(e)||this.eventHandlers.set(e,new Set),this.eventHandlers.get(e).add(t)}off(e,t){const n=this.eventHandlers.get(e);n&&n.delete(t)}emit(e,t){const n=this.eventHandlers.get(e);n&&n.forEach(e=>e(t))}log(e,t){this.debugLogging&&console.log(`[Minimact SignalR] ${e}`,t||"")}get state(){return this.connection.state}get connectionId(){return this.connection.connectionId}}class ee{constructor(e={}){this.debugLogging=e.debugLogging||!1}applyPatches(e,t){this.log("Applying patches",{count:t.length,patches:t});for(const n of t)try{this.applyPatch(e,n)}catch(e){console.error("[Minimact] Failed to apply patch:",n,e)}}applyPatch(e,t){const n=this.getElementByPath(e,t.path);if(n||"Create"===t.type)switch(t.type){case"Create":this.patchCreate(e,t.path,t.node);break;case"Remove":this.patchRemove(n);break;case"Replace":this.patchReplace(n,t.node);break;case"UpdateText":this.patchUpdateText(n,t.content);break;case"UpdateProps":this.patchUpdateProps(n,t.props);break;case"ReorderChildren":this.patchReorderChildren(n,t.order)}else console.warn("[Minimact] Target element not found for patch:",t)}patchCreate(e,t,n){const o=this.createElementFromVNode(n);if(0===t.length)e.innerHTML="",e.appendChild(o);else{const n=t.slice(0,-1),s=t[t.length-1],r=this.getElementByPath(e,n);r&&(s>=r.childNodes.length?r.appendChild(o):r.insertBefore(o,r.childNodes[s]))}this.log("Created node",{path:t,node:n})}patchRemove(e){e.parentNode&&(e.parentNode.removeChild(e),this.log("Removed node",{element:e}))}patchReplace(e,t){const n=this.createElementFromVNode(t);e.parentNode&&(e.parentNode.replaceChild(n,e),this.log("Replaced node",{oldElement:e,newNode:t}))}patchUpdateText(e,t){e.nodeType,Node.TEXT_NODE,e.textContent=t,this.log("Updated text",{element:e,content:t})}patchUpdateProps(e,t){const n=Array.from(e.attributes);for(const o of n)o.name in t||o.name.startsWith("data-minimact-")||e.removeAttribute(o.name);for(const[n,o]of Object.entries(t))if("style"===n)e.setAttribute("style",o);else if("class"===n||"className"===n)e.className=o;else{if(n.startsWith("on"))continue;e.setAttribute(n,o)}this.log("Updated props",{element:e,props:t})}patchReorderChildren(e,t){const n=new Map;for(const t of Array.from(e.childNodes))if(t instanceof HTMLElement){const e=t.getAttribute("data-key")||t.getAttribute("key");e&&n.set(e,t)}for(let o=0;o<t.length;o++){const s=t[o],r=n.get(s);if(r){const t=e.childNodes[o];t!==r&&e.insertBefore(r,t)}}this.log("Reordered children",{element:e,order:t})}getElementByPath(e,t){let n=e;for(const e of t){if(e>=n.childNodes.length)return null;n=n.childNodes[e]}return n}createElementFromVNode(e){switch(e.type){case"Text":return document.createTextNode(e.content);case"Element":{const t=e,n=document.createElement(t.tag);for(const[e,o]of Object.entries(t.props||{}))"className"===e||"class"===e?n.className=o:e.startsWith("on")?n.setAttribute(`data-${e.toLowerCase()}`,o):n.setAttribute(e,o);t.key&&n.setAttribute("data-key",t.key);for(const e of t.children||[])n.appendChild(this.createElementFromVNode(e));return n}case"Fragment":{const t=document.createDocumentFragment(),n=e;for(const e of n.children||[])t.appendChild(this.createElementFromVNode(e));return t}case"RawHtml":{const t=document.createElement("div");return t.innerHTML=e.html,t}default:return console.warn("[Minimact] Unknown VNode type:",e),document.createTextNode("")}}replaceHTML(e,t){e.innerHTML=t,this.log("Replaced entire HTML",{html:t})}log(e,t){this.debugLogging&&console.log(`[Minimact DOMPatcher] ${e}`,t||"")}}class te{constructor(e={}){this.states=new Map,this.subscribers=new Map,this.debugLogging=e.debugLogging||!1}initializeComponent(e,t={}){this.states.set(e,{...t}),this.subscribers.set(e,new Map),this.log("Initialized component state",{componentId:e,initialState:t})}getState(e,t){const n=this.states.get(e);return n?n[t]:void 0}setState(e,t,n){const o=this.states.get(e);if(!o)return void console.warn(`[Minimact] Component ${e} not initialized`);const s=o[t];o[t]=n,this.log("State updated",{componentId:e,key:t,oldValue:s,newValue:n}),this.notifySubscribers(e,t,n,s)}subscribe(e,t,n){const o=this.subscribers.get(e);return o?(o.has(t)||o.set(t,new Set),o.get(t).add(n),this.log("Subscribed to state",{componentId:e,key:t}),()=>{o.get(t)?.delete(n),this.log("Unsubscribed from state",{componentId:e,key:t})}):(console.warn(`[Minimact] Component ${e} not initialized`),()=>{})}notifySubscribers(e,t,n,o){const s=this.subscribers.get(e);if(!s)return;const r=s.get(t);r&&r.forEach(e=>{try{e(n,o)}catch(e){console.error("[Minimact] Error in state subscriber:",e)}})}getComponentState(e){return this.states.get(e)}updateState(e,t){for(const[n,o]of Object.entries(t))this.setState(e,n,o)}clearComponent(e){this.states.delete(e),this.subscribers.delete(e),this.log("Cleared component state",{componentId:e})}bindToElement(e,t,n,o="textContent"){const s=this.getState(e,t);return void 0!==s&&this.updateElement(n,o,s),this.subscribe(e,t,e=>{this.updateElement(n,o,e)})}updateElement(e,t,n){switch(t){case"value":(e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement)&&(e.value=String(n));break;case"textContent":e.textContent=String(n);break;case"innerHTML":e.innerHTML=String(n)}}bindInput(e,t,n){const o=this.getState(e,t);void 0!==o&&(n.value=String(o));const s=n=>{const o=n.target;this.setState(e,t,o.value)};n.addEventListener("input",s);const r=this.subscribe(e,t,e=>{n.value!==String(e)&&(n.value=String(e))});return()=>{n.removeEventListener("input",s),r()}}log(e,t){this.debugLogging&&console.log(`[Minimact ClientState] ${e}`,t||"")}}class ne{constructor(e,t,n={}){this.rootElement=e,this.componentMethodInvoker=t,this.debugLogging=n.debugLogging||!1,this.hintQueue=n.hintQueue,this.domPatcher=n.domPatcher,this.playgroundBridge=n.playgroundBridge,this.eventListeners=new Map,this.setupEventDelegation()}setupEventDelegation(){const e=["click","dblclick","input","change","submit","focus","blur","keydown","keyup","keypress","mouseenter","mouseleave","mouseover","mouseout"];for(const t of e){const e=this.createEventListener(t);this.eventListeners.set(t,e),this.rootElement.addEventListener(t,e,!0)}this.log("Event delegation setup complete",{eventTypes:e})}createEventListener(e){return async t=>{const n=t.target,o=this.findHandlerElement(n,e);if(!o)return;const s=this.getEventHandler(o,e);s&&("submit"===e&&t.preventDefault(),this.log("Event triggered",{eventType:e,handler:s,target:n}),await this.executeHandler(s,t,o))}}findHandlerElement(e,t){let n=e;for(;n&&n!==this.rootElement;){const e=`data-on${t}`,o=`on${t}`;if(n.hasAttribute(e)||n.hasAttribute(o))return n;n=n.parentElement}return null}getEventHandler(e,t){const n=`data-on${t}`,o=`on${t}`,s=e.getAttribute(n)||e.getAttribute(o);if(!s)return null;const r=s.split(":"),i=r[0],a=r.slice(1),c=this.findComponentId(e);return c?{componentId:c,methodName:i,args:a}:(console.warn("[Minimact] No component ID found for event handler:",s),null)}findComponentId(e){let t=e;for(;t&&t!==this.rootElement;){const e=t.getAttribute("data-minimact-component-id");if(e)return e;t=t.parentElement}return this.rootElement.getAttribute("data-minimact-component-id")}async executeHandler(e,t,n){const o=performance.now();try{const n={};if(e.args.length>0&&(n.args=e.args),t instanceof MouseEvent&&(n.mouse={clientX:t.clientX,clientY:t.clientY,button:t.button}),t instanceof KeyboardEvent&&(n.keyboard={key:t.key,code:t.code,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey,altKey:t.altKey}),"input"===t.type||"change"===t.type){const e=t.target;n.value=e.value}const s=[];if(void 0!==n.value&&s.push(n.value),n.args&&Array.isArray(n.args)&&s.push(...n.args),this.hintQueue&&this.domPatcher){const t=this.tryMatchHint(e.componentId,e.methodName);if(t){const n=this.findComponentElement(e.componentId);if(n){this.domPatcher.applyPatches(n,t.patches);const r=performance.now()-o;return this.playgroundBridge&&this.playgroundBridge.cacheHit({componentId:e.componentId,hintId:t.hintId,latency:r,confidence:t.confidence,patchCount:t.patches.length}),this.log(`🟢 CACHE HIT! Applied ${t.patches.length} patches in ${r.toFixed(2)}ms`,{handler:e,confidence:(100*t.confidence).toFixed(0)+"%"}),void this.componentMethodInvoker(e.componentId,e.methodName,s).catch(e=>{console.error("[Minimact] Background server notification failed:",e)})}}}await this.componentMethodInvoker(e.componentId,e.methodName,s);const r=performance.now()-o;this.playgroundBridge&&this.playgroundBridge.cacheMiss({componentId:e.componentId,methodName:e.methodName,latency:r,patchCount:0}),this.log(`🔴 CACHE MISS - Server latency: ${r.toFixed(2)}ms`,{handler:e,argsObj:n})}catch(t){console.error("[Minimact] Error executing handler:",e,t)}}tryMatchHint(e,t){return this.hintQueue,null}findComponentElement(e){return this.rootElement.querySelector(`[data-minimact-component-id="${e}"]`)}destroy(){for(const[e,t]of this.eventListeners.entries())this.rootElement.removeEventListener(e,t,!0);this.eventListeners.clear(),this.log("Event delegation destroyed")}log(e,t){this.debugLogging&&console.log(`[Minimact EventDelegation] ${e}`,t||"")}}class oe{constructor(e,t={}){this.clientState=e,this.components=new Map,this.debugLogging=t.debugLogging||!1}hydrateComponent(e,t){this.log("Hydrating component",{componentId:e});const n=t.firstElementChild;if(!n)return void console.error("[Minimact Hydration] No component element found in root");const o={componentId:e,element:n,clientState:{},serverState:{}};this.components.set(e,o),t.setAttribute("data-minimact-component-id",e),this.clientState.initializeComponent(e),this.hydrateClientZones(e,t),this.bindStateElements(e,t),this.log("Component hydrated",{componentId:e,metadata:o})}hydrateClientZones(e,t){const n=t.querySelectorAll("[data-minimact-client-scope]");this.log("Found client zones",{count:n.length}),n.forEach(t=>{const n=t,o=n.getAttribute("data-state");if(o){const t=this.getInitialValue(n);this.clientState.setState(e,o,t),(n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)&&this.clientState.bindInput(e,o,n),this.log("Hydrated client zone",{element:n,stateName:o,initialValue:t})}})}bindStateElements(e,t){const n=t.querySelectorAll("[data-bind]");this.log("Found bound elements",{count:n.length}),n.forEach(t=>{const n=t,o=n.getAttribute("data-bind");if(!o)return;const s=this.isInClientScope(n),r=this.determineBindProperty(n);s?(this.clientState.bindToElement(e,o,n,r),this.log("Bound to client state",{element:n,bindKey:o,bindProperty:r})):this.log("Server-bound element (patch-controlled)",{element:n,bindKey:o})})}isInClientScope(e){let t=e;for(;t;){if(t.hasAttribute("data-minimact-client-scope"))return!0;if(t.hasAttribute("data-minimact-server-scope"))return!1;t=t.parentElement}return!1}determineBindProperty(e){return e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement?"value":e.hasAttribute("data-bind-html")?"innerHTML":"textContent"}getInitialValue(e){return e instanceof HTMLInputElement?"checkbox"===e.type?e.checked:"number"===e.type?e.valueAsNumber||0:e.value:e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement?e.value:e.textContent||""}dehydrateComponent(e){this.components.get(e)&&(this.clientState.clearComponent(e),this.components.delete(e),this.log("Component dehydrated",{componentId:e}))}getComponent(e){return this.components.get(e)}updateServerState(e,t,n){const o=this.components.get(e);o&&(o.serverState[t]=n,this.log("Updated server state",{componentId:e,key:t,value:n}))}hydrateAll(){const e=document.querySelectorAll("[data-minimact-component]");this.log("Hydrating all components",{count:e.length}),e.forEach(e=>{const t=e.getAttribute("data-minimact-component");t&&this.hydrateComponent(t,e)})}log(e,t){this.debugLogging&&console.log(`[Minimact Hydration] ${e}`,t||"")}}class se{static renderTemplate(e,t){let n=e;return t.forEach((e,t)=>{const o=`{${t}}`,s=this.formatValue(e);n=n.replace(o,s)}),n}static renderTemplatePatch(e,t){if(e.conditionalTemplates&&void 0!==e.conditionalBindingIndex){const n=e.conditionalBindingIndex,o=e.bindings[n],s="object"==typeof o&&"stateKey"in o?o.stateKey:o,r=t[s],i=e.conditionalTemplates[String(r)];if(void 0!==i){if(!i.includes("{"))return i;const n=e.bindings.map(e=>{if("object"==typeof e&&"stateKey"in e){const n=t[e.stateKey];return e.transform?this.applyTransform(n,e.transform):n}return t[e]});return this.renderTemplate(i,n)}}const n=e.bindings.map((e,n)=>{if("object"==typeof e&&"stateKey"in e){const n=t[e.stateKey];return e.transform?this.applyTransform(n,e.transform):n}return t[e]});return this.renderTemplate(e.template,n)}static materializePatch(e,t){switch(e.type){case"UpdateTextTemplate":{const n=this.renderTemplatePatch(e.templatePatch,t);return{type:"UpdateText",path:e.path,content:n}}case"UpdatePropsTemplate":{const n=this.renderTemplatePatch(e.templatePatch,t);return{type:"UpdateProps",path:e.path,props:{[e.propName]:n}}}case"UpdateListTemplate":{const n=this.renderLoopTemplate(e.loopTemplate,t);return this.convertLoopToPatches(e.path,n)}default:return e}}static materializePatches(e,t){const n=[];for(const o of e){const e=this.materializePatch(o,t);Array.isArray(e)?n.push(...e):n.push(e)}return n}static applyTransform(e,t){if(t.startsWith("toFixed(")){const n=parseInt(t.match(/\d+/)?.[0]||"0");return Number(e).toFixed(n)}if(t.startsWith("* ")){const n=parseFloat(t.substring(2));return Number(e)*n}if(t.startsWith("/ ")){const n=parseFloat(t.substring(2));return Number(e)/n}if(t.startsWith("+ ")){const n=parseFloat(t.substring(2));return Number(e)+n}if(t.startsWith("- ")){const n=parseFloat(t.substring(2));return Number(e)-n}return"toUpperCase()"===t||"toUpperCase"===t?String(e).toUpperCase():"toLowerCase()"===t||"toLowerCase"===t?String(e).toLowerCase():"trim()"===t||"trim"===t?String(e).trim():"!"===t?!e:(console.warn(`[TemplateRenderer] Unknown transform: ${t}`),e)}static formatValue(e){return null==e?"":"string"==typeof e?e:"number"==typeof e||"boolean"==typeof e?String(e):Array.isArray(e)?e.map(e=>this.formatValue(e)).join(", "):"object"==typeof e?JSON.stringify(e):String(e)}static isTemplatePatch(e){return"UpdateTextTemplate"===e.type||"UpdatePropsTemplate"===e.type}static extractBindings(e){return"UpdateTextTemplate"===e.type||"UpdatePropsTemplate"===e.type?e.templatePatch.bindings.map(e=>"object"==typeof e&&"stateKey"in e?e.stateKey:e):[]}static validateBindings(e,t){return e.bindings.every(e=>("object"==typeof e&&"stateKey"in e?e.stateKey:e)in t)}static getMissingBindings(e,t){return e.bindings.filter(e=>!(("object"==typeof e&&"stateKey"in e?e.stateKey:e)in t)).map(e=>"object"==typeof e&&"stateKey"in e?e.stateKey:e)}static renderLoopTemplate(e,t){const n=t[e.array_binding];return Array.isArray(n)?n.map((n,o)=>{const s={...t,item:n,index:o,...e.index_var?{[e.index_var]:o}:{}},r=this.flattenItemState(s,n);return this.renderItemTemplate(e.item_template,r)}):(console.warn(`[TemplateRenderer] Expected array for '${e.array_binding}', got:`,n),[])}static flattenItemState(e,t){const n={...e};if("object"==typeof t&&null!==t&&!Array.isArray(t))for(const e in t)n[`item.${e}`]=t[e];return n}static renderItemTemplate(e,t){switch(e.type){case"Text":return{type:"Text",content:this.renderTemplatePatch(e.template_patch,t)};case"Element":{const n={};if(e.props_templates)for(const[o,s]of Object.entries(e.props_templates))n[o]=this.renderTemplatePatch(s,t);const o=(e.children_templates||[]).map(e=>this.renderItemTemplate(e,t)),s=e.key_binding?String(t[e.key_binding]):void 0;return{type:"Element",tag:e.tag,props:n,children:o,key:s}}default:throw new Error(`Unknown item template type: ${e.type}`)}}static convertLoopToPatches(e,t){return t.map((t,n)=>({type:"Create",path:[...e,n],node:t}))}}class re{constructor(e={}){this.hints=new Map,this.maxHintAge=5e3,this.debugLogging=e.debugLogging||!1}queueHint(e){const t=`${e.componentId}:${e.hintId}`,n=e.patches.some(e=>se.isTemplatePatch(e));this.hints.set(t,{...e,queuedAt:Date.now(),isTemplate:n});const o=n?"📐 TEMPLATE":"📄 CONCRETE";this.log(`${o} hint '${e.hintId}' queued for ${e.componentId}`,e),this.cleanupStaleHints()}matchHint(e,t){const n=Array.from(this.hints.entries()).filter(([t])=>t.startsWith(`${e}:`)).map(([,e])=>e);for(const o of n)if(this.stateMatches(o.predictedState,t)){const n=o.isTemplate?"📐 TEMPLATE":"📄 CONCRETE";this.log(`${n} hint '${o.hintId}' matched!`,{hint:o,stateChanges:t});const s=`${e}:${o.hintId}`;this.hints.delete(s);const r=se.materializePatches(o.patches,t);return{hintId:o.hintId,patches:r,confidence:o.confidence}}return null}stateMatches(e,t){for(const[n,o]of Object.entries(e)){if(!(n in t))return!1;if(JSON.stringify(t[n])!==JSON.stringify(o))return!1}return!0}cleanupStaleHints(){const e=Date.now(),t=[];for(const[n,o]of this.hints.entries())e-o.queuedAt>this.maxHintAge&&t.push(n);if(t.length>0){this.log(`Removing ${t.length} stale hint(s)`,t);for(const e of t)this.hints.delete(e)}}clearComponent(e){const t=Array.from(this.hints.keys()).filter(t=>t.startsWith(`${e}:`));for(const e of t)this.hints.delete(e);t.length>0&&this.log(`Cleared ${t.length} hint(s) for component ${e}`)}clearAll(){this.hints.clear(),this.log("Cleared all hints")}getStats(){const e=Array.from(this.hints.values()),t=e.filter(e=>e.isTemplate),n=e.filter(e=>!e.isTemplate);return{totalHints:this.hints.size,templateHints:t.length,concreteHints:n.length,templatePercentage:this.hints.size>0?Math.round(t.length/this.hints.size*100):0,hintsByComponent:e.reduce((e,t)=>(e[t.componentId]=(e[t.componentId]||0)+1,e),{})}}log(e,...t){this.debugLogging&&console.log(`[Minimact HintQueue] ${e}`,...t)}}class ie{constructor(e={}){this.debugLogging=e.debugLogging||!1}predictionReceived(e){this.postMessage({type:"minimact:prediction-received",data:e}),this.log("Prediction received",e)}cacheHit(e){this.postMessage({type:"minimact:cache-hit",data:{...e,cacheHit:!0,elapsedMs:e.latency}}),this.log("🟢 CACHE HIT",e)}cacheMiss(e){this.postMessage({type:"minimact:cache-miss",data:{...e,cacheHit:!1,elapsedMs:e.latency,predictionConfidence:0}}),this.log("🔴 CACHE MISS",e)}correctionApplied(e){this.postMessage({type:"minimact:correction",data:e}),this.log("Correction applied (prediction was incorrect)",e)}postMessage(e){window.parent&&window.parent!==window&&window.parent.postMessage(e,"*"),window.dispatchEvent(new CustomEvent(e.type,{detail:e.data}))}log(e,t){this.debugLogging&&console.log(`[Minimact PlaygroundBridge] ${e}`,t||"")}}const ae={};let ce=!1;function le(e,t){ce&&console.log(`[ClientComputed] ${e}`,t||"")}function he(e){const t=ae[e];if(!t)return le("No computed variables for component",{componentId:e}),{};const n={};for(const[e,o]of Object.entries(t))try{const t=o.computeFn();o.lastValue=t,n[e]=t}catch(t){console.error(`[ClientComputed] Error computing '${e}':`,t),n[e]=void 0}return le("Computed all variables",{componentId:e,result:n}),n}function de(e,t){const n=ae[e];if(!n)return{};const o={};for(const[s,r]of Object.entries(n))if(!r.dependencies||r.dependencies.includes(t))try{const n=r.computeFn();r.lastValue=n,o[s]=n,le("Recomputed dependent variable",{componentId:e,varName:s,changedStateKey:t,value:n})}catch(e){console.error(`[ClientComputed] Error recomputing '${s}':`,e),o[s]=void 0}return o}function ue(e){return!!ae[e]&&Object.keys(ae[e]).length>0}class pe{constructor(){this.templates=new Map,this.componentStates=new Map}loadTemplateMap(e,t){console.log(`[TemplateState] Loading ${Object.keys(t.templates).length} templates for ${e}`);for(const[n,o]of Object.entries(t.templates)){const t=`${e}:${n}`;this.templates.set(t,o)}this.componentStates.has(e)||this.componentStates.set(e,new Map)}registerTemplate(e,t,n){const o=`${e}:${t}`;this.templates.set(o,n)}getTemplate(e,t){const n=`${e}:${t}`;return this.templates.get(n)}getComponentTemplates(e){const t=new Map;for(const[n,o]of this.templates.entries())if(n.startsWith(`${e}:`)){const s=n.substring(e.length+1);t.set(s,o)}return t}getTemplatesBoundTo(e,t){const n=[];for(const[o,s]of this.templates.entries())o.startsWith(`${e}:`)&&s.bindings.includes(t)&&n.push(s);return n}updateState(e,t,n){let o=this.componentStates.get(e);o||(o=new Map,this.componentStates.set(e,o)),o.set(t,n)}getStateValue(e,t){return this.componentStates.get(e)?.get(t)}render(e,t){const n=this.getTemplate(e,t);if(!n)return null;const o=n.bindings.map(t=>this.getStateValue(e,t));return this.renderWithParams(n.template,o)}renderWithParams(e,t){let n=e;return t.forEach((e,t)=>{const o=`{${t}}`,s=null!=e?String(e):"";n=n.replace(o,s)}),n}applyTemplatePatch(e){const{componentId:t,path:n,template:o,params:s,bindings:r,slots:i,attribute:a}=e,c=this.renderWithParams(o,s),l=`${t}:${this.buildNodePathKey(n)}`,h=this.templates.get(l);return h?(h.template=o,h.bindings=r,h.slots=i,a&&(h.attribute=a)):this.templates.set(l,{template:o,bindings:r,slots:i,path:n,type:a?"attribute":"dynamic",attribute:a}),console.log(`[TemplateState] Applied template patch: "${o}" → "${c}"`),{text:c,path:n}}buildNodePathKey(e){return e.join("_")}clearComponent(e){const t=[];for(const n of this.templates.keys())n.startsWith(`${e}:`)&&t.push(n);for(const e of t)this.templates.delete(e);this.componentStates.delete(e)}clear(){this.templates.clear(),this.componentStates.clear()}getStats(){const e=this.componentStates.size,t=this.templates.size;let n=0;for(const e of this.templates.values())n+=2*e.template.length,n+=20*e.bindings.length,n+=4*e.slots.length,n+=4*e.path.length;return{componentCount:e,templateCount:t,memoryKB:Math.round(n/1024),avgTemplatesPerComponent:t/Math.max(e,1)}}}const ge=new pe;class me{constructor(e,t,n,o,s={}){this.taskId=e,this.componentId=t,this.signalR=n,this.context=o,this.status="idle",this.progress=0,this.chunks=[],this.chunkCount=0,this._options=s,this.streaming=s.stream||!1,this._createPromise()}_createPromise(){this._promise=new Promise((e,t)=>{this._resolve=e,this._reject=t})}get promise(){return this._promise}get idle(){return"idle"===this.status}get running(){return"running"===this.status}get complete(){return"complete"===this.status}get failed(){return"error"===this.status}get cancelled(){return"cancelled"===this.status}start(...e){this.status="running",this.startedAt=new Date,this.completedAt=void 0,this.progress=0,this.error=void 0,this.streaming?(this.chunks=[],this.chunkCount=0,this.partial=void 0):this.result=void 0,this._triggerRerender(),this.signalR.invoke("StartServerTask",this.componentId,this.taskId,e||[]).catch(e=>{console.error(`[Minimact] Failed to start task ${this.taskId}:`,e),this.status="error",this.error=e,this.completedAt=new Date,this.duration=this.completedAt.getTime()-(this.startedAt?.getTime()||0),this._reject?.(e),this._triggerRerender()})}retry(...e){"error"===this.status||"cancelled"===this.status?(this._createPromise(),this.status="running",this.startedAt=new Date,this.completedAt=void 0,this.progress=0,this.error=void 0,this.streaming?(this.chunks=[],this.chunkCount=0,this.partial=void 0):this.result=void 0,this._triggerRerender(),this.signalR.invoke("RetryServerTask",this.componentId,this.taskId,e||[]).catch(e=>{console.error(`[Minimact] Failed to retry task ${this.taskId}:`,e),this.status="error",this.error=e,this.completedAt=new Date,this.duration=this.completedAt.getTime()-(this.startedAt?.getTime()||0),this._reject?.(e),this._triggerRerender()})):console.warn("[Minimact] Can only retry failed or cancelled tasks")}cancel(){"running"===this.status?this.signalR.invoke("CancelServerTask",this.componentId,this.taskId).then(()=>{this.status="cancelled",this.completedAt=new Date,this.duration=this.completedAt.getTime()-(this.startedAt?.getTime()||0),this._reject?.(new Error("Task cancelled by user")),this._triggerRerender()}).catch(e=>{console.error(`[Minimact] Failed to cancel task ${this.taskId}:`,e)}):console.warn("[Minimact] Can only cancel running tasks")}_updateFromServer(e){const t=this.status;this.status=e.status,this.progress=e.progress||0,this.result=e.result,e.error&&(this.error=new Error(e.error)),e.startedAt&&(this.startedAt=new Date(e.startedAt)),e.completedAt&&(this.completedAt=new Date(e.completedAt)),e.duration&&(this.duration=e.duration),"complete"===this.status&&"complete"!==t?this._resolve&&this._resolve(this.result):"error"===this.status&&"error"!==t?this._reject&&this._reject(this.error):"cancelled"===this.status&&"cancelled"!==t&&this._reject&&this._reject(new Error("Task cancelled")),t===this.status&&this.progress===e.progress||this._triggerRerender()}_triggerRerender(){if(!this.context||!this.context.hintQueue)return;const e={[this.taskId]:{status:this.status,progress:this.progress,chunkCount:this.chunkCount}},t=this.context.hintQueue.matchHint(this.context.componentId,e);t?(console.log(`[Minimact] 🟢 Task state change predicted! Applying ${t.patches.length} patches`),this.context.domPatcher.applyPatches(this.context.element,t.patches)):console.log("[Minimact] 🔴 Task state change not predicted")}}let fe=null,_e=null,ye=0,be=0,we=0,ve=0;function Ce(e,t){let n=e;for(const e of t){if(!n||!n.childNodes)return null;n=n.childNodes[e]||null}return n}function Se(e){if(!_e)throw new Error("useState must be called within a component render");const t=_e,n="state_"+ye++;t.state.has(n)||t.state.set(n,e);const o=t.state.get(n),s=e=>{const o=performance.now(),s="function"==typeof e?e(t.state.get(n)):e,r={[n]:s},i=t.hintQueue.matchHint(t.componentId,r);if(i){const e=performance.now()-o;console.log(`[Minimact] 🟢 CACHE HIT! Hint '${i.hintId}' matched - applying ${i.patches.length} patches in ${e.toFixed(2)}ms`),t.domPatcher.applyPatches(t.element,i.patches),t.playgroundBridge&&t.playgroundBridge.cacheHit({componentId:t.componentId,hintId:i.hintId,latency:e,confidence:i.confidence,patchCount:i.patches.length})}else{const e=performance.now()-o;console.log("[Minimact] 🔴 CACHE MISS - No prediction for state change:",r),t.playgroundBridge&&t.playgroundBridge.cacheMiss({componentId:t.componentId,methodName:`setState(${n})`,latency:e,patchCount:0})}t.state.set(n,s),ge.updateState(t.componentId,n,s);const a=ge.getTemplatesBoundTo(t.componentId,n);for(const e of a){const o=e.path.join("_"),s=ge.render(t.componentId,o);if(null!==s){const o=Ce(t.element,e.path);o&&(o.nodeType===Node.TEXT_NODE?o.textContent=s:o instanceof HTMLElement&&(e.attribute?o.setAttribute(e.attribute,s):o.textContent=s),console.log(`[Minimact] 📋 Template updated: "${s}" (${n} changed)`))}}t.signalR.updateComponentState(t.componentId,n,s).catch(e=>{console.error("[Minimact] Failed to sync state to server:",e)})};return Array.isArray(o)?[o,Te(s,o,n,t)]:[o,s]}function Ie(e,t){if(!_e)throw new Error("useEffect must be called within a component render");const n=_e,o=be++;if(n.effects[o]){const s=n.effects[o];(!t||!s.deps||t.length!==s.deps.length||t.some((e,t)=>e!==s.deps[t]))&&(s.cleanup&&s.cleanup(),s.callback=e,s.deps=t,queueMicrotask(()=>{const t=e();"function"==typeof t&&(s.cleanup=t)}))}else n.effects[o]={callback:e,deps:t,cleanup:void 0},queueMicrotask(()=>{const t=e();"function"==typeof t&&(n.effects[o].cleanup=t)})}function ke(e){if(!_e)throw new Error("useRef must be called within a component render");const t=_e,n="ref_"+we++;return t.refs.has(n)||t.refs.set(n,{current:e}),t.refs.get(n)}function Te(e,t,n,o){const s=e;return s.append=e=>{const s=[...t,e];o.state.set(n,s),ge.updateState(o.componentId,n,s),o.signalR.updateComponentStateWithOperation(o.componentId,n,s,{type:"Append",item:e}).catch(e=>{console.error("[Minimact] Failed to sync array append to server:",e)}),console.log(`[Minimact] 🔵 Array append: ${n}`,e)},s.prepend=e=>{const s=[e,...t];o.state.set(n,s),ge.updateState(o.componentId,n,s),o.signalR.updateComponentStateWithOperation(o.componentId,n,s,{type:"Prepend",item:e}).catch(e=>{console.error("[Minimact] Failed to sync array prepend to server:",e)}),console.log(`[Minimact] 🔵 Array prepend: ${n}`,e)},s.insertAt=(e,s)=>{const r=[...t];r.splice(e,0,s),o.state.set(n,r),ge.updateState(o.componentId,n,r),o.signalR.updateComponentStateWithOperation(o.componentId,n,r,{type:"InsertAt",index:e,item:s}).catch(e=>{console.error("[Minimact] Failed to sync array insert to server:",e)}),console.log(`[Minimact] 🔵 Array insertAt(${e}): ${n}`,s)},s.removeAt=e=>{const s=t.filter((t,n)=>n!==e);o.state.set(n,s),ge.updateState(o.componentId,n,s),o.signalR.updateComponentStateWithOperation(o.componentId,n,s,{type:"RemoveAt",index:e}).catch(e=>{console.error("[Minimact] Failed to sync array remove to server:",e)}),console.log(`[Minimact] 🔵 Array removeAt(${e}): ${n}`)},s.updateAt=(e,s)=>{const r=[...t];r[e]="function"==typeof s?s(t[e]):{...t[e],...s},o.state.set(n,r),ge.updateState(o.componentId,n,r),o.signalR.updateComponentStateWithOperation(o.componentId,n,r,{type:"UpdateAt",index:e,item:r[e]}).catch(e=>{console.error("[Minimact] Failed to sync array update to server:",e)}),console.log(`[Minimact] 🔵 Array updateAt(${e}): ${n}`,r[e])},s.clear=()=>{e([])},s.removeWhere=n=>{const o=t.filter(e=>!n(e));e(o)},s.updateWhere=(n,o)=>{const s=t.map(e=>n(e)?{...e,...o}:e);e(s)},s.appendMany=n=>{const o=[...t,...n];e(o)},s.removeMany=n=>{const o=t.filter((e,t)=>!n.includes(t));e(o)},s}function Ee(e,t={}){if(!_e)throw new Error("useServerTask must be called within a component render");const n=_e,o="serverTask_"+ve++;if(n.serverTasks||(n.serverTasks=new Map),!n.serverTasks.has(o)){const e=new me(o,n.componentId,n.signalR,n,t);n.serverTasks.set(o,e)}return n.serverTasks.get(o)}let Pe=null;class Me{constructor(e={}){this.channels=new Map,this.debugLogging=!1,this.debugLogging=e.debugLogging||!1}subscribe(e,t){this.channels.has(e)||this.channels.set(e,{subscribers:new Set,lastMessage:null});const n=this.channels.get(e);t&&n.subscribers.add(t);const o=n.lastMessage||{value:void 0,timestamp:Date.now()};return this.log(`Subscribed to '${e}'`,{hasCallback:!!t}),o}unsubscribe(e,t){const n=this.channels.get(e);n&&(n.subscribers.delete(t),this.log(`Unsubscribed from '${e}'`))}publish(e,t,n={}){this.channels.has(e)||this.channels.set(e,{subscribers:new Set,lastMessage:null});const o=this.channels.get(e),s={value:t,error:n.error,waiting:n.waiting,source:n.source,timestamp:Date.now(),isStale:!1};o.lastMessage=s,o.subscribers.forEach(t=>{try{t(s)}catch(t){console.error(`[Minimact PubSub] Error in subscriber for '${e}':`,t)}}),this.log(`Published to '${e}'`,{subscribers:o.subscribers.size,value:t})}clear(e){this.channels.delete(e),this.log(`Cleared channel '${e}'`)}clearAll(){this.channels.clear(),this.log("Cleared all channels")}getStats(){return{totalChannels:this.channels.size,channels:Array.from(this.channels.entries()).map(([e,t])=>({name:e,subscribers:t.subscribers.size,hasLastMessage:!!t.lastMessage}))}}log(e,t){this.debugLogging&&console.log(`[Minimact PubSub] ${e}`,t||"")}}let $e=null;function Re(e){return $e||($e=new Me(e)),$e}class Ae{constructor(e=document.body,t={}){if(this.eventDelegation=null,"string"==typeof e){const t=document.querySelector(e);if(!t)throw new Error(`[Minimact] Root element not found: ${e}`);this.rootElement=t}else this.rootElement=e;var n;this.options={hubUrl:t.hubUrl||"/minimact",enableDebugLogging:t.enableDebugLogging||!1,reconnectInterval:t.reconnectInterval||5e3},this.signalR=new G(this.options.hubUrl,{reconnectInterval:this.options.reconnectInterval,debugLogging:this.options.enableDebugLogging}),this.domPatcher=new ee({debugLogging:this.options.enableDebugLogging}),this.clientState=new te({debugLogging:this.options.enableDebugLogging}),this.hydration=new oe(this.clientState,{debugLogging:this.options.enableDebugLogging}),this.hintQueue=new re({debugLogging:this.options.enableDebugLogging}),this.playgroundBridge=new ie({debugLogging:this.options.enableDebugLogging}),n=this.options.enableDebugLogging,ce=n,this.setupSignalRHandlers(),this.log("Minimact initialized",{rootElement:this.rootElement,options:this.options})}async start(){await this.signalR.start(),this.hydration.hydrateAll(),this.eventDelegation=new ne(this.rootElement,(e,t,n)=>this.signalR.invokeComponentMethod(e,t,n),{debugLogging:this.options.enableDebugLogging}),await this.registerAllComponents(),this.log("Minimact started")}async stop(){this.eventDelegation&&(this.eventDelegation.destroy(),this.eventDelegation=null),await this.signalR.stop(),this.log("Minimact stopped")}setupSignalRHandlers(){this.signalR.on("updateComponent",({componentId:e,html:t})=>{const n=this.hydration.getComponent(e);n&&(this.domPatcher.replaceHTML(n.element,t),this.log("Component HTML updated",{componentId:e}))}),this.signalR.on("applyPatches",({componentId:e,patches:t})=>{const n=this.hydration.getComponent(e);n&&(this.domPatcher.applyPatches(n.element,t),this.log("Patches applied",{componentId:e,patchCount:t.length}))}),this.signalR.on("applyPrediction",({componentId:e,patches:t,confidence:n})=>{const o=this.hydration.getComponent(e);o&&(this.domPatcher.applyPatches(o.element,t),this.log(`Prediction applied (${(100*n).toFixed(0)}% confident)`,{componentId:e,patchCount:t.length}))}),this.signalR.on("applyCorrection",({componentId:e,patches:t})=>{const n=this.hydration.getComponent(e);n&&(this.domPatcher.applyPatches(n.element,t),this.log("Correction applied (prediction was incorrect)",{componentId:e,patchCount:t.length}))}),this.signalR.on("queueHint",e=>{this.hintQueue.queueHint(e),this.log(`Hint '${e.hintId}' queued for component ${e.componentId}`,{patchCount:e.patches.length,confidence:(100*e.confidence).toFixed(0)+"%"}),this.playgroundBridge.predictionReceived({componentId:e.componentId,hintId:e.hintId,patchCount:e.patches.length,confidence:e.confidence})}),this.signalR.on("reconnected",async()=>{this.log("Reconnected - re-registering components"),await this.registerAllComponents()}),this.signalR.on("error",({message:e})=>{console.error("[Minimact] Server error:",e)})}async registerAllComponents(){const e=document.querySelectorAll("[data-minimact-component]");for(const t of Array.from(e)){const e=t.getAttribute("data-minimact-component");if(e)try{await this.signalR.registerComponent(e),this.log("Registered component",{componentId:e})}catch(t){console.error("[Minimact] Failed to register component:",e,t)}}}hydrateComponent(e,t){this.hydration.hydrateComponent(e,t)}getComponent(e){return this.hydration.getComponent(e)}getClientState(e,t){return this.clientState.getState(e,t)}setClientState(e,t,n){this.clientState.setState(e,t,n),this.recomputeAndSyncClientState(e,t)}subscribeToState(e,t,n){return this.clientState.subscribe(e,t,n)}async recomputeAndSyncClientState(e,t){if(!ue(e))return;const n=t?de(e,t):he(e);if(Object.keys(n).length>0)try{await this.signalR.updateClientComputedState(e,n),this.log("Client-computed state synced",{componentId:e,computed:n})}catch(e){console.error("[Minimact] Failed to sync client-computed state:",e)}}get connectionState(){return this.signalR.state.toString()}get connectionId(){return this.signalR.connectionId}log(e,t){this.options.enableDebugLogging&&console.log(`[Minimact] ${e}`,t||"")}}if("undefined"!=typeof window)if("loading"===document.readyState)document.addEventListener("DOMContentLoaded",()=>{if(document.body.hasAttribute("data-minimact-auto-init")){const e=new Ae(document.body,{enableDebugLogging:document.body.hasAttribute("data-minimact-debug")});e.start().catch(console.error),window.minimact=e}});else if(document.body.hasAttribute("data-minimact-auto-init")){const e=new Ae(document.body,{enableDebugLogging:document.body.hasAttribute("data-minimact-debug")});e.start().catch(console.error),window.minimact=e}return"undefined"!=typeof window&&(window.Minimact=Ae),e.ClientStateManager=te,e.DOMPatcher=ee,e.EventDelegation=ne,e.HintQueue=re,e.HydrationManager=oe,e.Minimact=Ae,e.SignalRManager=G,e.TemplateRenderer=se,e.TemplateStateManager=pe,e.clearClientComputedComponent=function(e){delete ae[e],le("Cleared component",{componentId:e})},e.clearComponentContext=function(){_e=null},e.clearContextHookContext=function(){Pe=null},e.computeAllForComponent=he,e.computeDependentVariables=de,e.computeVariable=function(e,t){const n=ae[e]?.[t];if(n)try{const o=n.computeFn();return n.lastValue=o,le("Computed variable",{componentId:e,varName:t,value:o}),o}catch(e){return void console.error(`[ClientComputed] Error computing '${t}':`,e)}else console.warn(`[ClientComputed] Variable '${t}' not registered for component '${e}'`)},e.createContext=function(e,t={}){if("url"===t.scope&&!t.urlPattern)throw new Error(`Context '${e}' with scope 'url' requires urlPattern`);return{key:e,options:{scope:t.scope||"request",urlPattern:t.urlPattern,expiry:t.expiry,defaultValue:t.defaultValue}}},e.default=Ae,e.getAllLastValues=function(e){const t=ae[e];if(!t)return{};const n={};for(const[e,o]of Object.entries(t))n[e]=o.lastValue;return n},e.getClientComputedDebugInfo=function(){const e={};for(const[t,n]of Object.entries(ae)){const o=Object.keys(n);e[t]={variableCount:o.length,variables:o}}return{componentCount:Object.keys(ae).length,components:e}},e.getComputedVariableNames=function(e){const t=ae[e];return t?Object.keys(t):[]},e.getLastValue=function(e,t){return ae[e]?.[t]?.lastValue},e.hasClientComputed=ue,e.registerClientComputed=function(e,t,n,o){ae[e]||(ae[e]={}),ae[e][t]={varName:t,computeFn:n,dependencies:o},le("Registered client-computed variable",{componentId:e,varName:t,dependencies:o})},e.setComponentContext=function(e){_e=e,ye=0,be=0,we=0,ve=0,function(e){fe=e}(e)},e.setContextHookContext=function(e){Pe=e},e.templateState=ge,e.useAnimationFrame=function(e){return requestAnimationFrame(t=>{try{e(t)}catch(e){console.error("[Minimact useAnimationFrame] Error in animation frame:",e)}})},e.useComputed=function(e,t,n=[],o={}){if(!fe)throw new Error("[Minimact] useComputed must be called within a component render");const{memoize:s=!0,expiry:r,debounce:i,throttle:a,initialValue:c}=o,l=fe,[h,d]=Se(void 0!==c?c:null),u=ke(null),p=ke(null);function g(t){const n=()=>{l.signalR?l.signalR.updateClientComputedState(l.componentId,{[e]:t}).catch(t=>{console.error(`[Minimact] Failed to sync computed state '${e}':`,t)}):console.warn(`[Minimact] SignalR not available, cannot sync useComputed('${e}')`)};if(i)return null!==p.current&&clearTimeout(p.current),void(p.current=window.setTimeout(()=>{n(),p.current=null},i));n()}return Ie(()=>{if(s&&u.current&&n.length===u.current.deps.length&&!n.some((e,t)=>!Object.is(e,u.current.deps[t]))){if(!r)return;if(Date.now()-u.current.timestamp<r)return}let o;try{o=t()}catch(t){throw console.error(`[Minimact] Error in useComputed('${e}'):`,t),t}o instanceof Promise?o.then(e=>{s&&(u.current={value:e,timestamp:Date.now(),deps:[...n]}),d(e),g(e)}).catch(t=>{console.error(`[Minimact] Async error in useComputed('${e}'):`,t)}):(s&&(u.current={value:o,timestamp:Date.now(),deps:[...n]}),d(o),g(o))},n),h},e.useContext=function(e){if(!Pe)throw new Error("[Minimact] useContext must be called within a component render");const t=Pe,n=`context_${e.key}`;let o=t.state.get(n);return void 0===o&&void 0!==e.options.defaultValue&&(o=e.options.defaultValue),[o,o=>{t.state.set(n,o);const s={[n]:o},r=t.hintQueue.matchHint(t.componentId,s);r&&t.domPatcher.applyPatches(t.element,r.patches),t.signalR.invoke("UpdateContext",{key:e.key,value:o,scope:e.options.scope,urlPattern:e.options.urlPattern,expiry:e.options.expiry}).catch(t=>{console.error(`[Minimact] Failed to update context '${e.key}':`,t)})},()=>{t.state.set(n,void 0);const o={[n]:void 0},s=t.hintQueue.matchHint(t.componentId,o);s&&t.domPatcher.applyPatches(t.element,s.patches),t.signalR.invoke("ClearContext",{key:e.key,scope:e.options.scope,urlPattern:e.options.urlPattern}).catch(t=>{console.error(`[Minimact] Failed to clear context '${e.key}':`,t)})}]},e.useEffect=Ie,e.useIdleCallback=function(e,t){return"requestIdleCallback"in window?requestIdleCallback(t=>{try{e(t)}catch(e){console.error("[Minimact useIdleCallback] Error in idle callback:",e)}},t):setTimeout(()=>{e({didTimeout:!1,timeRemaining:()=>50})},1)},e.useMacroTask=function(e,t=0){setTimeout(()=>{try{e()}catch(e){console.error("[Minimact useMacroTask] Error in macrotask:",e)}},t)},e.useMicroTask=function(e){queueMicrotask(()=>{try{e()}catch(e){console.error("[Minimact useMicroTask] Error in microtask:",e)}})},e.usePaginatedServerTask=function(e,t){const n=t.pageSize||20,[o,s]=Se(1),[r,i]=Se([]),[a,c]=Se(0),[l,h]=Se(null),d=ke(new Map),u=ke([]),p=(y=t.dependencies)&&0!==y.length?1===y.length&&"object"==typeof y[0]?y[0]:y.reduce((e,t,n)=>(e[`dep${n}`]=t,e),{}):{},g=Ee(0,{runtime:t.runtime,parallel:t.parallel}),m=Ee(0,{runtime:t.runtime}),f=async(e,o=!0)=>{if(o&&d.current.has(e)){const n=d.current.get(e);return i(n),s(e),d.current.delete(e),console.log(`[usePaginatedServerTask] 🟢 Cache hit for page ${e}`),t.prefetchNext&&e<b&&_(e+1),void(t.prefetchPrev&&e>1&&_(e-1))}const r={page:e,pageSize:n,filters:p};u.current=[r],g.start(r);try{const n=await g.promise;i(n),s(e),h(null),console.log(`[usePaginatedServerTask] 🔴 Fetched page ${e} from server`),t.prefetchNext&&e<b&&_(e+1),t.prefetchPrev&&e>1&&_(e-1)}catch(t){h(t.message||"Failed to fetch page"),console.error(`[usePaginatedServerTask] Error fetching page ${e}:`,t)}},_=async e=>{if(d.current.has(e))return;const t={page:e,pageSize:n,filters:p};g.start(t);try{const t=await g.promise;d.current.set(e,t),console.log(`[usePaginatedServerTask] ⚡ Prefetched page ${e}`)}catch(t){console.error(`[usePaginatedServerTask] Prefetch failed for page ${e}:`,t)}};var y;Ie(()=>{m.start(p),m.promise.then(e=>{c(e)}).catch(e=>{console.error("[usePaginatedServerTask] Failed to get total count:",e)})},[JSON.stringify(p)]),Ie(()=>{f(1,!1)},[]),Ie(()=>{t.dependencies&&t.dependencies.length>0&&(d.current.clear(),f(1,!1))},[JSON.stringify(p)]);const b=Math.ceil(a/n),w=o<b,v=o>1;return{items:r,total:a,totalPages:b,page:o,pageSize:n,pending:"running"===g.status,error:l||g.error?.message,hasNext:w,hasPrev:v,next:()=>{w&&f(o+1)},prev:()=>{v&&f(o-1)},goto:e=>{e>=1&&e<=b&&f(e)},refresh:()=>{d.current.clear(),f(o,!1)},_fetchTask:g,_countTask:m}},e.usePub=function(e){const t=Re();return(n,o={})=>{t.publish(e,n,o)}},e.useRef=ke,e.useServerTask=Ee,e.useSignalR=function(e,t,n={}){const o=new G(e,{reconnectInterval:n.reconnectInterval,debugLogging:n.debugLogging}),s={data:null,error:null,connected:!1,connectionId:null};return o.on("connected",({connectionId:e})=>{s.connected=!0,s.connectionId=e||null,s.error=null}),o.on("reconnected",({connectionId:e})=>{s.connected=!0,s.connectionId=e||null,s.error=null}),o.on("closed",({error:e})=>{s.connected=!1,s.connectionId=null,e&&(s.error=e.toString())}),o.on("error",({message:e})=>{s.error=e}),t&&o.on("message",e=>{s.data=e,t(e)}),!1!==n.autoConnect&&o.start().catch(e=>{s.error=e.message,console.error("[Minimact useSignalR] Auto-connect failed:",e)}),{state:s,send:async(e,...t)=>{try{await o.connection.invoke(e,...t)}catch(e){throw s.error=e.message,e}},on:(e,t)=>{o.connection.on(e,t)},off:(e,t)=>{o.connection.off(e,t)},connect:async()=>{await o.start()},disconnect:async()=>{await o.stop()}}},e.useState=Se,e.useSub=function(e,t){return Re().subscribe(e,t)},Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=core-r.min.js.map
