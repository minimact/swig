{"version":3,"file":"core-r.min.js","sources":["../node_modules/@microsoft/signalr/dist/esm/Errors.js","../node_modules/@microsoft/signalr/dist/esm/HttpClient.js","../node_modules/@microsoft/signalr/dist/esm/ILogger.js","../node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","../node_modules/@microsoft/signalr/dist/esm/HubConnection.js","../node_modules/@microsoft/signalr/dist/esm/Loggers.js","../node_modules/@microsoft/signalr/dist/esm/Utils.js","../node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js","../node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js","../node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js","../node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js","../node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js","../node_modules/@microsoft/signalr/dist/esm/Subject.js","../node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js","../node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js","../node_modules/@microsoft/signalr/dist/esm/HeaderNames.js","../node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js","../node_modules/@microsoft/signalr/dist/esm/ITransport.js","../node_modules/@microsoft/signalr/dist/esm/AbortController.js","../node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js","../node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js","../node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js","../node_modules/@microsoft/signalr/dist/esm/HttpConnection.js","../node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js","../node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js","../src/signalr-manager.ts","../src/dom-patcher.ts","../src/client-state.ts","../src/event-delegation.ts","../src/hydration.ts","../src/template-renderer.ts","../src/hint-queue.ts","../src/playground-bridge.ts","../src/client-computed.ts","../src/template-state.ts","../src/server-task.ts","../src/useComputed.ts","../src/hooks.ts","../src/useContext.ts","../src/pub-sub.ts","../src/index-r.ts","../src/task-scheduling.ts","../src/usePaginatedServerTask.ts","../src/signalr-hook.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n    MessageType[MessageType[\"Ack\"] = 8] = \"Ack\";\r\n    MessageType[MessageType[\"Sequence\"] = 9] = \"Sequence\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n    constructor(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds !== null && serverTimeoutInMilliseconds !== void 0 ? serverTimeoutInMilliseconds : DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds !== null && keepAliveIntervalInMilliseconds !== void 0 ? keepAliveIntervalInMilliseconds : DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize !== null && statefulReconnectBufferSize !== void 0 ? statefulReconnectBufferSize : DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                };\r\n            }\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        }\r\n        catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        }\r\n        else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message)\r\n                            .catch((e) => {\r\n                            this._logger.log(LogLevel.Error, `Invoke client method threw error: ${getErrorString(e)}`);\r\n                        });\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    async _invokeClientMethod(invocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            }\r\n            catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `${exception}`, null);\r\n            }\r\n            else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error !== null && error !== void 0 ? error : new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n    _createCloseMessage() {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"8.0.17\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    static get isBrowser() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    static get isWebWorker() {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    // react-native has a window but no document\r\n    static get isReactNative() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    static get isNode() {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, content, options) {\r\n    const headers = {};\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        // Node added a fetch implementation to the global scope starting in v18.\r\n        // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n        if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            if (typeof fetch === \"undefined\") {\r\n                this._fetchType = requireFunc(\"node-fetch\");\r\n            }\r\n            else {\r\n                // Use fetch from Node if available\r\n                this._fetchType = fetch;\r\n            }\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }\r\n            else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                }\r\n                else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class MessageBuffer {\r\n    constructor(protocol, connection, bufferSize) {\r\n        this._bufferSize = 100000;\r\n        this._messages = [];\r\n        this._totalMessageCount = 0;\r\n        this._waitForSequenceMessage = false;\r\n        // Message IDs start at 1 and always increment by 1\r\n        this._nextReceivingSequenceId = 1;\r\n        this._latestReceivedSequenceId = 0;\r\n        this._bufferedByteCount = 0;\r\n        this._reconnectInProgress = false;\r\n        this._protocol = protocol;\r\n        this._connection = connection;\r\n        this._bufferSize = bufferSize;\r\n    }\r\n    async _send(message) {\r\n        const serializedMessage = this._protocol.writeMessage(message);\r\n        let backpressurePromise = Promise.resolve();\r\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\r\n        if (this._isInvocationMessage(message)) {\r\n            this._totalMessageCount++;\r\n            let backpressurePromiseResolver = () => { };\r\n            let backpressurePromiseRejector = () => { };\r\n            if (isArrayBuffer(serializedMessage)) {\r\n                this._bufferedByteCount += serializedMessage.byteLength;\r\n            }\r\n            else {\r\n                this._bufferedByteCount += serializedMessage.length;\r\n            }\r\n            if (this._bufferedByteCount >= this._bufferSize) {\r\n                backpressurePromise = new Promise((resolve, reject) => {\r\n                    backpressurePromiseResolver = resolve;\r\n                    backpressurePromiseRejector = reject;\r\n                });\r\n            }\r\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount, backpressurePromiseResolver, backpressurePromiseRejector));\r\n        }\r\n        try {\r\n            // If this is set it means we are reconnecting or resending\r\n            // We don't want to send on a disconnected connection\r\n            // And we don't want to send if resend is running since that would mean sending\r\n            // this message twice\r\n            if (!this._reconnectInProgress) {\r\n                await this._connection.send(serializedMessage);\r\n            }\r\n        }\r\n        catch {\r\n            this._disconnected();\r\n        }\r\n        await backpressurePromise;\r\n    }\r\n    _ack(ackMessage) {\r\n        let newestAckedMessage = -1;\r\n        // Find index of newest message being acked\r\n        for (let index = 0; index < this._messages.length; index++) {\r\n            const element = this._messages[index];\r\n            if (element._id <= ackMessage.sequenceId) {\r\n                newestAckedMessage = index;\r\n                if (isArrayBuffer(element._message)) {\r\n                    this._bufferedByteCount -= element._message.byteLength;\r\n                }\r\n                else {\r\n                    this._bufferedByteCount -= element._message.length;\r\n                }\r\n                // resolve items that have already been sent and acked\r\n                element._resolver();\r\n            }\r\n            else if (this._bufferedByteCount < this._bufferSize) {\r\n                // resolve items that now fall under the buffer limit but haven't been acked\r\n                element._resolver();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (newestAckedMessage !== -1) {\r\n            // We're removing everything including the message pointed to, so add 1\r\n            this._messages = this._messages.slice(newestAckedMessage + 1);\r\n        }\r\n    }\r\n    _shouldProcessMessage(message) {\r\n        if (this._waitForSequenceMessage) {\r\n            if (message.type !== MessageType.Sequence) {\r\n                return false;\r\n            }\r\n            else {\r\n                this._waitForSequenceMessage = false;\r\n                return true;\r\n            }\r\n        }\r\n        // No special processing for acks, pings, etc.\r\n        if (!this._isInvocationMessage(message)) {\r\n            return true;\r\n        }\r\n        const currentId = this._nextReceivingSequenceId;\r\n        this._nextReceivingSequenceId++;\r\n        if (currentId <= this._latestReceivedSequenceId) {\r\n            if (currentId === this._latestReceivedSequenceId) {\r\n                // Should only hit this if we just reconnected and the server is sending\r\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\r\n                this._ackTimer();\r\n            }\r\n            // Ignore, this is a duplicate message\r\n            return false;\r\n        }\r\n        this._latestReceivedSequenceId = currentId;\r\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\r\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\r\n        this._ackTimer();\r\n        return true;\r\n    }\r\n    _resetSequence(message) {\r\n        if (message.sequenceId > this._nextReceivingSequenceId) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\r\n            return;\r\n        }\r\n        this._nextReceivingSequenceId = message.sequenceId;\r\n    }\r\n    _disconnected() {\r\n        this._reconnectInProgress = true;\r\n        this._waitForSequenceMessage = true;\r\n    }\r\n    async _resend() {\r\n        const sequenceId = this._messages.length !== 0\r\n            ? this._messages[0]._id\r\n            : this._totalMessageCount + 1;\r\n        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Sequence, sequenceId }));\r\n        // Get a local variable to the _messages, just in case messages are acked while resending\r\n        // Which would slice the _messages array (which creates a new copy)\r\n        const messages = this._messages;\r\n        for (const element of messages) {\r\n            await this._connection.send(element._message);\r\n        }\r\n        this._reconnectInProgress = false;\r\n    }\r\n    _dispose(error) {\r\n        error !== null && error !== void 0 ? error : (error = new Error(\"Unable to reconnect to server.\"));\r\n        // Unblock backpressure if any\r\n        for (const element of this._messages) {\r\n            element._rejector(error);\r\n        }\r\n    }\r\n    _isInvocationMessage(message) {\r\n        // There is no way to check if something implements an interface.\r\n        // So we individually check the messages in a switch statement.\r\n        // To make sure we don't miss any message types we rely on the compiler\r\n        // seeing the function returns a value and it will do the\r\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n            case MessageType.StreamInvocation:\r\n            case MessageType.CancelInvocation:\r\n                return true;\r\n            case MessageType.Close:\r\n            case MessageType.Sequence:\r\n            case MessageType.Ping:\r\n            case MessageType.Ack:\r\n                return false;\r\n        }\r\n    }\r\n    _ackTimer() {\r\n        if (this._ackTimerHandle === undefined) {\r\n            this._ackTimerHandle = setTimeout(async () => {\r\n                try {\r\n                    if (!this._reconnectInProgress) {\r\n                        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Ack, sequenceId: this._latestReceivedSequenceId }));\r\n                    }\r\n                    // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\r\n                }\r\n                catch { }\r\n                clearTimeout(this._ackTimerHandle);\r\n                this._ackTimerHandle = undefined;\r\n                // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\nclass BufferedItem {\r\n    constructor(message, id, resolver, rejector) {\r\n        this._message = message;\r\n        this._id = id;\r\n        this._resolver = resolver;\r\n        this._rejector = rejector;\r\n    }\r\n}\r\n//# sourceMappingURL=MessageBuffer.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    constructor(innerClient, accessTokenFactory) {\r\n        super();\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n    async send(request) {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n    _setAuthorizationHeader(request) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`;\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n    getCookieString(url) {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=AccessTokenHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    constructor(httpClient, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url, deleteOptions);\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessToken, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        let token;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* ConnectionState.Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    }\r\n                    catch {\r\n                        callStop = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.transport.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const negotiateUrl = new URL(url);\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        }\r\n        else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        }\r\n        else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n        negotiateUrl.search = searchParams.toString();\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 2;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _isAckMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n    _isSequenceMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withServerTimeout(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withKeepAliveInterval(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withStatefulReconnect(options) {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n        this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","import { HubConnectionBuilder, HubConnection, LogLevel } from '@microsoft/signalr';\r\nimport { Patch } from './types';\r\nimport { ArrayOperation } from './hooks';\r\n\r\n/**\r\n * Manages SignalR connection to the Minimact server hub\r\n */\r\nexport class SignalRManager {\r\n  private connection: HubConnection;\r\n  private reconnectInterval: number;\r\n  private debugLogging: boolean;\r\n  private eventHandlers: Map<string, Set<Function>>;\r\n\r\n  constructor(hubUrl: string = '/minimact', options: { reconnectInterval?: number; debugLogging?: boolean } = {}) {\r\n    this.reconnectInterval = options.reconnectInterval || 5000;\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.eventHandlers = new Map();\r\n\r\n    this.connection = new HubConnectionBuilder()\r\n      .withUrl(hubUrl)\r\n      .withAutomaticReconnect({\r\n        nextRetryDelayInMilliseconds: () => this.reconnectInterval\r\n      })\r\n      .configureLogging(this.debugLogging ? LogLevel.Debug : LogLevel.Warning)\r\n      .build();\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup SignalR event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle component updates from server\r\n    this.connection.on('UpdateComponent', (componentId: string, html: string) => {\r\n      this.log('UpdateComponent', { componentId, html });\r\n      this.emit('updateComponent', { componentId, html });\r\n    });\r\n\r\n    // Handle patch updates from server\r\n    this.connection.on('ApplyPatches', (componentId: string, patches: Patch[]) => {\r\n      this.log('ApplyPatches', { componentId, patches });\r\n      this.emit('applyPatches', { componentId, patches });\r\n    });\r\n\r\n    // Handle predicted patches (sent immediately for instant feedback)\r\n    this.connection.on('ApplyPrediction', (data: { componentId: string, patches: Patch[], confidence: number }) => {\r\n      this.log(`ApplyPrediction (${(data.confidence * 100).toFixed(0)}% confident)`, { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyPrediction', { componentId: data.componentId, patches: data.patches, confidence: data.confidence });\r\n    });\r\n\r\n    // Handle correction if prediction was wrong\r\n    this.connection.on('ApplyCorrection', (data: { componentId: string, patches: Patch[] }) => {\r\n      this.log('ApplyCorrection (prediction was incorrect)', { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyCorrection', { componentId: data.componentId, patches: data.patches });\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.connection.on('QueueHint', (data: {\r\n      componentId: string,\r\n      hintId: string,\r\n      patches: Patch[],\r\n      confidence: number,\r\n      predictedState: Record<string, any>\r\n    }) => {\r\n      this.log(`QueueHint '${data.hintId}' (${(data.confidence * 100).toFixed(0)}% confident)`, {\r\n        componentId: data.componentId,\r\n        patches: data.patches\r\n      });\r\n      this.emit('queueHint', data);\r\n    });\r\n\r\n    // Handle errors from server\r\n    this.connection.on('Error', (message: string) => {\r\n      console.error('[Minimact] Server error:', message);\r\n      this.emit('error', { message });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.connection.onreconnecting((error) => {\r\n      this.log('Reconnecting...', error);\r\n      this.emit('reconnecting', { error });\r\n    });\r\n\r\n    this.connection.onreconnected((connectionId) => {\r\n      this.log('Reconnected', { connectionId });\r\n      this.emit('reconnected', { connectionId });\r\n    });\r\n\r\n    this.connection.onclose((error) => {\r\n      this.log('Connection closed', error);\r\n      this.emit('closed', { error });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the SignalR connection\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      await this.connection.start();\r\n      this.log('Connected to Minimact hub');\r\n      this.emit('connected', { connectionId: this.connection.connectionId });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to connect:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the SignalR connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    await this.connection.stop();\r\n    this.log('Disconnected from Minimact hub');\r\n  }\r\n\r\n  /**\r\n   * Register a component with the server\r\n   */\r\n  async registerComponent(componentId: string): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('RegisterComponent', componentId);\r\n      this.log('Registered component', { componentId });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to register component:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke a component method on the server\r\n   */\r\n  async invokeComponentMethod(componentId: string, methodName: string, args: any = {}): Promise<void> {\r\n    try {\r\n      const argsJson = JSON.stringify(args);\r\n      await this.connection.invoke('InvokeComponentMethod', componentId, methodName, argsJson);\r\n      this.log('Invoked method', { componentId, methodName, args });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to invoke method:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update client state on the server (single key-value)\r\n   */\r\n  async updateClientState(componentId: string, key: string, value: any): Promise<void> {\r\n    try {\r\n      const valueJson = JSON.stringify(value);\r\n      await this.connection.invoke('UpdateClientState', componentId, key, valueJson);\r\n      this.log('Updated client state', { componentId, key, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client state:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update multiple client-computed state values on the server\r\n   * Used for external library computations (lodash, moment, etc.)\r\n   */\r\n  async updateClientComputedState(componentId: string, computedValues: Record<string, any>): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateClientComputedState', componentId, computedValues);\r\n      this.log('Updated client-computed state', { componentId, computedValues });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client-computed state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state on the server (from useState hook)\r\n   * This keeps server state in sync with client state changes\r\n   */\r\n  async updateComponentState(componentId: string, stateKey: string, value: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentState', componentId, stateKey, value);\r\n      this.log('Updated component state', { componentId, stateKey, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update DOM element state on the server (from useDomElementState hook)\r\n   * This keeps server aware of DOM changes for accurate rendering\r\n   */\r\n  async updateDomElementState(componentId: string, stateKey: string, snapshot: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateDomElementState', componentId, stateKey, snapshot);\r\n      this.log('Updated DOM element state', { componentId, stateKey, snapshot });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update DOM element state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state with array operation metadata\r\n   * This provides semantic intent for array mutations, enabling precise template extraction\r\n   */\r\n  async updateComponentStateWithOperation(\r\n    componentId: string,\r\n    stateKey: string,\r\n    newValue: any,\r\n    operation: ArrayOperation\r\n  ): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentStateWithOperation', componentId, stateKey, newValue, operation);\r\n      this.log('Updated component state with operation', { componentId, stateKey, operation, newValue });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state with operation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update query results on the server (from useDomQuery hook)\r\n   * This keeps server aware of query results for accurate rendering\r\n   */\r\n  async updateQueryResults(componentId: string, queryKey: string, results: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateQueryResults', componentId, queryKey, results);\r\n      this.log('Updated query results', { componentId, queryKey, resultCount: results.length });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update query results:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic invoke method for calling server hub methods\r\n   */\r\n  async invoke(methodName: string, ...args: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke(methodName, ...args);\r\n      this.log(`Invoked ${methodName}`, { args });\r\n    } catch (error) {\r\n      console.error(`[Minimact] Failed to invoke ${methodName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from events\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit event to subscribers\r\n   */\r\n  private emit(event: string, data: any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact SignalR] ${message}`, data || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection state\r\n   */\r\n  get state(): signalR.HubConnectionState {\r\n    return this.connection.state;\r\n  }\r\n\r\n  /**\r\n   * Get connection ID\r\n   */\r\n  get connectionId(): string | null {\r\n    return this.connection.connectionId;\r\n  }\r\n}\r\n","import { Patch, VNode, VElement, VText } from './types';\r\n\r\n/**\r\n * Applies DOM patches from the server to the actual DOM\r\n * Handles surgical updates for minimal DOM manipulation\r\n */\r\nexport class DOMPatcher {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Apply an array of patches to a root element\r\n   */\r\n  applyPatches(rootElement: HTMLElement, patches: Patch[]): void {\r\n    this.log('Applying patches', { count: patches.length, patches });\r\n\r\n    for (const patch of patches) {\r\n      try {\r\n        this.applyPatch(rootElement, patch);\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to apply patch:', patch, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a single patch to the DOM\r\n   */\r\n  private applyPatch(rootElement: HTMLElement, patch: Patch): void {\r\n    const targetElement = this.getElementByPath(rootElement, patch.path);\r\n\r\n    if (!targetElement && patch.type !== 'Create') {\r\n      console.warn('[Minimact] Target element not found for patch:', patch);\r\n      return;\r\n    }\r\n\r\n    switch (patch.type) {\r\n      case 'Create':\r\n        this.patchCreate(rootElement, patch.path, patch.node);\r\n        break;\r\n      case 'Remove':\r\n        this.patchRemove(targetElement!);\r\n        break;\r\n      case 'Replace':\r\n        this.patchReplace(targetElement!, patch.node);\r\n        break;\r\n      case 'UpdateText':\r\n        this.patchUpdateText(targetElement!, patch.content);\r\n        break;\r\n      case 'UpdateProps':\r\n        this.patchUpdateProps(targetElement as HTMLElement, patch.props);\r\n        break;\r\n      case 'ReorderChildren':\r\n        this.patchReorderChildren(targetElement as HTMLElement, patch.order);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and insert a new node\r\n   */\r\n  private patchCreate(rootElement: HTMLElement, path: number[], node: VNode): void {\r\n    const newElement = this.createElementFromVNode(node);\r\n\r\n    if (path.length === 0) {\r\n      // Replace root\r\n      rootElement.innerHTML = '';\r\n      rootElement.appendChild(newElement);\r\n    } else {\r\n      // Insert at path\r\n      const parentPath = path.slice(0, -1);\r\n      const index = path[path.length - 1];\r\n      const parent = this.getElementByPath(rootElement, parentPath) as HTMLElement;\r\n\r\n      if (parent) {\r\n        if (index >= parent.childNodes.length) {\r\n          parent.appendChild(newElement);\r\n        } else {\r\n          parent.insertBefore(newElement, parent.childNodes[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Created node', { path, node });\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the DOM\r\n   */\r\n  private patchRemove(element: Node): void {\r\n    if (element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n      this.log('Removed node', { element });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace a node with a new one\r\n   */\r\n  private patchReplace(oldElement: Node, newNode: VNode): void {\r\n    const newElement = this.createElementFromVNode(newNode);\r\n\r\n    if (oldElement.parentNode) {\r\n      oldElement.parentNode.replaceChild(newElement, oldElement);\r\n      this.log('Replaced node', { oldElement, newNode });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update text content of a text node\r\n   */\r\n  private patchUpdateText(element: Node, content: string): void {\r\n    if (element.nodeType === Node.TEXT_NODE) {\r\n      element.textContent = content;\r\n    } else {\r\n      // If it's an element, update its text content\r\n      element.textContent = content;\r\n    }\r\n    this.log('Updated text', { element, content });\r\n  }\r\n\r\n  /**\r\n   * Update element properties/attributes\r\n   */\r\n  private patchUpdateProps(element: HTMLElement, props: Record<string, string>): void {\r\n    // Remove old attributes not in new props\r\n    const oldAttrs = Array.from(element.attributes);\r\n    for (const attr of oldAttrs) {\r\n      if (!(attr.name in props) && !attr.name.startsWith('data-minimact-')) {\r\n        element.removeAttribute(attr.name);\r\n      }\r\n    }\r\n\r\n    // Set new attributes\r\n    for (const [key, value] of Object.entries(props)) {\r\n      if (key === 'style') {\r\n        element.setAttribute('style', value);\r\n      } else if (key === 'class' || key === 'className') {\r\n        element.className = value;\r\n      } else if (key.startsWith('on')) {\r\n        // Event handlers are managed separately\r\n        continue;\r\n      } else {\r\n        element.setAttribute(key, value);\r\n      }\r\n    }\r\n\r\n    this.log('Updated props', { element, props });\r\n  }\r\n\r\n  /**\r\n   * Reorder children based on keys\r\n   */\r\n  private patchReorderChildren(element: HTMLElement, order: string[]): void {\r\n    const keyedChildren = new Map<string, Node>();\r\n\r\n    // Build map of keyed children\r\n    for (const child of Array.from(element.childNodes)) {\r\n      if (child instanceof HTMLElement) {\r\n        const key = child.getAttribute('data-key') || child.getAttribute('key');\r\n        if (key) {\r\n          keyedChildren.set(key, child);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reorder based on order array\r\n    for (let i = 0; i < order.length; i++) {\r\n      const key = order[i];\r\n      const child = keyedChildren.get(key);\r\n\r\n      if (child) {\r\n        const currentChild = element.childNodes[i];\r\n        if (currentChild !== child) {\r\n          element.insertBefore(child, currentChild);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Reordered children', { element, order });\r\n  }\r\n\r\n  /**\r\n   * Get a DOM element by its path (array of indices)\r\n   */\r\n  private getElementByPath(rootElement: HTMLElement, path: number[]): Node | null {\r\n    let current: Node = rootElement;\r\n\r\n    for (const index of path) {\r\n      if (index >= current.childNodes.length) {\r\n        return null;\r\n      }\r\n      current = current.childNodes[index];\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Create a DOM element from a VNode\r\n   */\r\n  private createElementFromVNode(vnode: VNode): Node {\r\n    switch (vnode.type) {\r\n      case 'Text':\r\n        return document.createTextNode((vnode as VText).content);\r\n\r\n      case 'Element': {\r\n        const velem = vnode as VElement;\r\n        const element = document.createElement(velem.tag);\r\n\r\n        // Set attributes\r\n        for (const [key, value] of Object.entries(velem.props || {})) {\r\n          if (key === 'className' || key === 'class') {\r\n            element.className = value;\r\n          } else if (key.startsWith('on')) {\r\n            // Event handlers will be attached by event delegation\r\n            element.setAttribute(`data-${key.toLowerCase()}`, value);\r\n          } else {\r\n            element.setAttribute(key, value);\r\n          }\r\n        }\r\n\r\n        // Set key if present\r\n        if (velem.key) {\r\n          element.setAttribute('data-key', velem.key);\r\n        }\r\n\r\n        // Create children\r\n        for (const child of velem.children || []) {\r\n          element.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return element;\r\n      }\r\n\r\n      case 'Fragment': {\r\n        const fragment = document.createDocumentFragment();\r\n        const vfrag = vnode as any;\r\n\r\n        for (const child of vfrag.children || []) {\r\n          fragment.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return fragment;\r\n      }\r\n\r\n      case 'RawHtml': {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = (vnode as any).html;\r\n        return div;\r\n      }\r\n\r\n      default:\r\n        console.warn('[Minimact] Unknown VNode type:', vnode);\r\n        return document.createTextNode('');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace entire HTML (fallback when patches aren't available)\r\n   */\r\n  replaceHTML(rootElement: HTMLElement, html: string): void {\r\n    rootElement.innerHTML = html;\r\n    this.log('Replaced entire HTML', { html });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact DOMPatcher] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { ComponentState } from './types';\r\n\r\n/**\r\n * Manages client-side state (useClientState) with reactive updates\r\n * Handles local state that doesn't require server round-trips\r\n */\r\nexport class ClientStateManager {\r\n  private states: Map<string, ComponentState>;\r\n  private subscribers: Map<string, Map<string, Set<Function>>>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.states = new Map();\r\n    this.subscribers = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Initialize client state for a component\r\n   */\r\n  initializeComponent(componentId: string, initialState: ComponentState = {}): void {\r\n    this.states.set(componentId, { ...initialState });\r\n    this.subscribers.set(componentId, new Map());\r\n    this.log('Initialized component state', { componentId, initialState });\r\n  }\r\n\r\n  /**\r\n   * Get client state value\r\n   */\r\n  getState(componentId: string, key: string): any {\r\n    const componentState = this.states.get(componentId);\r\n    return componentState ? componentState[key] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Set client state value and trigger updates\r\n   */\r\n  setState(componentId: string, key: string, value: any): void {\r\n    const componentState = this.states.get(componentId);\r\n\r\n    if (!componentState) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return;\r\n    }\r\n\r\n    // Update state\r\n    const oldValue = componentState[key];\r\n    componentState[key] = value;\r\n\r\n    this.log('State updated', { componentId, key, oldValue, newValue: value });\r\n\r\n    // Notify subscribers\r\n    this.notifySubscribers(componentId, key, value, oldValue);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to state changes\r\n   */\r\n  subscribe(componentId: string, key: string, callback: (value: any, oldValue: any) => void): () => void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return () => {};\r\n    }\r\n\r\n    if (!componentSubscribers.has(key)) {\r\n      componentSubscribers.set(key, new Set());\r\n    }\r\n\r\n    componentSubscribers.get(key)!.add(callback);\r\n    this.log('Subscribed to state', { componentId, key });\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      componentSubscribers.get(key)?.delete(callback);\r\n      this.log('Unsubscribed from state', { componentId, key });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notify all subscribers of a state change\r\n   */\r\n  private notifySubscribers(componentId: string, key: string, value: any, oldValue: any): void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      return;\r\n    }\r\n\r\n    const keySubscribers = componentSubscribers.get(key);\r\n\r\n    if (keySubscribers) {\r\n      keySubscribers.forEach(callback => {\r\n        try {\r\n          callback(value, oldValue);\r\n        } catch (error) {\r\n          console.error('[Minimact] Error in state subscriber:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all state for a component\r\n   */\r\n  getComponentState(componentId: string): ComponentState | undefined {\r\n    return this.states.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update multiple state values at once\r\n   */\r\n  updateState(componentId: string, updates: ComponentState): void {\r\n    for (const [key, value] of Object.entries(updates)) {\r\n      this.setState(componentId, key, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear state for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    this.states.delete(componentId);\r\n    this.subscribers.delete(componentId);\r\n    this.log('Cleared component state', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Bind state to a DOM element's value/content\r\n   */\r\n  bindToElement(\r\n    componentId: string,\r\n    key: string,\r\n    element: HTMLElement,\r\n    property: 'value' | 'textContent' | 'innerHTML' = 'textContent'\r\n  ): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      this.updateElement(element, property, initialValue);\r\n    }\r\n\r\n    // Subscribe to changes\r\n    return this.subscribe(componentId, key, (value) => {\r\n      this.updateElement(element, property, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a DOM element based on property type\r\n   */\r\n  private updateElement(element: HTMLElement, property: string, value: any): void {\r\n    switch (property) {\r\n      case 'value':\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          element.value = String(value);\r\n        }\r\n        break;\r\n      case 'textContent':\r\n        element.textContent = String(value);\r\n        break;\r\n      case 'innerHTML':\r\n        element.innerHTML = String(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind input element to state (two-way binding)\r\n   */\r\n  bindInput(componentId: string, key: string, input: HTMLInputElement | HTMLTextAreaElement): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      input.value = String(initialValue);\r\n    }\r\n\r\n    // Listen to input changes\r\n    const inputHandler = (e: Event) => {\r\n      const target = e.target as HTMLInputElement | HTMLTextAreaElement;\r\n      this.setState(componentId, key, target.value);\r\n    };\r\n\r\n    input.addEventListener('input', inputHandler);\r\n\r\n    // Subscribe to state changes from other sources\r\n    const unsubscribe = this.subscribe(componentId, key, (value) => {\r\n      if (input.value !== String(value)) {\r\n        input.value = String(value);\r\n      }\r\n    });\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      input.removeEventListener('input', inputHandler);\r\n      unsubscribe();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact ClientState] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import type { HintQueue } from './hint-queue';\r\nimport type { DOMPatcher } from './dom-patcher';\r\nimport type { PlaygroundBridge } from './playground-bridge';\r\n\r\n/**\r\n * Event delegation system for handling component events\r\n * Uses a single root listener for performance\r\n */\r\nexport class EventDelegation {\r\n  private rootElement: HTMLElement;\r\n  private componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>;\r\n  private debugLogging: boolean;\r\n  private eventListeners: Map<string, EventListener>;\r\n  private hintQueue?: HintQueue;\r\n  private domPatcher?: DOMPatcher;\r\n  private playgroundBridge?: PlaygroundBridge;\r\n\r\n  constructor(\r\n    rootElement: HTMLElement,\r\n    componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>,\r\n    options: {\r\n      debugLogging?: boolean;\r\n      hintQueue?: HintQueue;\r\n      domPatcher?: DOMPatcher;\r\n      playgroundBridge?: PlaygroundBridge;\r\n    } = {}\r\n  ) {\r\n    this.rootElement = rootElement;\r\n    this.componentMethodInvoker = componentMethodInvoker;\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.hintQueue = options.hintQueue;\r\n    this.domPatcher = options.domPatcher;\r\n    this.playgroundBridge = options.playgroundBridge;\r\n    this.eventListeners = new Map();\r\n\r\n    this.setupEventDelegation();\r\n  }\r\n\r\n  /**\r\n   * Setup event delegation for common events\r\n   */\r\n  private setupEventDelegation(): void {\r\n    const eventTypes = [\r\n      'click',\r\n      'dblclick',\r\n      'input',\r\n      'change',\r\n      'submit',\r\n      'focus',\r\n      'blur',\r\n      'keydown',\r\n      'keyup',\r\n      'keypress',\r\n      'mouseenter',\r\n      'mouseleave',\r\n      'mouseover',\r\n      'mouseout'\r\n    ];\r\n\r\n    for (const eventType of eventTypes) {\r\n      const listener = this.createEventListener(eventType);\r\n      this.eventListeners.set(eventType, listener);\r\n      this.rootElement.addEventListener(eventType, listener, true); // Use capture phase\r\n    }\r\n\r\n    this.log('Event delegation setup complete', { eventTypes });\r\n  }\r\n\r\n  /**\r\n   * Create an event listener for a specific event type\r\n   */\r\n  private createEventListener(eventType: string): EventListener {\r\n    return async (event: Event) => {\r\n      const target = event.target as HTMLElement;\r\n\r\n      // Find the nearest element with an event handler\r\n      const handlerElement = this.findHandlerElement(target, eventType);\r\n\r\n      if (!handlerElement) {\r\n        return;\r\n      }\r\n\r\n      // Get handler information\r\n      const handler = this.getEventHandler(handlerElement, eventType);\r\n\r\n      if (!handler) {\r\n        return;\r\n      }\r\n\r\n      // Prevent default for submit events\r\n      if (eventType === 'submit') {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.log('Event triggered', { eventType, handler, target });\r\n\r\n      // Execute handler\r\n      await this.executeHandler(handler, event, handlerElement);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the nearest element with an event handler attribute\r\n   */\r\n  private findHandlerElement(element: HTMLElement | null, eventType: string): HTMLElement | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const attrName = `data-on${eventType}`;\r\n      const legacyAttrName = `on${eventType}`;\r\n\r\n      if (current.hasAttribute(attrName) || current.hasAttribute(legacyAttrName)) {\r\n        return current;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get event handler information from element\r\n   */\r\n  private getEventHandler(element: HTMLElement, eventType: string): EventHandler | null {\r\n    const attrName = `data-on${eventType}`;\r\n    const legacyAttrName = `on${eventType}`;\r\n\r\n    const handlerStr = element.getAttribute(attrName) || element.getAttribute(legacyAttrName);\r\n\r\n    if (!handlerStr) {\r\n      return null;\r\n    }\r\n\r\n    // Parse handler string\r\n    // Format: \"MethodName\" or \"MethodName:arg1:arg2\"\r\n    const parts = handlerStr.split(':');\r\n    const methodName = parts[0];\r\n    const args = parts.slice(1);\r\n\r\n    // Find component ID\r\n    const componentId = this.findComponentId(element);\r\n\r\n    if (!componentId) {\r\n      console.warn('[Minimact] No component ID found for event handler:', handlerStr);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      componentId,\r\n      methodName,\r\n      args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the component ID for an element\r\n   */\r\n  private findComponentId(element: HTMLElement | null): string | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const componentId = current.getAttribute('data-minimact-component-id');\r\n      if (componentId) {\r\n        return componentId;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    // Check root element\r\n    const rootComponentId = this.rootElement.getAttribute('data-minimact-component-id');\r\n    return rootComponentId;\r\n  }\r\n\r\n  /**\r\n   * Execute an event handler\r\n   */\r\n  private async executeHandler(handler: EventHandler, event: Event, element: HTMLElement): Promise<void> {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      // Build args object\r\n      const argsObj: any = {};\r\n\r\n      // Add parsed args from handler string\r\n      if (handler.args.length > 0) {\r\n        argsObj.args = handler.args;\r\n      }\r\n\r\n      // Add event data\r\n      if (event instanceof MouseEvent) {\r\n        argsObj.mouse = {\r\n          clientX: event.clientX,\r\n          clientY: event.clientY,\r\n          button: event.button\r\n        };\r\n      }\r\n\r\n      if (event instanceof KeyboardEvent) {\r\n        argsObj.keyboard = {\r\n          key: event.key,\r\n          code: event.code,\r\n          ctrlKey: event.ctrlKey,\r\n          shiftKey: event.shiftKey,\r\n          altKey: event.altKey\r\n        };\r\n      }\r\n\r\n      // Add target value for input events\r\n      if (event.type === 'input' || event.type === 'change') {\r\n        const target = event.target as HTMLInputElement;\r\n        argsObj.value = target.value;\r\n      }\r\n\r\n      // Check hint queue for cached prediction (CACHE HIT!)\r\n      if (this.hintQueue && this.domPatcher) {\r\n        // Build hint ID based on method name (simplified - in production would be more sophisticated)\r\n        const hintId = `${handler.methodName}`;\r\n\r\n        // Try to match hint based on the method being called\r\n        // This is a simplified version - in reality we'd need to know the state change\r\n        const matchedHint = this.tryMatchHint(handler.componentId, handler.methodName);\r\n\r\n        if (matchedHint) {\r\n          // 🟢 CACHE HIT! Apply patches instantly\r\n          const componentElement = this.findComponentElement(handler.componentId);\r\n          if (componentElement) {\r\n            this.domPatcher.applyPatches(componentElement, matchedHint.patches as any[]);\r\n\r\n            const latency = performance.now() - startTime;\r\n\r\n            // Notify playground of cache hit\r\n            if (this.playgroundBridge) {\r\n              this.playgroundBridge.cacheHit({\r\n                componentId: handler.componentId,\r\n                hintId: matchedHint.hintId,\r\n                latency,\r\n                confidence: matchedHint.confidence,\r\n                patchCount: matchedHint.patches.length\r\n              });\r\n            }\r\n\r\n            this.log(`🟢 CACHE HIT! Applied ${matchedHint.patches.length} patches in ${latency.toFixed(2)}ms`, {\r\n              handler,\r\n              confidence: (matchedHint.confidence * 100).toFixed(0) + '%'\r\n            });\r\n\r\n            // Still notify server in background for verification\r\n            this.componentMethodInvoker(handler.componentId, handler.methodName, argsObj).catch(err => {\r\n              console.error('[Minimact] Background server notification failed:', err);\r\n            });\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 🔴 CACHE MISS - No prediction found, send to server\r\n      await this.componentMethodInvoker(handler.componentId, handler.methodName, argsObj);\r\n\r\n      const latency = performance.now() - startTime;\r\n\r\n      // Notify playground of cache miss\r\n      if (this.playgroundBridge) {\r\n        this.playgroundBridge.cacheMiss({\r\n          componentId: handler.componentId,\r\n          methodName: handler.methodName,\r\n          latency,\r\n          patchCount: 0 // We don't know patch count in this flow\r\n        });\r\n      }\r\n\r\n      this.log(`🔴 CACHE MISS - Server latency: ${latency.toFixed(2)}ms`, { handler, argsObj });\r\n    } catch (error) {\r\n      console.error('[Minimact] Error executing handler:', handler, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to match a hint in the queue for this method invocation\r\n   * Simplified version - checks if there's a hint matching the method name\r\n   */\r\n  private tryMatchHint(componentId: string, methodName: string): { hintId: string; patches: any[]; confidence: number } | null {\r\n    if (!this.hintQueue) return null;\r\n\r\n    // In a real implementation, we'd need to build the predicted state change\r\n    // For now, we'll use a simplified heuristic based on method name\r\n    // The server sends hints with IDs like \"count_1\" for count going to 1\r\n\r\n    // Try to match by checking all hints for this component\r\n    // This is a placeholder - the actual matching logic would be more sophisticated\r\n    return null; // TODO: Implement proper hint matching\r\n  }\r\n\r\n  /**\r\n   * Find the component element by component ID\r\n   */\r\n  private findComponentElement(componentId: string): HTMLElement | null {\r\n    const element = this.rootElement.querySelector(`[data-minimact-component-id=\"${componentId}\"]`);\r\n    return element as HTMLElement;\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  destroy(): void {\r\n    for (const [eventType, listener] of this.eventListeners.entries()) {\r\n      this.rootElement.removeEventListener(eventType, listener, true);\r\n    }\r\n    this.eventListeners.clear();\r\n    this.log('Event delegation destroyed');\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact EventDelegation] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\ninterface EventHandler {\r\n  componentId: string;\r\n  methodName: string;\r\n  args: string[];\r\n}\r\n","import { ComponentMetadata } from './types';\r\nimport { ClientStateManager } from './client-state';\r\n\r\n/**\r\n * Handles hydration of server-rendered HTML with client interactivity\r\n * Identifies and manages client zones, server zones, and hybrid zones\r\n */\r\nexport class HydrationManager {\r\n  private clientState: ClientStateManager;\r\n  private components: Map<string, ComponentMetadata>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(clientState: ClientStateManager, options: { debugLogging?: boolean } = {}) {\r\n    this.clientState = clientState;\r\n    this.components = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Hydrate a component root element\r\n   */\r\n  hydrateComponent(componentId: string, rootElement: HTMLElement): void {\r\n    this.log('Hydrating component', { componentId });\r\n\r\n    // The actual component element is the first child of the container\r\n    // (rootElement is #minimact-root, first child is the actual component div)\r\n    const componentElement = rootElement.firstElementChild as HTMLElement;\r\n    if (!componentElement) {\r\n      console.error('[Minimact Hydration] No component element found in root');\r\n      return;\r\n    }\r\n\r\n    // Create component metadata\r\n    const metadata: ComponentMetadata = {\r\n      componentId,\r\n      element: componentElement,  // Use the actual component element, not the container\r\n      clientState: {},\r\n      serverState: {}\r\n    };\r\n\r\n    this.components.set(componentId, metadata);\r\n\r\n    // Set component ID on root element\r\n    rootElement.setAttribute('data-minimact-component-id', componentId);\r\n\r\n    // Initialize client state\r\n    this.clientState.initializeComponent(componentId);\r\n\r\n    // Find and hydrate client zones\r\n    this.hydrateClientZones(componentId, rootElement);\r\n\r\n    // Find and bind state to elements\r\n    this.bindStateElements(componentId, rootElement);\r\n\r\n    this.log('Component hydrated', { componentId, metadata });\r\n  }\r\n\r\n  /**\r\n   * Hydrate client-only zones (data-minimact-client-scope)\r\n   */\r\n  private hydrateClientZones(componentId: string, rootElement: HTMLElement): void {\r\n    const clientZones = rootElement.querySelectorAll('[data-minimact-client-scope]');\r\n\r\n    this.log('Found client zones', { count: clientZones.length });\r\n\r\n    clientZones.forEach((zone) => {\r\n      const element = zone as HTMLElement;\r\n\r\n      // Get state name if specified\r\n      const stateName = element.getAttribute('data-state');\r\n\r\n      if (stateName) {\r\n        // Initialize state from element\r\n        const initialValue = this.getInitialValue(element);\r\n        this.clientState.setState(componentId, stateName, initialValue);\r\n\r\n        // Bind element to state\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          this.clientState.bindInput(componentId, stateName, element);\r\n        }\r\n\r\n        this.log('Hydrated client zone', { element, stateName, initialValue });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Bind elements with data-bind attribute to state\r\n   */\r\n  private bindStateElements(componentId: string, rootElement: HTMLElement): void {\r\n    const boundElements = rootElement.querySelectorAll('[data-bind]');\r\n\r\n    this.log('Found bound elements', { count: boundElements.length });\r\n\r\n    boundElements.forEach((elem) => {\r\n      const element = elem as HTMLElement;\r\n      const bindKey = element.getAttribute('data-bind');\r\n\r\n      if (!bindKey) {\r\n        return;\r\n      }\r\n\r\n      // Determine binding type\r\n      const isClientScope = this.isInClientScope(element);\r\n      const bindProperty = this.determineBindProperty(element);\r\n\r\n      if (isClientScope) {\r\n        // Client-side binding\r\n        this.clientState.bindToElement(componentId, bindKey, element, bindProperty);\r\n        this.log('Bound to client state', { element, bindKey, bindProperty });\r\n      } else {\r\n        // Server-side binding - will be updated via patches\r\n        this.log('Server-bound element (patch-controlled)', { element, bindKey });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if an element is within a client scope\r\n   */\r\n  private isInClientScope(element: HTMLElement): boolean {\r\n    let current: HTMLElement | null = element;\r\n\r\n    while (current) {\r\n      if (current.hasAttribute('data-minimact-client-scope')) {\r\n        return true;\r\n      }\r\n      if (current.hasAttribute('data-minimact-server-scope')) {\r\n        return false;\r\n      }\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determine which property to bind (value, textContent, innerHTML)\r\n   */\r\n  private determineBindProperty(element: HTMLElement): 'value' | 'textContent' | 'innerHTML' {\r\n    if (element instanceof HTMLInputElement ||\r\n        element instanceof HTMLTextAreaElement ||\r\n        element instanceof HTMLSelectElement) {\r\n      return 'value';\r\n    }\r\n\r\n    if (element.hasAttribute('data-bind-html')) {\r\n      return 'innerHTML';\r\n    }\r\n\r\n    return 'textContent';\r\n  }\r\n\r\n  /**\r\n   * Get initial value from an element\r\n   */\r\n  private getInitialValue(element: HTMLElement): any {\r\n    if (element instanceof HTMLInputElement) {\r\n      if (element.type === 'checkbox') {\r\n        return element.checked;\r\n      } else if (element.type === 'number') {\r\n        return element.valueAsNumber || 0;\r\n      } else {\r\n        return element.value;\r\n      }\r\n    }\r\n\r\n    if (element instanceof HTMLTextAreaElement) {\r\n      return element.value;\r\n    }\r\n\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element.value;\r\n    }\r\n\r\n    return element.textContent || '';\r\n  }\r\n\r\n  /**\r\n   * Dehydrate (cleanup) a component\r\n   */\r\n  dehydrateComponent(componentId: string): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (!metadata) {\r\n      return;\r\n    }\r\n\r\n    // Clear client state\r\n    this.clientState.clearComponent(componentId);\r\n\r\n    // Remove from registry\r\n    this.components.delete(componentId);\r\n\r\n    this.log('Component dehydrated', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Get component metadata\r\n   */\r\n  getComponent(componentId: string): ComponentMetadata | undefined {\r\n    return this.components.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update server state for a component\r\n   */\r\n  updateServerState(componentId: string, key: string, value: any): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (metadata) {\r\n      metadata.serverState[key] = value;\r\n      this.log('Updated server state', { componentId, key, value });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hydrate all components on the page\r\n   */\r\n  hydrateAll(): void {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    this.log('Hydrating all components', { count: components.length });\r\n\r\n    components.forEach((element) => {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        this.hydrateComponent(componentId, element as HTMLElement);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact Hydration] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { TemplatePatch, Patch, LoopTemplate, ItemTemplate, VNode, VElement, VText, Binding } from './types';\r\n\r\n/**\r\n * Template Renderer\r\n *\r\n * Renders template patches with parameter values for runtime predictions.\r\n * Enables 98% memory reduction by storing patterns instead of concrete values.\r\n *\r\n * Example:\r\n *   template: \"Count: {0}\"\r\n *   params: [42]\r\n *   result: \"Count: 42\"\r\n */\r\nexport class TemplateRenderer {\r\n  /**\r\n   * Render a template string with parameters\r\n   *\r\n   * @param template - Template string with {0}, {1}, etc. placeholders\r\n   * @param params - Parameter values to substitute\r\n   * @returns Rendered string with parameters substituted\r\n   *\r\n   * @example\r\n   * renderTemplate(\"Count: {0}\", [42]) → \"Count: 42\"\r\n   * renderTemplate(\"Hello, {0} {1}!\", [\"John\", \"Doe\"]) → \"Hello, John Doe!\"\r\n   */\r\n  static renderTemplate(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace each placeholder {0}, {1}, etc. with corresponding parameter\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = this.formatValue(param);\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render a template patch with current state values\r\n   *\r\n   * @param templatePatch - Template patch data\r\n   * @param stateValues - Current state values (key-value pairs)\r\n   * @returns Rendered string\r\n   *\r\n   * @example\r\n   * const tp = { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] };\r\n   * renderTemplatePatch(tp, { count: 42 }) → \"Count: 42\"\r\n   *\r\n   * @example Conditional\r\n   * const tp = {\r\n   *   template: \"{0}\",\r\n   *   bindings: [\"isActive\"],\r\n   *   conditionalTemplates: { \"true\": \"Active\", \"false\": \"Inactive\" },\r\n   *   conditionalBindingIndex: 0\r\n   * };\r\n   * renderTemplatePatch(tp, { isActive: true }) → \"Active\"\r\n   */\r\n  static renderTemplatePatch(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string {\r\n    // Check for conditional templates\r\n    if (templatePatch.conditionalTemplates && templatePatch.conditionalBindingIndex !== undefined) {\r\n      const bindingIndex = templatePatch.conditionalBindingIndex;\r\n      const conditionBinding = templatePatch.bindings[bindingIndex];\r\n\r\n      // Get condition value (handle both string and Binding object)\r\n      const conditionKey = typeof conditionBinding === 'object' && 'stateKey' in conditionBinding\r\n        ? conditionBinding.stateKey\r\n        : conditionBinding as string;\r\n      const conditionValue = stateValues[conditionKey];\r\n\r\n      // Lookup the template for this condition value\r\n      const conditionalTemplate = templatePatch.conditionalTemplates[String(conditionValue)];\r\n\r\n      if (conditionalTemplate !== undefined) {\r\n        // If it's a simple conditional (just maps to string), return it\r\n        if (!conditionalTemplate.includes('{')) {\r\n          return conditionalTemplate;\r\n        }\r\n\r\n        // Otherwise, it's a conditional template with other bindings\r\n        // Apply transforms if present\r\n        const params = templatePatch.bindings.map(binding => {\r\n          if (typeof binding === 'object' && 'stateKey' in binding) {\r\n            const value = stateValues[binding.stateKey];\r\n            return binding.transform ? this.applyTransform(value, binding.transform) : value;\r\n          }\r\n          return stateValues[binding as string];\r\n        });\r\n        return this.renderTemplate(conditionalTemplate, params);\r\n      }\r\n    }\r\n\r\n    // Standard template rendering\r\n    const params = templatePatch.bindings.map((binding, index) => {\r\n      // Phase 6: Support Binding objects with transforms\r\n      if (typeof binding === 'object' && 'stateKey' in binding) {\r\n        const value = stateValues[binding.stateKey];\r\n\r\n        // Apply transform if present\r\n        if (binding.transform) {\r\n          return this.applyTransform(value, binding.transform);\r\n        }\r\n\r\n        return value;\r\n      }\r\n\r\n      // Backward compatibility: Simple string binding\r\n      return stateValues[binding as string];\r\n    });\r\n\r\n    return this.renderTemplate(templatePatch.template, params);\r\n  }\r\n\r\n  /**\r\n   * Convert a template patch to concrete patch(es) with current state\r\n   *\r\n   * @param patch - Template patch (UpdateTextTemplate, UpdatePropsTemplate, or UpdateListTemplate)\r\n   * @param stateValues - Current state values\r\n   * @returns Concrete patch or array of patches\r\n   *\r\n   * @example\r\n   * const patch = {\r\n   *   type: 'UpdateTextTemplate',\r\n   *   path: [0, 0],\r\n   *   templatePatch: { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] }\r\n   * };\r\n   * materializePatch(patch, { count: 42 })\r\n   * → { type: 'UpdateText', path: [0, 0], content: \"Count: 42\" }\r\n   */\r\n  static materializePatch(\r\n    patch: Patch,\r\n    stateValues: Record<string, any>\r\n  ): Patch | Patch[] {\r\n    switch (patch.type) {\r\n      case 'UpdateTextTemplate': {\r\n        const content = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateText',\r\n          path: patch.path,\r\n          content\r\n        };\r\n      }\r\n\r\n      case 'UpdatePropsTemplate': {\r\n        const value = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateProps',\r\n          path: patch.path,\r\n          props: { [patch.propName]: value }\r\n        };\r\n      }\r\n\r\n      case 'UpdateListTemplate': {\r\n        // Render loop template to VNodes\r\n        const vnodes = this.renderLoopTemplate(patch.loopTemplate, stateValues);\r\n\r\n        // Convert to concrete patches\r\n        return this.convertLoopToPatches(patch.path, vnodes);\r\n      }\r\n\r\n      default:\r\n        // Not a template patch, return as-is\r\n        return patch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Materialize multiple template patches\r\n   *\r\n   * @param patches - Array of patches (template or concrete)\r\n   * @param stateValues - Current state values\r\n   * @returns Array of concrete patches\r\n   */\r\n  static materializePatches(\r\n    patches: Patch[],\r\n    stateValues: Record<string, any>\r\n  ): Patch[] {\r\n    const materialized: Patch[] = [];\r\n\r\n    for (const patch of patches) {\r\n      const result = this.materializePatch(patch, stateValues);\r\n\r\n      if (Array.isArray(result)) {\r\n        // UpdateListTemplate returns multiple patches\r\n        materialized.push(...result);\r\n      } else {\r\n        materialized.push(result);\r\n      }\r\n    }\r\n\r\n    return materialized;\r\n  }\r\n\r\n  /**\r\n   * Apply transform to a value (Phase 6: Expression Templates)\r\n   * Security: Only whitelisted transforms are allowed\r\n   *\r\n   * @param value - Raw value from state\r\n   * @param transform - Transform string (e.g., \"toFixed(2)\", \"* 100\", \"toUpperCase()\")\r\n   * @returns Transformed value\r\n   *\r\n   * @example\r\n   * applyTransform(99.95, \"toFixed(2)\") → \"99.95\"\r\n   * applyTransform(0.847, \"* 100\") → 84.7\r\n   * applyTransform(\"hello\", \"toUpperCase()\") → \"HELLO\"\r\n   */\r\n  static applyTransform(value: any, transform: string): any {\r\n    // Security: Whitelist-only approach for safe transforms\r\n\r\n    // toFixed(n) - Format number to n decimal places\r\n    if (transform.startsWith('toFixed(')) {\r\n      const decimals = parseInt(transform.match(/\\d+/)?.[0] || '0');\r\n      return Number(value).toFixed(decimals);\r\n    }\r\n\r\n    // Arithmetic: * N (multiplication)\r\n    if (transform.startsWith('* ')) {\r\n      const multiplier = parseFloat(transform.substring(2));\r\n      return Number(value) * multiplier;\r\n    }\r\n\r\n    // Arithmetic: / N (division)\r\n    if (transform.startsWith('/ ')) {\r\n      const divisor = parseFloat(transform.substring(2));\r\n      return Number(value) / divisor;\r\n    }\r\n\r\n    // Arithmetic: + N (addition)\r\n    if (transform.startsWith('+ ')) {\r\n      const addend = parseFloat(transform.substring(2));\r\n      return Number(value) + addend;\r\n    }\r\n\r\n    // Arithmetic: - N (subtraction)\r\n    if (transform.startsWith('- ')) {\r\n      const subtrahend = parseFloat(transform.substring(2));\r\n      return Number(value) - subtrahend;\r\n    }\r\n\r\n    // String: toUpperCase()\r\n    if (transform === 'toUpperCase()' || transform === 'toUpperCase') {\r\n      return String(value).toUpperCase();\r\n    }\r\n\r\n    // String: toLowerCase()\r\n    if (transform === 'toLowerCase()' || transform === 'toLowerCase') {\r\n      return String(value).toLowerCase();\r\n    }\r\n\r\n    // String: trim()\r\n    if (transform === 'trim()' || transform === 'trim') {\r\n      return String(value).trim();\r\n    }\r\n\r\n    // Boolean: ! (negation)\r\n    if (transform === '!') {\r\n      return !value;\r\n    }\r\n\r\n    // Default: Unknown transform, log warning and return value as-is\r\n    console.warn(`[TemplateRenderer] Unknown transform: ${transform}`);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format a value for template substitution\r\n   *\r\n   * @param value - Value to format\r\n   * @returns String representation of value\r\n   */\r\n  private static formatValue(value: any): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === 'number' || typeof value === 'boolean') {\r\n      return String(value);\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      return value.map(v => this.formatValue(v)).join(', ');\r\n    }\r\n\r\n    if (typeof value === 'object') {\r\n      // For objects, use JSON.stringify (could be customized)\r\n      return JSON.stringify(value);\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Check if a patch is a template patch\r\n   *\r\n   * @param patch - Patch to check\r\n   * @returns True if patch is a template patch\r\n   */\r\n  static isTemplatePatch(patch: Patch): boolean {\r\n    return patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate';\r\n  }\r\n\r\n  /**\r\n   * Extract bindings from a template patch\r\n   *\r\n   * @param patch - Template patch\r\n   * @returns Array of state variable names, or empty array if not a template patch\r\n   */\r\n  static extractBindings(patch: Patch): string[] {\r\n    if (patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate') {\r\n      // Handle both string bindings and Binding objects\r\n      return patch.templatePatch.bindings.map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Validate that all required bindings are present in state\r\n   *\r\n   * @param templatePatch - Template patch to validate\r\n   * @param stateValues - Available state values\r\n   * @returns True if all bindings are present\r\n   */\r\n  static validateBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): boolean {\r\n    return templatePatch.bindings.every(binding => {\r\n      const key = typeof binding === 'object' && 'stateKey' in binding\r\n        ? binding.stateKey\r\n        : binding as string;\r\n      return key in stateValues;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get missing bindings from state\r\n   *\r\n   * @param templatePatch - Template patch to check\r\n   * @param stateValues - Available state values\r\n   * @returns Array of missing binding names\r\n   */\r\n  static getMissingBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string[] {\r\n    return templatePatch.bindings\r\n      .filter(binding => {\r\n        const key = typeof binding === 'object' && 'stateKey' in binding\r\n          ? binding.stateKey\r\n          : binding as string;\r\n        return !(key in stateValues);\r\n      })\r\n      .map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Render loop template with current array state\r\n   *\r\n   * @param loopTemplate - Loop template data\r\n   * @param stateValues - Current state values (must include array binding)\r\n   * @returns Array of rendered VNodes\r\n   *\r\n   * @example\r\n   * const template = {\r\n   *   array_binding: \"todos\",\r\n   *   item_template: {\r\n   *     type: \"Element\",\r\n   *     tag: \"li\",\r\n   *     children_templates: [{\r\n   *       type: \"Text\",\r\n   *       template_patch: { template: \"{0}\", bindings: [\"item.text\"], slots: [0] }\r\n   *     }]\r\n   *   }\r\n   * };\r\n   * renderLoopTemplate(template, { todos: [{ text: \"A\" }, { text: \"B\" }] })\r\n   * → [<li>A</li>, <li>B</li>]\r\n   */\r\n  static renderLoopTemplate(\r\n    loopTemplate: LoopTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode[] {\r\n    const array = stateValues[loopTemplate.array_binding];\r\n\r\n    if (!Array.isArray(array)) {\r\n      console.warn(\r\n        `[TemplateRenderer] Expected array for '${loopTemplate.array_binding}', got:`,\r\n        array\r\n      );\r\n      return [];\r\n    }\r\n\r\n    return array.map((item, index) => {\r\n      // Build item state with nested object access\r\n      const itemState = {\r\n        ...stateValues,\r\n        item,\r\n        index,\r\n        ...(loopTemplate.index_var ? { [loopTemplate.index_var]: index } : {})\r\n      };\r\n\r\n      // Flatten item object for binding access (item.text → \"item.text\": value)\r\n      const flattenedState = this.flattenItemState(itemState, item);\r\n\r\n      // Render item template\r\n      return this.renderItemTemplate(loopTemplate.item_template, flattenedState);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten item object for template binding access\r\n   *\r\n   * @param itemState - Current state including item\r\n   * @param item - The array item to flatten\r\n   * @returns Flattened state with \"item.property\" keys\r\n   *\r\n   * @example\r\n   * flattenItemState({ item: { id: 1, text: \"A\" } }, { id: 1, text: \"A\" })\r\n   * → { \"item.id\": 1, \"item.text\": \"A\", item: {...}, ... }\r\n   */\r\n  private static flattenItemState(\r\n    itemState: Record<string, any>,\r\n    item: any\r\n  ): Record<string, any> {\r\n    const flattened = { ...itemState };\r\n\r\n    if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\r\n      // Flatten object properties with \"item.\" prefix\r\n      for (const key in item) {\r\n        flattened[`item.${key}`] = item[key];\r\n      }\r\n    }\r\n\r\n    return flattened;\r\n  }\r\n\r\n  /**\r\n   * Render item template to VNode\r\n   *\r\n   * @param itemTemplate - Template for individual list item\r\n   * @param stateValues - State values with flattened item properties\r\n   * @returns Rendered VNode\r\n   */\r\n  private static renderItemTemplate(\r\n    itemTemplate: ItemTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode {\r\n    switch (itemTemplate.type) {\r\n      case 'Text': {\r\n        const content = this.renderTemplatePatch(itemTemplate.template_patch, stateValues);\r\n        return {\r\n          type: 'Text',\r\n          content\r\n        } as VText;\r\n      }\r\n\r\n      case 'Element': {\r\n        // Render props\r\n        const props: Record<string, string> = {};\r\n        if (itemTemplate.props_templates) {\r\n          for (const [propName, propTemplate] of Object.entries(itemTemplate.props_templates)) {\r\n            props[propName] = this.renderTemplatePatch(propTemplate, stateValues);\r\n          }\r\n        }\r\n\r\n        // Render children\r\n        const children = (itemTemplate.children_templates || []).map(childTemplate =>\r\n          this.renderItemTemplate(childTemplate, stateValues)\r\n        );\r\n\r\n        // Render key\r\n        const key = itemTemplate.key_binding\r\n          ? String(stateValues[itemTemplate.key_binding])\r\n          : undefined;\r\n\r\n        return {\r\n          type: 'Element',\r\n          tag: itemTemplate.tag,\r\n          props,\r\n          children,\r\n          key\r\n        } as VElement;\r\n      }\r\n\r\n      default:\r\n        throw new Error(`Unknown item template type: ${(itemTemplate as any).type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert rendered loop VNodes to concrete patches\r\n   * Generates Create/Replace patches for list update\r\n   *\r\n   * @param parentPath - Path to parent element containing the list\r\n   * @param vnodes - Rendered VNodes for list items\r\n   * @returns Array of patches to update the list\r\n   */\r\n  private static convertLoopToPatches(\r\n    parentPath: number[],\r\n    vnodes: VNode[]\r\n  ): Patch[] {\r\n    // For Phase 4A simplicity: Replace entire list with Create patches\r\n    // TODO Phase 4C: Optimize with incremental diffing\r\n\r\n    return vnodes.map((node, index) => ({\r\n      type: 'Create',\r\n      path: [...parentPath, index],\r\n      node\r\n    } as Patch));\r\n  }\r\n}\r\n","import { Patch } from './types';\r\nimport { TemplateRenderer } from './template-renderer';\r\n\r\n/**\r\n * Queued hint with pre-computed patches\r\n */\r\ninterface QueuedHint {\r\n  hintId: string;\r\n  componentId: string;\r\n  patches: Patch[];\r\n  confidence: number;\r\n  predictedState: Record<string, any>;\r\n  queuedAt: number;\r\n  /** True if this hint contains template patches (for statistics) */\r\n  isTemplate?: boolean;\r\n}\r\n\r\n/**\r\n * Manages hint queue for usePredictHint\r\n * Stores pre-computed patches and applies them when state changes match\r\n */\r\nexport class HintQueue {\r\n  private hints: Map<string, QueuedHint> = new Map();\r\n  private debugLogging: boolean;\r\n  private maxHintAge: number = 5000; // 5 seconds TTL\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Queue a hint from the server\r\n   */\r\n  queueHint(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n    predictedState: Record<string, any>;\r\n  }): void {\r\n    const key = `${data.componentId}:${data.hintId}`;\r\n\r\n    // Check if this hint contains template patches\r\n    const isTemplate = data.patches.some(patch => TemplateRenderer.isTemplatePatch(patch));\r\n\r\n    this.hints.set(key, {\r\n      ...data,\r\n      queuedAt: Date.now(),\r\n      isTemplate\r\n    });\r\n\r\n    const patchType = isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n    this.log(`${patchType} hint '${data.hintId}' queued for ${data.componentId}`, data);\r\n\r\n    // Auto-expire old hints\r\n    this.cleanupStaleHints();\r\n  }\r\n\r\n  /**\r\n   * Check if a state change matches any queued hint\r\n   * Returns patches if match found, null otherwise\r\n   */\r\n  matchHint(componentId: string, stateChanges: Record<string, any>): {\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n  } | null {\r\n    // Find hints for this component\r\n    const componentHints = Array.from(this.hints.entries())\r\n      .filter(([key]) => key.startsWith(`${componentId}:`))\r\n      .map(([, hint]) => hint);\r\n\r\n    // Check each hint to see if it matches the state change\r\n    for (const hint of componentHints) {\r\n      if (this.stateMatches(hint.predictedState, stateChanges)) {\r\n        const patchType = hint.isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n        this.log(`${patchType} hint '${hint.hintId}' matched!`, { hint, stateChanges });\r\n\r\n        // Remove from queue\r\n        const key = `${componentId}:${hint.hintId}`;\r\n        this.hints.delete(key);\r\n\r\n        // Materialize template patches with current state values\r\n        const materializedPatches = TemplateRenderer.materializePatches(\r\n          hint.patches,\r\n          stateChanges\r\n        );\r\n\r\n        return {\r\n          hintId: hint.hintId,\r\n          patches: materializedPatches,\r\n          confidence: hint.confidence\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if predicted state matches actual state change\r\n   */\r\n  private stateMatches(predicted: Record<string, any>, actual: Record<string, any>): boolean {\r\n    // Check if all predicted keys match actual values\r\n    for (const [key, predictedValue] of Object.entries(predicted)) {\r\n      if (!(key in actual)) {\r\n        return false; // Key not in actual change\r\n      }\r\n\r\n      // Deep equality check (simplified - could use lodash.isEqual in production)\r\n      if (JSON.stringify(actual[key]) !== JSON.stringify(predictedValue)) {\r\n        return false; // Value doesn't match\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove hints older than maxHintAge\r\n   */\r\n  private cleanupStaleHints(): void {\r\n    const now = Date.now();\r\n    const staleKeys: string[] = [];\r\n\r\n    for (const [key, hint] of this.hints.entries()) {\r\n      if (now - hint.queuedAt > this.maxHintAge) {\r\n        staleKeys.push(key);\r\n      }\r\n    }\r\n\r\n    if (staleKeys.length > 0) {\r\n      this.log(`Removing ${staleKeys.length} stale hint(s)`, staleKeys);\r\n      for (const key of staleKeys) {\r\n        this.hints.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToRemove = Array.from(this.hints.keys())\r\n      .filter(key => key.startsWith(`${componentId}:`));\r\n\r\n    for (const key of keysToRemove) {\r\n      this.hints.delete(key);\r\n    }\r\n\r\n    if (keysToRemove.length > 0) {\r\n      this.log(`Cleared ${keysToRemove.length} hint(s) for component ${componentId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints\r\n   */\r\n  clearAll(): void {\r\n    this.hints.clear();\r\n    this.log('Cleared all hints');\r\n  }\r\n\r\n  /**\r\n   * Get stats about queued hints\r\n   */\r\n  getStats() {\r\n    const allHints = Array.from(this.hints.values());\r\n    const templateHints = allHints.filter(h => h.isTemplate);\r\n    const concreteHints = allHints.filter(h => !h.isTemplate);\r\n\r\n    return {\r\n      totalHints: this.hints.size,\r\n      templateHints: templateHints.length,\r\n      concreteHints: concreteHints.length,\r\n      templatePercentage: this.hints.size > 0\r\n        ? Math.round((templateHints.length / this.hints.size) * 100)\r\n        : 0,\r\n      hintsByComponent: allHints.reduce((acc, hint) => {\r\n        acc[hint.componentId] = (acc[hint.componentId] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>)\r\n    };\r\n  }\r\n\r\n  private log(message: string, ...args: any[]): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact HintQueue] ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Bridge for communicating prediction events to playground parent window\r\n * Emits postMessage events that the React playground can listen to\r\n */\r\nexport class PlaygroundBridge {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Notify that a prediction was received from server\r\n   */\r\n  predictionReceived(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patchCount: number;\r\n    confidence: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:prediction-received',\r\n      data\r\n    });\r\n\r\n    this.log('Prediction received', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache hit occurred (instant patch application)\r\n   */\r\n  cacheHit(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    latency: number;\r\n    confidence: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-hit',\r\n      data: {\r\n        ...data,\r\n        cacheHit: true,\r\n        elapsedMs: data.latency\r\n      }\r\n    });\r\n\r\n    this.log('🟢 CACHE HIT', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache miss occurred (had to compute on server)\r\n   */\r\n  cacheMiss(data: {\r\n    componentId: string;\r\n    methodName: string;\r\n    latency: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-miss',\r\n      data: {\r\n        ...data,\r\n        cacheHit: false,\r\n        elapsedMs: data.latency,\r\n        predictionConfidence: 0\r\n      }\r\n    });\r\n\r\n    this.log('🔴 CACHE MISS', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a correction was applied (prediction was wrong)\r\n   */\r\n  correctionApplied(data: {\r\n    componentId: string;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:correction',\r\n      data\r\n    });\r\n\r\n    this.log('Correction applied (prediction was incorrect)', data);\r\n  }\r\n\r\n  /**\r\n   * Post message to parent window (for iframe communication)\r\n   */\r\n  private postMessage(message: any): void {\r\n    // Check if we're in an iframe\r\n    if (window.parent && window.parent !== window) {\r\n      window.parent.postMessage(message, '*');\r\n    }\r\n\r\n    // Also dispatch as custom event for same-window listeners\r\n    window.dispatchEvent(new CustomEvent(message.type, { detail: message.data }));\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PlaygroundBridge] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Client-Computed State Manager\r\n *\r\n * Manages variables that are computed on the client using external libraries\r\n * (lodash, moment, etc.) and syncs them to the server for SSR.\r\n *\r\n * This enables Option 1 auto-detection: developers use external libraries\r\n * naturally, and the system automatically handles client-server sync.\r\n */\r\n\r\n/**\r\n * A function that computes a value based on component state\r\n */\r\nexport type ComputeFunction = () => any;\r\n\r\n/**\r\n * Registry entry for a single client-computed variable\r\n */\r\ninterface ClientComputedVariable {\r\n  varName: string;\r\n  computeFn: ComputeFunction;\r\n  lastValue?: any;\r\n  dependencies?: string[]; // State keys this variable depends on\r\n}\r\n\r\n/**\r\n * Registry of client-computed variables per component\r\n */\r\ninterface ClientComputedRegistry {\r\n  [componentId: string]: {\r\n    [varName: string]: ClientComputedVariable;\r\n  };\r\n}\r\n\r\nconst computedRegistry: ClientComputedRegistry = {};\r\n\r\n/**\r\n * Debug logging\r\n */\r\nlet debugLogging = false;\r\n\r\nexport function setDebugLogging(enabled: boolean): void {\r\n  debugLogging = enabled;\r\n}\r\n\r\nfunction log(message: string, data?: any): void {\r\n  if (debugLogging) {\r\n    console.log(`[ClientComputed] ${message}`, data || '');\r\n  }\r\n}\r\n\r\n/**\r\n * Register a client-computed variable for a component\r\n *\r\n * @param componentId - Unique identifier for the component\r\n * @param varName - Name of the variable being computed\r\n * @param computeFn - Function that computes the value\r\n * @param dependencies - Optional list of state keys this variable depends on\r\n */\r\nexport function registerClientComputed(\r\n  componentId: string,\r\n  varName: string,\r\n  computeFn: ComputeFunction,\r\n  dependencies?: string[]\r\n): void {\r\n  if (!computedRegistry[componentId]) {\r\n    computedRegistry[componentId] = {};\r\n  }\r\n\r\n  computedRegistry[componentId][varName] = {\r\n    varName,\r\n    computeFn,\r\n    dependencies\r\n  };\r\n\r\n  log(`Registered client-computed variable`, { componentId, varName, dependencies });\r\n}\r\n\r\n/**\r\n * Compute a single variable's value\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The computed value or undefined if not found\r\n */\r\nexport function computeVariable(componentId: string, varName: string): any {\r\n  const computed = computedRegistry[componentId]?.[varName];\r\n\r\n  if (!computed) {\r\n    console.warn(`[ClientComputed] Variable '${varName}' not registered for component '${componentId}'`);\r\n    return undefined;\r\n  }\r\n\r\n  try {\r\n    const value = computed.computeFn();\r\n    computed.lastValue = value;\r\n    log(`Computed variable`, { componentId, varName, value });\r\n    return value;\r\n  } catch (error) {\r\n    console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute all client-computed variables for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all computed values\r\n */\r\nexport function computeAllForComponent(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    log(`No computed variables for component`, { componentId });\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    try {\r\n      const value = variable.computeFn();\r\n      variable.lastValue = value;\r\n      result[varName] = value;\r\n    } catch (error) {\r\n      console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n      result[varName] = undefined;\r\n    }\r\n  }\r\n\r\n  log(`Computed all variables`, { componentId, result });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute only variables that depend on a specific state key\r\n *\r\n * @param componentId - Component identifier\r\n * @param changedStateKey - State key that changed\r\n * @returns Object with affected computed values\r\n */\r\nexport function computeDependentVariables(\r\n  componentId: string,\r\n  changedStateKey: string\r\n): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    // If no dependencies specified, assume it depends on everything\r\n    const shouldRecompute = !variable.dependencies ||\r\n                           variable.dependencies.includes(changedStateKey);\r\n\r\n    if (shouldRecompute) {\r\n      try {\r\n        const value = variable.computeFn();\r\n        variable.lastValue = value;\r\n        result[varName] = value;\r\n        log(`Recomputed dependent variable`, { componentId, varName, changedStateKey, value });\r\n      } catch (error) {\r\n        console.error(`[ClientComputed] Error recomputing '${varName}':`, error);\r\n        result[varName] = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Get the last computed value without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The last computed value or undefined\r\n */\r\nexport function getLastValue(componentId: string, varName: string): any {\r\n  return computedRegistry[componentId]?.[varName]?.lastValue;\r\n}\r\n\r\n/**\r\n * Get all last computed values without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all last computed values\r\n */\r\nexport function getAllLastValues(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    result[varName] = variable.lastValue;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Check if a component has any client-computed variables\r\n *\r\n * @param componentId - Component identifier\r\n * @returns True if component has computed variables\r\n */\r\nexport function hasClientComputed(componentId: string): boolean {\r\n  return !!computedRegistry[componentId] &&\r\n         Object.keys(computedRegistry[componentId]).length > 0;\r\n}\r\n\r\n/**\r\n * Get list of all computed variable names for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Array of variable names\r\n */\r\nexport function getComputedVariableNames(componentId: string): string[] {\r\n  const computed = computedRegistry[componentId];\r\n  return computed ? Object.keys(computed) : [];\r\n}\r\n\r\n/**\r\n * Clear all computed variables for a component\r\n * Used when component is unmounted\r\n *\r\n * @param componentId - Component identifier\r\n */\r\nexport function clearComponent(componentId: string): void {\r\n  delete computedRegistry[componentId];\r\n  log(`Cleared component`, { componentId });\r\n}\r\n\r\n/**\r\n * Clear all computed variables (for testing/cleanup)\r\n */\r\nexport function clearAll(): void {\r\n  Object.keys(computedRegistry).forEach(key => delete computedRegistry[key]);\r\n  log('Cleared all computed variables');\r\n}\r\n\r\n/**\r\n * Get debug info about registered computations\r\n * Useful for dev tools / debugging\r\n */\r\nexport function getDebugInfo(): {\r\n  componentCount: number;\r\n  components: Record<string, { variableCount: number; variables: string[] }>;\r\n} {\r\n  const components: Record<string, { variableCount: number; variables: string[] }> = {};\r\n\r\n  for (const [componentId, computed] of Object.entries(computedRegistry)) {\r\n    const variables = Object.keys(computed);\r\n    components[componentId] = {\r\n      variableCount: variables.length,\r\n      variables\r\n    };\r\n  }\r\n\r\n  return {\r\n    componentCount: Object.keys(computedRegistry).length,\r\n    components\r\n  };\r\n}\r\n","/**\r\n * Template State Manager - Client-Side Template Rendering\r\n *\r\n * Manages \"virtual state\" for text nodes using parameterized templates.\r\n * This enables instant hot reload with 100% coverage and minimal memory.\r\n *\r\n * Architecture:\r\n * - Templates loaded from .templates.json at component init\r\n * - State changes trigger template re-rendering\r\n * - Hot reload updates templates without server round-trip\r\n *\r\n * Memory: ~2KB per component (vs 100KB with prediction-based approach)\r\n * Coverage: 100% (works with any value)\r\n * Latency: <5ms for template updates\r\n */\r\n\r\nexport interface Template {\r\n  /** Template string with {0}, {1}, etc. placeholders */\r\n  template: string;\r\n  /** State bindings that fill the template slots */\r\n  bindings: string[];\r\n  /** Character positions where params are inserted */\r\n  slots: number[];\r\n  /** DOM path to the text node */\r\n  path: number[];\r\n  /** Template type: static | dynamic | attribute */\r\n  type: 'static' | 'dynamic' | 'attribute';\r\n  /** Attribute name (only for attribute templates) */\r\n  attribute?: string;\r\n}\r\n\r\nexport interface TemplateMap {\r\n  component: string;\r\n  version: string;\r\n  generatedAt: number;\r\n  templates: Record<string, Template>;\r\n}\r\n\r\nexport interface TemplatePatch {\r\n  type: 'UpdateTextTemplate' | 'UpdatePropTemplate';\r\n  componentId: string;\r\n  path: number[];\r\n  template: string;\r\n  params: any[];\r\n  bindings: string[];\r\n  slots: number[];\r\n  attribute?: string;\r\n}\r\n\r\n/**\r\n * Template State Manager\r\n */\r\nexport class TemplateStateManager {\r\n  private templates: Map<string, Template> = new Map();\r\n  private componentStates: Map<string, Map<string, any>> = new Map();\r\n\r\n  /**\r\n   * Initialize templates from .templates.json file\r\n   */\r\n  loadTemplateMap(componentId: string, templateMap: TemplateMap): void {\r\n    console.log(`[TemplateState] Loading ${Object.keys(templateMap.templates).length} templates for ${componentId}`);\r\n\r\n    for (const [nodePath, template] of Object.entries(templateMap.templates)) {\r\n      const key = `${componentId}:${nodePath}`;\r\n      this.templates.set(key, template);\r\n    }\r\n\r\n    // Initialize component state tracking\r\n    if (!this.componentStates.has(componentId)) {\r\n      this.componentStates.set(componentId, new Map());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a template for a specific node path\r\n   */\r\n  registerTemplate(\r\n    componentId: string,\r\n    nodePath: string,\r\n    template: Template\r\n  ): void {\r\n    const key = `${componentId}:${nodePath}`;\r\n    this.templates.set(key, template);\r\n  }\r\n\r\n  /**\r\n   * Get template by component ID and node path\r\n   */\r\n  getTemplate(componentId: string, nodePath: string): Template | undefined {\r\n    const key = `${componentId}:${nodePath}`;\r\n    return this.templates.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all templates for a component\r\n   */\r\n  getComponentTemplates(componentId: string): Map<string, Template> {\r\n    const result = new Map<string, Template>();\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        const nodePath = key.substring(componentId.length + 1);\r\n        result.set(nodePath, template);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get templates bound to a specific state variable\r\n   */\r\n  getTemplatesBoundTo(componentId: string, stateKey: string): Template[] {\r\n    const templates: Template[] = [];\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`) && template.bindings.includes(stateKey)) {\r\n        templates.push(template);\r\n      }\r\n    }\r\n\r\n    return templates;\r\n  }\r\n\r\n  /**\r\n   * Update component state (from useState)\r\n   */\r\n  updateState(componentId: string, stateKey: string, value: any): void {\r\n    let state = this.componentStates.get(componentId);\r\n    if (!state) {\r\n      state = new Map();\r\n      this.componentStates.set(componentId, state);\r\n    }\r\n    state.set(stateKey, value);\r\n  }\r\n\r\n  /**\r\n   * Get component state value\r\n   */\r\n  getStateValue(componentId: string, stateKey: string): any {\r\n    return this.componentStates.get(componentId)?.get(stateKey);\r\n  }\r\n\r\n  /**\r\n   * Render template with current state values\r\n   */\r\n  render(componentId: string, nodePath: string): string | null {\r\n    const template = this.getTemplate(componentId, nodePath);\r\n    if (!template) return null;\r\n\r\n    // Get state values for bindings\r\n    const params = template.bindings.map(binding =>\r\n      this.getStateValue(componentId, binding)\r\n    );\r\n\r\n    return this.renderWithParams(template.template, params);\r\n  }\r\n\r\n  /**\r\n   * Render template with specific parameter values\r\n   */\r\n  renderWithParams(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace {0}, {1}, etc. with parameter values\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = param !== undefined && param !== null ? String(param) : '';\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Apply template patch from hot reload\r\n   */\r\n  applyTemplatePatch(patch: TemplatePatch): { text: string; path: number[] } | null {\r\n    const { componentId, path, template, params, bindings, slots, attribute } = patch;\r\n\r\n    // Render template with params\r\n    const text = this.renderWithParams(template, params);\r\n\r\n    // Build node path key\r\n    const nodePath = this.buildNodePathKey(path);\r\n    const key = `${componentId}:${nodePath}`;\r\n\r\n    // Update stored template\r\n    const existingTemplate = this.templates.get(key);\r\n    if (existingTemplate) {\r\n      existingTemplate.template = template;\r\n      existingTemplate.bindings = bindings;\r\n      existingTemplate.slots = slots;\r\n      if (attribute) {\r\n        existingTemplate.attribute = attribute;\r\n      }\r\n    } else {\r\n      // Register new template\r\n      this.templates.set(key, {\r\n        template,\r\n        bindings,\r\n        slots,\r\n        path,\r\n        type: attribute ? 'attribute' : 'dynamic',\r\n        attribute\r\n      });\r\n    }\r\n\r\n    console.log(`[TemplateState] Applied template patch: \"${template}\" → \"${text}\"`);\r\n\r\n    return { text, path };\r\n  }\r\n\r\n  /**\r\n   * Build node path key from path array\r\n   * Example: [0, 1, 0] → \"0_1_0\"\r\n   */\r\n  private buildNodePathKey(path: number[]): string {\r\n    return path.join('_');\r\n  }\r\n\r\n  /**\r\n   * Clear all templates for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToDelete: string[] = [];\r\n\r\n    for (const key of this.templates.keys()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    for (const key of keysToDelete) {\r\n      this.templates.delete(key);\r\n    }\r\n\r\n    this.componentStates.delete(componentId);\r\n  }\r\n\r\n  /**\r\n   * Clear all templates\r\n   */\r\n  clear(): void {\r\n    this.templates.clear();\r\n    this.componentStates.clear();\r\n  }\r\n\r\n  /**\r\n   * Get statistics\r\n   */\r\n  getStats() {\r\n    const componentCount = this.componentStates.size;\r\n    const templateCount = this.templates.size;\r\n\r\n    // Estimate memory usage (rough estimate)\r\n    let memoryBytes = 0;\r\n    for (const template of this.templates.values()) {\r\n      memoryBytes += template.template.length * 2; // UTF-16\r\n      memoryBytes += template.bindings.length * 20; // Rough estimate\r\n      memoryBytes += template.slots.length * 4; // 4 bytes per number\r\n      memoryBytes += template.path.length * 4;\r\n    }\r\n\r\n    return {\r\n      componentCount,\r\n      templateCount,\r\n      memoryKB: Math.round(memoryBytes / 1024),\r\n      avgTemplatesPerComponent: templateCount / Math.max(componentCount, 1)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Global template state manager instance\r\n */\r\nexport const templateState = new TemplateStateManager();\r\n","/**\r\n * Server Task - Client-side representation of a long-running server task\r\n *\r\n * Provides reactive state management for async operations that execute on the server.\r\n * Automatically syncs state changes from server and triggers component re-renders.\r\n */\r\n\r\nexport type ServerTaskStatus = 'idle' | 'running' | 'complete' | 'error' | 'cancelled';\r\n\r\n/**\r\n * Options for configuring a server task\r\n */\r\nexport interface ServerTaskOptions {\r\n  /** Enable streaming mode (for async generators) */\r\n  stream?: boolean;\r\n  /** Estimated number of chunks (for progress calculation in streaming mode) */\r\n  estimatedChunks?: number;\r\n  /** Callback invoked for each chunk in streaming mode */\r\n  onChunk?: (chunk: any, index: number) => void;\r\n  /** Maximum number of chunks to keep in memory (for memory management) */\r\n  maxChunksInMemory?: number;\r\n}\r\n\r\n/**\r\n * Server task interface - Represents a long-running operation on the server\r\n */\r\nexport interface ServerTask<T> {\r\n  // Status\r\n  status: ServerTaskStatus;\r\n  progress: number; // 0.0 to 1.0\r\n\r\n  // Result\r\n  result?: T;\r\n  error?: Error;\r\n\r\n  // Streaming-specific\r\n  streaming: boolean;\r\n  partial?: T; // Latest partial result (accumulated)\r\n  chunks: T[]; // All chunks received so far\r\n  chunkCount: number; // Number of chunks received\r\n\r\n  // Control methods\r\n  start(...args: any[]): void;\r\n  retry(...args: any[]): void;\r\n  cancel(): void;\r\n\r\n  // Promise interface (for await)\r\n  promise: Promise<T>;\r\n\r\n  // Metadata\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number; // milliseconds\r\n\r\n  // Computed properties\r\n  readonly idle: boolean;\r\n  readonly running: boolean;\r\n  readonly complete: boolean;\r\n  readonly failed: boolean;\r\n  readonly cancelled: boolean;\r\n}\r\n\r\n/**\r\n * Server task implementation\r\n */\r\nexport class ServerTaskImpl<T> implements ServerTask<T> {\r\n  status: ServerTaskStatus = 'idle';\r\n  progress: number = 0;\r\n  result?: T;\r\n  error?: Error;\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number;\r\n\r\n  // Streaming props\r\n  streaming: boolean;\r\n  partial?: T;\r\n  chunks: T[] = [];\r\n  chunkCount: number = 0;\r\n\r\n  private _promise?: Promise<T>;\r\n  private _resolve?: (value: T) => void;\r\n  private _reject?: (error: Error) => void;\r\n  private _options: ServerTaskOptions;\r\n\r\n  constructor(\r\n    private taskId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    options: ServerTaskOptions = {}\r\n  ) {\r\n    this._options = options;\r\n    this.streaming = options.stream || false;\r\n    this._createPromise();\r\n  }\r\n\r\n  private _createPromise(): void {\r\n    this._promise = new Promise<T>((resolve, reject) => {\r\n      this._resolve = resolve;\r\n      this._reject = reject;\r\n    });\r\n  }\r\n\r\n  get promise(): Promise<T> {\r\n    return this._promise!;\r\n  }\r\n\r\n  get idle(): boolean {\r\n    return this.status === 'idle';\r\n  }\r\n\r\n  get running(): boolean {\r\n    return this.status === 'running';\r\n  }\r\n\r\n  get complete(): boolean {\r\n    return this.status === 'complete';\r\n  }\r\n\r\n  get failed(): boolean {\r\n    return this.status === 'error';\r\n  }\r\n\r\n  get cancelled(): boolean {\r\n    return this.status === 'cancelled';\r\n  }\r\n\r\n  /**\r\n   * Start the server task with optional arguments\r\n   */\r\n  start(...args: any[]): void {\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    // Clear previous results\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    // Trigger re-render to show \"running\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server task via SignalR\r\n    this.signalR.invoke('StartServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to start task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retry a failed or cancelled task\r\n   */\r\n  retry(...args: any[]): void {\r\n    if (this.status !== 'error' && this.status !== 'cancelled') {\r\n      console.warn('[Minimact] Can only retry failed or cancelled tasks');\r\n      return;\r\n    }\r\n\r\n    // Reset promise for new attempt\r\n    this._createPromise();\r\n\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    this._triggerRerender();\r\n\r\n    this.signalR.invoke('RetryServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to retry task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Cancel a running task\r\n   */\r\n  cancel(): void {\r\n    if (this.status !== 'running') {\r\n      console.warn('[Minimact] Can only cancel running tasks');\r\n      return;\r\n    }\r\n\r\n    this.signalR.invoke('CancelServerTask', this.componentId, this.taskId)\r\n      .then(() => {\r\n        this.status = 'cancelled';\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(new Error('Task cancelled by user'));\r\n        this._triggerRerender();\r\n      })\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to cancel task ${this.taskId}:`, err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update task state from server\r\n   * Called by Minimact when server sends task state updates via SignalR\r\n   */\r\n  _updateFromServer(state: any): void {\r\n    const previousStatus = this.status;\r\n\r\n    this.status = state.status;\r\n    this.progress = state.progress || 0;\r\n    this.result = state.result;\r\n\r\n    if (state.error) {\r\n      this.error = new Error(state.error);\r\n    }\r\n\r\n    if (state.startedAt) {\r\n      this.startedAt = new Date(state.startedAt);\r\n    }\r\n\r\n    if (state.completedAt) {\r\n      this.completedAt = new Date(state.completedAt);\r\n    }\r\n\r\n    if (state.duration) {\r\n      this.duration = state.duration;\r\n    }\r\n\r\n    // Resolve/reject promise based on status change\r\n    if (this.status === 'complete' && previousStatus !== 'complete') {\r\n      if (this._resolve) {\r\n        this._resolve(this.result!);\r\n      }\r\n    } else if (this.status === 'error' && previousStatus !== 'error') {\r\n      if (this._reject) {\r\n        this._reject(this.error!);\r\n      }\r\n    } else if (this.status === 'cancelled' && previousStatus !== 'cancelled') {\r\n      if (this._reject) {\r\n        this._reject(new Error('Task cancelled'));\r\n      }\r\n    }\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousStatus !== this.status || this.progress !== state.progress) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.taskId]: {\r\n        status: this.status,\r\n        progress: this.progress,\r\n        chunkCount: this.chunkCount\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Task state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Task state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * useComputed Hook\r\n *\r\n * Compute values on the client using browser-only APIs or external libraries,\r\n * then sync to the server for rendering.\r\n *\r\n * This replaces the conceptually flawed \"useClientState\" with a sound approach:\r\n * - Client computes values using browser APIs (lodash, moment, geolocation, crypto)\r\n * - Results are synced to server via UpdateClientComputedState\r\n * - Server accesses values via GetClientState<T>(key) for rendering\r\n * - Server still does ALL rendering (dehydrationist architecture)\r\n */\r\n\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface UseComputedOptions<T = any> {\r\n  /** Enable memoization (default: true) */\r\n  memoize?: boolean;\r\n  /** Cache expiry in milliseconds (e.g., 5000 = 5 seconds) */\r\n  expiry?: number;\r\n  /** Debounce sync to server (milliseconds) */\r\n  debounce?: number;\r\n  /** Throttle sync to server (milliseconds) */\r\n  throttle?: number;\r\n  /** Initial value before first computation */\r\n  initialValue?: T;\r\n}\r\n\r\ninterface ComputedCache<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  deps: any[];\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\nlet computedIndex = 0;\r\n\r\n/**\r\n * Set the current component context for useComputed\r\n * Called by setComponentContext in hooks.ts\r\n */\r\nexport function setComputedContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * Clear the current component context\r\n */\r\nexport function clearComputedContext(): void {\r\n  currentContext = null;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * useComputed Hook\r\n *\r\n * @param key - Unique identifier for server-side access via GetClientState<T>(key)\r\n * @param computeFn - Function that computes the value (runs on client)\r\n * @param deps - Dependency array (like useEffect)\r\n * @param options - Configuration options\r\n * @returns The computed value\r\n *\r\n * @example\r\n * // With lodash\r\n * const sortedUsers = useComputed('sortedUsers', () => {\r\n *   return _.sortBy(users, 'name');\r\n * }, [users]);\r\n *\r\n * @example\r\n * // With geolocation\r\n * const location = useComputed('location', async () => {\r\n *   const pos = await new Promise((resolve) => {\r\n *     navigator.geolocation.getCurrentPosition(resolve);\r\n *   });\r\n *   return { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n * }, []);\r\n *\r\n * @example\r\n * // With memoization and expiry\r\n * const result = useComputed('result', () => compute(data), [data], {\r\n *   memoize: true,\r\n *   expiry: 5000  // Cache for 5 seconds\r\n * });\r\n */\r\nexport function useComputed<T>(\r\n  key: string,\r\n  computeFn: () => T,\r\n  deps: any[] = [],\r\n  options: UseComputedOptions<T> = {}\r\n): T {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useComputed must be called within a component render');\r\n  }\r\n\r\n  const {\r\n    memoize = true,  // Default to true for performance\r\n    expiry,\r\n    debounce,\r\n    throttle,\r\n    initialValue\r\n  } = options;\r\n\r\n  const context = currentContext;\r\n  const index = computedIndex++;\r\n  const computedKey = `computed_${index}_${key}`;\r\n\r\n  // Store computed value in state\r\n  const [value, setValue] = useState<T>(\r\n    initialValue !== undefined ? initialValue : null as T\r\n  );\r\n\r\n  // Cache for memoization\r\n  const cache = useRef<ComputedCache<T> | null>(null);\r\n\r\n  // Debounce timer ref\r\n  const debounceTimer = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if we should use cached value\r\n    if (memoize && cache.current) {\r\n      // Check if deps changed\r\n      const depsChanged = deps.length !== cache.current.deps.length ||\r\n        deps.some((dep, i) => !Object.is(dep, cache.current!.deps[i]));\r\n\r\n      if (!depsChanged) {\r\n        // Deps haven't changed\r\n        if (expiry) {\r\n          // Check if cache expired\r\n          const age = Date.now() - cache.current.timestamp;\r\n          if (age < expiry) {\r\n            // Cache is still valid, use cached value\r\n            return;\r\n          }\r\n          // Cache expired, continue to recompute\r\n        } else {\r\n          // No expiry, use cached value indefinitely\r\n          return;\r\n        }\r\n      }\r\n      // Deps changed, continue to recompute\r\n    }\r\n\r\n    // Compute new value\r\n    let computed: T;\r\n    try {\r\n      computed = computeFn();\r\n    } catch (error) {\r\n      console.error(`[Minimact] Error in useComputed('${key}'):`, error);\r\n      throw error;\r\n    }\r\n\r\n    // Handle async computations\r\n    if (computed instanceof Promise) {\r\n      computed.then((resolvedValue) => {\r\n        // Update cache if memoization enabled\r\n        if (memoize) {\r\n          cache.current = {\r\n            value: resolvedValue,\r\n            timestamp: Date.now(),\r\n            deps: [...deps]\r\n          };\r\n        }\r\n\r\n        // Update local state\r\n        setValue(resolvedValue);\r\n\r\n        // Sync to server\r\n        syncToServer(resolvedValue);\r\n      }).catch((error) => {\r\n        console.error(`[Minimact] Async error in useComputed('${key}'):`, error);\r\n      });\r\n\r\n      return; // Don't sync yet, wait for promise to resolve\r\n    }\r\n\r\n    // Update cache if memoization enabled\r\n    if (memoize) {\r\n      cache.current = {\r\n        value: computed,\r\n        timestamp: Date.now(),\r\n        deps: [...deps]\r\n      };\r\n    }\r\n\r\n    // Update local state\r\n    setValue(computed);\r\n\r\n    // Sync to server\r\n    syncToServer(computed);\r\n\r\n  }, deps);\r\n\r\n  /**\r\n   * Sync computed value to server via SignalR\r\n   */\r\n  function syncToServer(computedValue: T): void {\r\n    const doSync = () => {\r\n      if (!context.signalR) {\r\n        console.warn(`[Minimact] SignalR not available, cannot sync useComputed('${key}')`);\r\n        return;\r\n      }\r\n\r\n      context.signalR.updateClientComputedState(context.componentId, { [key]: computedValue })\r\n        .catch(err => {\r\n          console.error(`[Minimact] Failed to sync computed state '${key}':`, err);\r\n        });\r\n    };\r\n\r\n    // Apply debounce if specified\r\n    if (debounce) {\r\n      if (debounceTimer.current !== null) {\r\n        clearTimeout(debounceTimer.current);\r\n      }\r\n      debounceTimer.current = window.setTimeout(() => {\r\n        doSync();\r\n        debounceTimer.current = null;\r\n      }, debounce);\r\n      return;\r\n    }\r\n\r\n    // TODO: Implement throttle\r\n    if (throttle) {\r\n      // For now, just sync immediately\r\n      // Proper throttle implementation would track last sync time\r\n      doSync();\r\n      return;\r\n    }\r\n\r\n    // No debounce/throttle, sync immediately\r\n    doSync();\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { HintQueue } from './hint-queue';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { IConnectionManager } from './connection-manager';\r\nimport { templateState } from './template-state';\r\nimport { ServerTask, ServerTaskImpl, ServerTaskOptions } from './server-task';\r\nimport { ServerReducer, ServerReducerImpl } from './server-reducer';\r\nimport { setComputedContext } from './useComputed';\r\n\r\n/**\r\n * Component instance context for hooks\r\n */\r\nexport interface ComponentContext {\r\n  componentId: string;\r\n  element: HTMLElement;\r\n  state: Map<string, any>;\r\n  effects: Array<{ callback: () => void | (() => void), deps: any[] | undefined, cleanup?: () => void }>;\r\n  refs: Map<string, { current: any }>;\r\n  serverTasks?: Map<string, ServerTaskImpl<any>>; // For useServerTask integration\r\n  serverReducers?: Map<string, ServerReducerImpl<any, any>>; // For useServerReducer integration\r\n  computedValues?: Map<string, any>; // For useComputed integration\r\n  hintQueue: HintQueue;\r\n  domPatcher: DOMPatcher;\r\n  playgroundBridge?: PlaygroundBridge;\r\n  signalR: IConnectionManager; // For syncing state to server (works with SignalR or SignalM)\r\n  // Note: domElementStates and confidenceWorker are added via module augmentation by minimact-punch\r\n}\r\n\r\n// Global context tracking\r\nlet currentContext: ComponentContext | null = null;\r\nlet stateIndex = 0;\r\nlet effectIndex = 0;\r\nlet refIndex = 0;\r\nlet serverTaskIndex = 0;\r\nlet serverReducerIndex = 0;\r\n\r\n/**\r\n * Set the current component context (called before render)\r\n */\r\nexport function setComponentContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  stateIndex = 0;\r\n  effectIndex = 0;\r\n  refIndex = 0;\r\n  serverTaskIndex = 0;\r\n  serverReducerIndex = 0;\r\n\r\n  // Reset computed index for useComputed hook\r\n  setComputedContext(context);\r\n}\r\n\r\n/**\r\n * Clear the current component context (called after render)\r\n */\r\nexport function clearComponentContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Find DOM element by path array\r\n * Example: [0, 1, 0] → first child, second child, first child\r\n */\r\nfunction findElementByPath(root: HTMLElement, path: number[]): Node | null {\r\n  let current: Node | null = root;\r\n\r\n  for (const index of path) {\r\n    if (!current || !current.childNodes) return null;\r\n    current = current.childNodes[index] || null;\r\n  }\r\n\r\n  return current;\r\n}\r\n\r\n/**\r\n * useState hook - manages component state with hint queue integration\r\n */\r\nexport function useState<T>(initialValue: T): [T, (newValue: T | ((prev: T) => T)) => void] {\r\n  if (!currentContext) {\r\n    throw new Error('useState must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = stateIndex++;\r\n  const stateKey = `state_${index}`;\r\n\r\n  // Initialize state if not exists\r\n  if (!context.state.has(stateKey)) {\r\n    context.state.set(stateKey, initialValue);\r\n  }\r\n\r\n  const currentValue = context.state.get(stateKey) as T;\r\n\r\n  const setState = (newValue: T | ((prev: T) => T)) => {\r\n    const startTime = performance.now();\r\n\r\n    const actualNewValue = typeof newValue === 'function'\r\n      ? (newValue as (prev: T) => T)(context.state.get(stateKey) as T)\r\n      : newValue;\r\n\r\n    // Build state change object for hint matching\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: actualNewValue\r\n    };\r\n\r\n    // Check hint queue for match\r\n    const hint = context.hintQueue.matchHint(context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // 🟢 CACHE HIT! Apply queued patches immediately\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🟢 CACHE HIT! Hint '${hint.hintId}' matched - applying ${hint.patches.length} patches in ${latency.toFixed(2)}ms`);\r\n\r\n      context.domPatcher.applyPatches(context.element, hint.patches);\r\n\r\n      // Notify playground of cache hit\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheHit({\r\n          componentId: context.componentId,\r\n          hintId: hint.hintId,\r\n          latency,\r\n          confidence: hint.confidence,\r\n          patchCount: hint.patches.length\r\n        });\r\n      }\r\n    } else {\r\n      // 🔴 CACHE MISS - No prediction found\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🔴 CACHE MISS - No prediction for state change:`, stateChanges);\r\n\r\n      // Notify playground of cache miss\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheMiss({\r\n          componentId: context.componentId,\r\n          methodName: `setState(${stateKey})`,\r\n          latency,\r\n          patchCount: 0\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update state\r\n    context.state.set(stateKey, actualNewValue);\r\n\r\n    // Update template state for template rendering\r\n    templateState.updateState(context.componentId, stateKey, actualNewValue);\r\n\r\n    // Re-render templates bound to this state\r\n    const boundTemplates = templateState.getTemplatesBoundTo(context.componentId, stateKey);\r\n    for (const template of boundTemplates) {\r\n      // Build node path from template path array\r\n      const nodePath = template.path.join('_');\r\n\r\n      // Render template with new value\r\n      const newText = templateState.render(context.componentId, nodePath);\r\n\r\n      if (newText !== null) {\r\n        // Find DOM element by path and update it\r\n        const element = findElementByPath(context.element, template.path);\r\n        if (element) {\r\n          if (element.nodeType === Node.TEXT_NODE) {\r\n            element.textContent = newText;\r\n          } else if (element instanceof HTMLElement) {\r\n            // For attribute templates\r\n            if (template.attribute) {\r\n              element.setAttribute(template.attribute, newText);\r\n            } else {\r\n              element.textContent = newText;\r\n            }\r\n          }\r\n\r\n          console.log(`[Minimact] 📋 Template updated: \"${newText}\" (${stateKey} changed)`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sync state to server to prevent stale data\r\n    context.signalR.updateComponentState(context.componentId, stateKey, actualNewValue)\r\n      .catch(err => {\r\n        console.error('[Minimact] Failed to sync state to server:', err);\r\n      });\r\n  };\r\n\r\n  // If value is an array, add array helpers\r\n  if (Array.isArray(currentValue)) {\r\n    return [currentValue, createArrayStateSetter(setState, currentValue, stateKey, context)] as any;\r\n  }\r\n\r\n  return [currentValue, setState];\r\n}\r\n\r\n/**\r\n * useEffect hook - runs side effects after render\r\n */\r\nexport function useEffect(callback: () => void | (() => void), deps?: any[]): void {\r\n  if (!currentContext) {\r\n    throw new Error('useEffect must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = effectIndex++;\r\n\r\n  // Get or create effect entry\r\n  if (!context.effects[index]) {\r\n    context.effects[index] = {\r\n      callback,\r\n      deps,\r\n      cleanup: undefined\r\n    };\r\n\r\n    // Run effect after render\r\n    queueMicrotask(() => {\r\n      const cleanup = callback();\r\n      if (typeof cleanup === 'function') {\r\n        context.effects[index].cleanup = cleanup;\r\n      }\r\n    });\r\n  } else {\r\n    const effect = context.effects[index];\r\n\r\n    // Check if deps changed\r\n    const depsChanged = !deps || !effect.deps ||\r\n      deps.length !== effect.deps.length ||\r\n      deps.some((dep, i) => dep !== effect.deps![i]);\r\n\r\n    if (depsChanged) {\r\n      // Run cleanup if exists\r\n      if (effect.cleanup) {\r\n        effect.cleanup();\r\n      }\r\n\r\n      // Update effect\r\n      effect.callback = callback;\r\n      effect.deps = deps;\r\n\r\n      // Run new effect\r\n      queueMicrotask(() => {\r\n        const cleanup = callback();\r\n        if (typeof cleanup === 'function') {\r\n          effect.cleanup = cleanup;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * useRef hook - creates a mutable ref object\r\n */\r\nexport function useRef<T>(initialValue: T): { current: T } {\r\n  if (!currentContext) {\r\n    throw new Error('useRef must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = refIndex++;\r\n  const refKey = `ref_${index}`;\r\n\r\n  // Initialize ref if not exists\r\n  if (!context.refs.has(refKey)) {\r\n    context.refs.set(refKey, { current: initialValue });\r\n  }\r\n\r\n  return context.refs.get(refKey)!;\r\n}\r\n\r\n/**\r\n * Cleanup all effects for a component\r\n */\r\nexport function cleanupEffects(context: ComponentContext): void {\r\n  for (const effect of context.effects) {\r\n    if (effect.cleanup) {\r\n      effect.cleanup();\r\n    }\r\n  }\r\n  context.effects = [];\r\n}\r\n\r\n/**\r\n * Array operation metadata for semantic state updates\r\n * @public\r\n */\r\nexport interface ArrayOperation {\r\n  type: 'Append' | 'Prepend' | 'InsertAt' | 'RemoveAt' | 'UpdateAt';\r\n  index?: number;\r\n  item?: any;\r\n}\r\n\r\n/**\r\n * Enhanced state setter with array helper methods\r\n */\r\nexport interface ArrayStateSetter<T> {\r\n  // Standard setter (for compatibility)\r\n  (newValue: T[] | ((prev: T[]) => T[])): void;\r\n\r\n  // Array operation helpers\r\n  append(item: T): void;\r\n  prepend(item: T): void;\r\n  insertAt(index: number, item: T): void;\r\n  removeAt(index: number): void;\r\n  updateAt(index: number, updates: Partial<T> | ((prev: T) => T)): void;\r\n  clear(): void;\r\n\r\n  // Batch operations\r\n  appendMany(items: T[]): void;\r\n  removeMany(indices: number[]): void;\r\n\r\n  // Conditional operations\r\n  removeWhere(predicate: (item: T) => boolean): void;\r\n  updateWhere(predicate: (item: T) => boolean, updates: Partial<T>): void;\r\n}\r\n\r\n/**\r\n * Create array state setter with semantic helper methods\r\n */\r\nfunction createArrayStateSetter<T>(\r\n  baseSetState: (value: T[]) => void,\r\n  currentArray: T[],\r\n  stateKey: string,\r\n  context: ComponentContext\r\n): ArrayStateSetter<T> {\r\n  // Base setter function\r\n  const setter: any = baseSetState;\r\n\r\n  // Append helper\r\n  setter.append = (item: T) => {\r\n    const newArray = [...currentArray, item];\r\n\r\n    // Update local state\r\n    context.state.set(stateKey, newArray);\r\n\r\n    // Update template state\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    // Notify server of APPEND operation (not just new array)\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Append', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array append to server:', err);\r\n    });\r\n\r\n    // TODO: Try to predict patch using loop template\r\n    console.log(`[Minimact] 🔵 Array append: ${stateKey}`, item);\r\n  };\r\n\r\n  // Prepend helper\r\n  setter.prepend = (item: T) => {\r\n    const newArray = [item, ...currentArray];\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Prepend', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array prepend to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array prepend: ${stateKey}`, item);\r\n  };\r\n\r\n  // InsertAt helper\r\n  setter.insertAt = (index: number, item: T) => {\r\n    const newArray = [...currentArray];\r\n    newArray.splice(index, 0, item);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'InsertAt', index, item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array insert to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array insertAt(${index}): ${stateKey}`, item);\r\n  };\r\n\r\n  // RemoveAt helper\r\n  setter.removeAt = (index: number) => {\r\n    const newArray = currentArray.filter((_, i) => i !== index);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'RemoveAt', index }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array remove to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array removeAt(${index}): ${stateKey}`);\r\n  };\r\n\r\n  // UpdateAt helper\r\n  setter.updateAt = (index: number, updates: Partial<T> | ((prev: T) => T)) => {\r\n    const newArray = [...currentArray];\r\n    newArray[index] = typeof updates === 'function'\r\n      ? (updates as (prev: T) => T)(currentArray[index])\r\n      : { ...currentArray[index] as any, ...updates };\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'UpdateAt', index, item: newArray[index] }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array update to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array updateAt(${index}): ${stateKey}`, newArray[index]);\r\n  };\r\n\r\n  // Clear helper\r\n  setter.clear = () => {\r\n    baseSetState([]);\r\n  };\r\n\r\n  // RemoveWhere helper\r\n  setter.removeWhere = (predicate: (item: T) => boolean) => {\r\n    const newArray = currentArray.filter(item => !predicate(item));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // UpdateWhere helper\r\n  setter.updateWhere = (predicate: (item: T) => boolean, updates: Partial<T>) => {\r\n    const newArray = currentArray.map(item =>\r\n      predicate(item) ? { ...item as any, ...updates } : item\r\n    );\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // AppendMany helper\r\n  setter.appendMany = (items: T[]) => {\r\n    const newArray = [...currentArray, ...items];\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // RemoveMany helper\r\n  setter.removeMany = (indices: number[]) => {\r\n    const newArray = currentArray.filter((_, i) => !indices.includes(i));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  return setter as ArrayStateSetter<T>;\r\n}\r\n\r\n/**\r\n * useServerTask - Execute long-running operations on the server with reactive client state\r\n *\r\n * @param taskFactory - Optional async function (will be transpiled to C# by Babel plugin)\r\n * @param options - Configuration options for the server task\r\n * @returns ServerTask interface with status, result, and control methods\r\n *\r\n * @example\r\n * const analysis = useServerTask(async () => {\r\n *   // This code runs on the SERVER (transpiled to C#)\r\n *   const data = await fetchData();\r\n *   return processData(data);\r\n * });\r\n *\r\n * // In JSX:\r\n * <button onClick={analysis.start}>Start</button>\r\n * {analysis.running && <Spinner />}\r\n * {analysis.complete && <div>{analysis.result}</div>}\r\n */\r\nexport function useServerTask<T>(\r\n  taskFactory?: () => Promise<T>,\r\n  options: ServerTaskOptions = {}\r\n): ServerTask<T> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerTask must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverTaskIndex++;\r\n  const taskKey = `serverTask_${index}`;\r\n\r\n  // Initialize serverTasks map if not exists\r\n  if (!context.serverTasks) {\r\n    context.serverTasks = new Map();\r\n  }\r\n\r\n  // Get or create server task instance\r\n  if (!context.serverTasks.has(taskKey)) {\r\n    const task = new ServerTaskImpl<T>(\r\n      taskKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      options\r\n    );\r\n\r\n    context.serverTasks.set(taskKey, task);\r\n  }\r\n\r\n  return context.serverTasks.get(taskKey)!;\r\n}\r\n\r\n/**\r\n * useServerReducer - React-like reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n *\r\n * @example\r\n * ```tsx\r\n * type CounterState = { count: number };\r\n * type CounterAction = { type: 'increment' } | { type: 'decrement' } | { type: 'set', value: number };\r\n *\r\n * const counter = useServerReducer<CounterState, CounterAction>({ count: 0 });\r\n *\r\n * // In JSX:\r\n * <button onClick={() => counter.dispatch({ type: 'increment' })}>+</button>\r\n * <span>{counter.state.count}</span>\r\n * <button onClick={() => counter.dispatch({ type: 'decrement' })}>-</button>\r\n * {counter.dispatching && <Spinner />}\r\n * {counter.error && <div>Error: {counter.error.message}</div>}\r\n * ```\r\n *\r\n * @example\r\n * ```tsx\r\n * // With async dispatch (await the result)\r\n * const handleReset = async () => {\r\n *   const newState = await counter.dispatchAsync({ type: 'set', value: 0 });\r\n *   console.log('Counter reset to:', newState.count);\r\n * };\r\n * ```\r\n */\r\nexport function useServerReducer<TState, TAction>(\r\n  initialState: TState\r\n): ServerReducer<TState, TAction> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerReducer must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverReducerIndex++;\r\n  const reducerKey = `serverReducer_${index}`;\r\n\r\n  // Initialize serverReducers map if not exists\r\n  if (!context.serverReducers) {\r\n    context.serverReducers = new Map();\r\n  }\r\n\r\n  // Get or create server reducer instance\r\n  if (!context.serverReducers.has(reducerKey)) {\r\n    const reducer = new ServerReducerImpl<TState, TAction>(\r\n      reducerKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      initialState\r\n    );\r\n\r\n    context.serverReducers.set(reducerKey, reducer);\r\n  }\r\n\r\n  return context.serverReducers.get(reducerKey)!;\r\n}\r\n","/**\r\n * useContext - Server-side cache system with multiple scope types\r\n *\r\n * This reimagines React's context API as a Redis-like in-memory cache\r\n * that enables shared state across components with flexible lifetime management.\r\n */\r\n\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface ContextOptions {\r\n  scope?: 'request' | 'session' | 'application' | 'url';\r\n  urlPattern?: string;\r\n  expiry?: number;\r\n  defaultValue?: any;\r\n}\r\n\r\nexport interface Context<T> {\r\n  key: string;\r\n  options: ContextOptions;\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\n\r\n/**\r\n * Set the current component context for hook execution\r\n * Called internally by Minimact before rendering\r\n */\r\nexport function setContextHookContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n}\r\n\r\n/**\r\n * Clear the current component context after rendering\r\n * Called internally by Minimact after rendering\r\n */\r\nexport function clearContextHookContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Create a context with specified scope and options\r\n *\r\n * @example\r\n * // Session-scoped user context\r\n * const UserContext = createContext<User>('current-user', {\r\n *   scope: 'session',\r\n *   expiry: 3600000 // 1 hour\r\n * });\r\n *\r\n * @example\r\n * // URL-scoped dashboard filters\r\n * const DashboardFilters = createContext<Filters>('dashboard-filters', {\r\n *   scope: 'url',\r\n *   urlPattern: '/dashboard/*',\r\n *   expiry: 3600000\r\n * });\r\n */\r\nexport function createContext<T>(\r\n  key: string,\r\n  options: ContextOptions = {}\r\n): Context<T> {\r\n  // Validate URL pattern if scope is 'url'\r\n  if (options.scope === 'url' && !options.urlPattern) {\r\n    throw new Error(`Context '${key}' with scope 'url' requires urlPattern`);\r\n  }\r\n\r\n  return {\r\n    key,\r\n    options: {\r\n      scope: options.scope || 'request',\r\n      urlPattern: options.urlPattern,\r\n      expiry: options.expiry,\r\n      defaultValue: options.defaultValue\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Use a context - returns [value, setValue, clearValue]\r\n *\r\n * Unlike React's useContext, this doesn't require a Provider component.\r\n * The context is stored server-side in a cache with the specified scope.\r\n *\r\n * @returns Tuple of [value, setValue, clearValue]\r\n *\r\n * @example\r\n * // Read and write to context\r\n * function LoginForm() {\r\n *   const [_, setUser] = useContext(UserContext);\r\n *\r\n *   const handleLogin = async (credentials) => {\r\n *     const user = await authenticate(credentials);\r\n *     setUser(user); // Stored in session-scoped cache\r\n *   };\r\n *\r\n *   return <form onSubmit={handleLogin}>...</form>;\r\n * }\r\n *\r\n * @example\r\n * // Read from context (different component, no parent-child relationship needed)\r\n * function UserProfile() {\r\n *   const [user] = useContext(UserContext);\r\n *\r\n *   if (!user) return <Login />;\r\n *   return <div>Welcome, {user.name}</div>;\r\n * }\r\n */\r\nexport function useContext<T>(\r\n  context: Context<T>\r\n): [T | undefined, (value: T) => void, () => void] {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useContext must be called within a component render');\r\n  }\r\n\r\n  const ctx = currentContext;\r\n  const stateKey = `context_${context.key}`;\r\n\r\n  // Get current value from component state (initialized from server)\r\n  let currentValue = ctx.state.get(stateKey) as T | undefined;\r\n\r\n  // If no value and has default, use default\r\n  if (currentValue === undefined && context.options.defaultValue !== undefined) {\r\n    currentValue = context.options.defaultValue;\r\n  }\r\n\r\n  // Setter - updates local state and syncs to server\r\n  const setContextValue = (newValue: T) => {\r\n    // Update local state immediately for instant feedback\r\n    ctx.state.set(stateKey, newValue);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: newValue\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('UpdateContext', {\r\n      key: context.key,\r\n      value: newValue,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern,\r\n      expiry: context.options.expiry\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to update context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  // Clear - removes value from cache\r\n  const clearContextValue = () => {\r\n    // Clear local state\r\n    ctx.state.set(stateKey, undefined);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: undefined\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('ClearContext', {\r\n      key: context.key,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to clear context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  return [currentValue, setContextValue, clearContextValue];\r\n}\r\n","/**\r\n * Client-side pub/sub event aggregator\r\n * Enables component-to-component communication without prop drilling\r\n */\r\n\r\nexport interface PubSubMessage<T = any> {\r\n  value: T;\r\n  error?: string;\r\n  waiting?: number;\r\n  source?: string;\r\n  timestamp: number;\r\n  isStale?: boolean;\r\n}\r\n\r\ntype Subscriber<T = any> = (message: PubSubMessage<T>) => void;\r\n\r\n/**\r\n * Global event aggregator for client-side pub/sub\r\n */\r\nclass EventAggregator {\r\n  private channels: Map<string, {\r\n    subscribers: Set<Subscriber>;\r\n    lastMessage: PubSubMessage | null;\r\n  }> = new Map();\r\n\r\n  private debugLogging: boolean = false;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a channel\r\n   */\r\n  subscribe<T = any>(\r\n    channel: string,\r\n    callback?: Subscriber<T>\r\n  ): PubSubMessage<T> {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    // Add callback if provided\r\n    if (callback) {\r\n      channelData.subscribers.add(callback as Subscriber);\r\n    }\r\n\r\n    // Return reactive message object\r\n    const message: PubSubMessage<T> = channelData.lastMessage || {\r\n      value: undefined as T,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.log(`Subscribed to '${channel}'`, { hasCallback: !!callback });\r\n\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a channel\r\n   */\r\n  unsubscribe(channel: string, callback: Subscriber): void {\r\n    const channelData = this.channels.get(channel);\r\n    if (channelData) {\r\n      channelData.subscribers.delete(callback);\r\n      this.log(`Unsubscribed from '${channel}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Publish a message to a channel\r\n   */\r\n  publish<T = any>(\r\n    channel: string,\r\n    value: T,\r\n    options: {\r\n      source?: string;\r\n      error?: string;\r\n      waiting?: number;\r\n    } = {}\r\n  ): void {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    const message: PubSubMessage<T> = {\r\n      value,\r\n      error: options.error,\r\n      waiting: options.waiting,\r\n      source: options.source,\r\n      timestamp: Date.now(),\r\n      isStale: false\r\n    };\r\n\r\n    // Update last message\r\n    channelData.lastMessage = message;\r\n\r\n    // Notify all subscribers\r\n    channelData.subscribers.forEach(subscriber => {\r\n      try {\r\n        subscriber(message);\r\n      } catch (error) {\r\n        console.error(`[Minimact PubSub] Error in subscriber for '${channel}':`, error);\r\n      }\r\n    });\r\n\r\n    this.log(`Published to '${channel}'`, {\r\n      subscribers: channelData.subscribers.size,\r\n      value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear a channel\r\n   */\r\n  clear(channel: string): void {\r\n    this.channels.delete(channel);\r\n    this.log(`Cleared channel '${channel}'`);\r\n  }\r\n\r\n  /**\r\n   * Clear all channels\r\n   */\r\n  clearAll(): void {\r\n    this.channels.clear();\r\n    this.log('Cleared all channels');\r\n  }\r\n\r\n  /**\r\n   * Get stats\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalChannels: this.channels.size,\r\n      channels: Array.from(this.channels.entries()).map(([name, data]) => ({\r\n        name,\r\n        subscribers: data.subscribers.size,\r\n        hasLastMessage: !!data.lastMessage\r\n      }))\r\n    };\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PubSub] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Global singleton instance\r\nlet globalAggregator: EventAggregator | null = null;\r\n\r\nexport function getEventAggregator(options?: { debugLogging?: boolean }): EventAggregator {\r\n  if (!globalAggregator) {\r\n    globalAggregator = new EventAggregator(options);\r\n  }\r\n  return globalAggregator;\r\n}\r\n\r\n/**\r\n * Hook: usePub - Publish to a channel\r\n */\r\nexport function usePub<T = any>(channel: string): (value: T, options?: {\r\n  source?: string;\r\n  error?: string;\r\n  waiting?: number;\r\n}) => void {\r\n  const aggregator = getEventAggregator();\r\n\r\n  return (value: T, options = {}) => {\r\n    aggregator.publish(channel, value, options);\r\n  };\r\n}\r\n\r\n/**\r\n * Hook: useSub - Subscribe to a channel\r\n */\r\nexport function useSub<T = any>(\r\n  channel: string,\r\n  callback?: (message: PubSubMessage<T>) => void\r\n): PubSubMessage<T> {\r\n  const aggregator = getEventAggregator();\r\n\r\n  // Subscribe and return reactive message object\r\n  const message = aggregator.subscribe<T>(channel, callback);\r\n\r\n  // TODO: Integrate with component lifecycle for auto-unsubscribe\r\n  // For now, developers must manually unsubscribe or we rely on component unmount\r\n\r\n  return message;\r\n}\r\n","import { SignalRManager } from './signalr-manager';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { ClientStateManager } from './client-state';\r\nimport { EventDelegation } from './event-delegation';\r\nimport { HydrationManager } from './hydration';\r\nimport { HintQueue } from './hint-queue';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { HotReloadManager } from './hot-reload';\r\nimport * as ClientComputed from './client-computed';\r\nimport { MinimactOptions, Patch } from './types';\r\n\r\n/**\r\n * Main Minimact client runtime\r\n * Orchestrates SignalR, DOM patching, state management, and hydration\r\n */\r\nexport class Minimact {\r\n  private signalR: SignalRManager;\r\n  private domPatcher: DOMPatcher;\r\n  private clientState: ClientStateManager;\r\n  private hydration: HydrationManager;\r\n  private hintQueue: HintQueue;\r\n  private playgroundBridge: PlaygroundBridge;\r\n  private eventDelegation: EventDelegation | null = null;\r\n  private options: Required<MinimactOptions>;\r\n  private rootElement: HTMLElement;\r\n\r\n  constructor(rootElement: HTMLElement | string = document.body, options: MinimactOptions = {}) {\r\n    // Resolve root element\r\n    if (typeof rootElement === 'string') {\r\n      const element = document.querySelector(rootElement);\r\n      if (!element) {\r\n        throw new Error(`[Minimact] Root element not found: ${rootElement}`);\r\n      }\r\n      this.rootElement = element as HTMLElement;\r\n    } else {\r\n      this.rootElement = rootElement;\r\n    }\r\n\r\n    // Default options\r\n    this.options = {\r\n      hubUrl: options.hubUrl || '/minimact',\r\n      enableDebugLogging: options.enableDebugLogging || false,\r\n      reconnectInterval: options.reconnectInterval || 5000\r\n    };\r\n\r\n    // Initialize subsystems\r\n    this.signalR = new SignalRManager(this.options.hubUrl, {\r\n      reconnectInterval: this.options.reconnectInterval,\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.domPatcher = new DOMPatcher({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.clientState = new ClientStateManager({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hydration = new HydrationManager(this.clientState, {\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hintQueue = new HintQueue({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.playgroundBridge = new PlaygroundBridge({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    // Enable debug logging for client-computed module\r\n    ClientComputed.setDebugLogging(this.options.enableDebugLogging);\r\n\r\n    this.setupSignalRHandlers();\r\n    this.log('Minimact initialized', { rootElement: this.rootElement, options: this.options });\r\n  }\r\n\r\n  /**\r\n   * Start the Minimact runtime\r\n   */\r\n  async start(): Promise<void> {\r\n    // Connect to SignalR hub\r\n    await this.signalR.start();\r\n\r\n    // Hydrate all components\r\n    this.hydration.hydrateAll();\r\n\r\n    // Setup event delegation\r\n    this.eventDelegation = new EventDelegation(\r\n      this.rootElement,\r\n      (componentId, methodName, args) => this.signalR.invokeComponentMethod(componentId, methodName, args),\r\n      { debugLogging: this.options.enableDebugLogging }\r\n    );\r\n\r\n    // Register all components with server\r\n    await this.registerAllComponents();\r\n\r\n    this.log('Minimact started');\r\n  }\r\n\r\n  /**\r\n   * Stop the Minimact runtime\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (this.eventDelegation) {\r\n      this.eventDelegation.destroy();\r\n      this.eventDelegation = null;\r\n    }\r\n\r\n    await this.signalR.stop();\r\n\r\n    this.log('Minimact stopped');\r\n  }\r\n\r\n  /**\r\n   * Setup SignalR event handlers\r\n   */\r\n  private setupSignalRHandlers(): void {\r\n    // Handle full HTML updates\r\n    this.signalR.on('updateComponent', ({ componentId, html }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.replaceHTML(component.element, html);\r\n        this.log('Component HTML updated', { componentId });\r\n      }\r\n    });\r\n\r\n    // Handle patch updates\r\n    this.signalR.on('applyPatches', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Patches applied', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle predicted patches (instant UI updates!)\r\n    this.signalR.on('applyPrediction', ({ componentId, patches, confidence }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log(`Prediction applied (${(confidence * 100).toFixed(0)}% confident)`, { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle corrections if prediction was wrong\r\n    this.signalR.on('applyCorrection', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Correction applied (prediction was incorrect)', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.signalR.on('queueHint', (data) => {\r\n      this.hintQueue.queueHint(data);\r\n      this.log(`Hint '${data.hintId}' queued for component ${data.componentId}`, {\r\n        patchCount: data.patches.length,\r\n        confidence: (data.confidence * 100).toFixed(0) + '%'\r\n      });\r\n\r\n      // Notify playground that prediction was received\r\n      this.playgroundBridge.predictionReceived({\r\n        componentId: data.componentId,\r\n        hintId: data.hintId,\r\n        patchCount: data.patches.length,\r\n        confidence: data.confidence\r\n      });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.signalR.on('reconnected', async () => {\r\n      this.log('Reconnected - re-registering components');\r\n      await this.registerAllComponents();\r\n    });\r\n\r\n    // Handle errors\r\n    this.signalR.on('error', ({ message }) => {\r\n      console.error('[Minimact] Server error:', message);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register all components with the server\r\n   */\r\n  private async registerAllComponents(): Promise<void> {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    for (const element of Array.from(components)) {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        try {\r\n          await this.signalR.registerComponent(componentId);\r\n          this.log('Registered component', { componentId });\r\n        } catch (error) {\r\n          console.error('[Minimact] Failed to register component:', componentId, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually hydrate a component\r\n   */\r\n  hydrateComponent(componentId: string, element: HTMLElement): void {\r\n    this.hydration.hydrateComponent(componentId, element);\r\n  }\r\n\r\n  /**\r\n   * Get component by ID (for hot reload)\r\n   */\r\n  getComponent(componentId: string): any {\r\n    return this.hydration.getComponent(componentId);\r\n  }\r\n\r\n  /**\r\n   * Get client state for a component\r\n   */\r\n  getClientState(componentId: string, key: string): any {\r\n    return this.clientState.getState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Set client state for a component\r\n   */\r\n  setClientState(componentId: string, key: string, value: any): void {\r\n    this.clientState.setState(componentId, key, value);\r\n\r\n    // Recompute client-computed variables that depend on this state\r\n    this.recomputeAndSyncClientState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to client state changes\r\n   */\r\n  subscribeToState(componentId: string, key: string, callback: (value: any) => void): () => void {\r\n    return this.clientState.subscribe(componentId, key, callback);\r\n  }\r\n\r\n  /**\r\n   * Recompute client-computed variables after state change and sync to server\r\n   */\r\n  private async recomputeAndSyncClientState(componentId: string, changedStateKey?: string): Promise<void> {\r\n    // Check if component has any client-computed variables\r\n    if (!ClientComputed.hasClientComputed(componentId)) {\r\n      return;\r\n    }\r\n\r\n    // Compute affected variables\r\n    const computed = changedStateKey\r\n      ? ClientComputed.computeDependentVariables(componentId, changedStateKey)\r\n      : ClientComputed.computeAllForComponent(componentId);\r\n\r\n    // If there are computed values, send to server\r\n    if (Object.keys(computed).length > 0) {\r\n      try {\r\n        await this.signalR.updateClientComputedState(componentId, computed);\r\n        this.log('Client-computed state synced', { componentId, computed });\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to sync client-computed state:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection state\r\n   */\r\n  get connectionState(): string {\r\n    return this.signalR.state.toString();\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection ID\r\n   */\r\n  get connectionId(): string | null {\r\n    return this.signalR.connectionId;\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.options.enableDebugLogging) {\r\n      console.log(`[Minimact] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Export all types and classes for advanced usage\r\nexport { SignalRManager } from './signalr-manager';\r\nexport { DOMPatcher } from './dom-patcher';\r\nexport { ClientStateManager } from './client-state';\r\nexport { EventDelegation } from './event-delegation';\r\nexport { HydrationManager } from './hydration';\r\nexport { HintQueue } from './hint-queue';\r\n\r\n// Client-computed state (for external libraries)\r\nexport {\r\n  registerClientComputed,\r\n  computeVariable,\r\n  computeAllForComponent,\r\n  computeDependentVariables,\r\n  getLastValue,\r\n  getAllLastValues,\r\n  hasClientComputed,\r\n  getComputedVariableNames,\r\n  clearComponent as clearClientComputedComponent,\r\n  getDebugInfo as getClientComputedDebugInfo\r\n} from './client-computed';\r\n\r\n// Template state (for hot reload)\r\nexport { TemplateStateManager, templateState } from './template-state';\r\nexport type { Template, TemplateMap } from './template-state';\r\n\r\n// Template renderer (for runtime prediction)\r\nexport { TemplateRenderer } from './template-renderer';\r\n\r\n// Core hooks\r\nexport { useState, useEffect, useRef, useServerTask, setComponentContext, clearComponentContext } from './hooks';\r\nexport type { ComponentContext } from './hooks';\r\n\r\n// useComputed hook (for client-side computation with browser APIs/libraries)\r\nexport { useComputed } from './useComputed';\r\nexport type { UseComputedOptions } from './useComputed';\r\n\r\n// Context hooks\r\nexport { createContext, useContext, setContextHookContext, clearContextHookContext } from './useContext';\r\nexport type { Context, ContextOptions } from './useContext';\r\n\r\n// Server task types\r\nexport type { ServerTask, ServerTaskOptions, ServerTaskStatus } from './server-task';\r\n\r\n// Paginated server task\r\nexport { usePaginatedServerTask } from './usePaginatedServerTask';\r\nexport type { PaginatedServerTask, PaginatedServerTaskOptions, PaginationParams } from './usePaginatedServerTask';\r\n\r\n// Pub/Sub hooks\r\nexport { usePub, useSub } from './pub-sub';\r\nexport type { PubSubMessage } from './pub-sub';\r\n\r\n// Task scheduling hooks\r\nexport { useMicroTask, useMacroTask, useAnimationFrame, useIdleCallback } from './task-scheduling';\r\n\r\n// SignalR hook\r\nexport { useSignalR } from './signalr-hook';\r\nexport type { SignalRHookState } from './signalr-hook';\r\n\r\n// Types\r\nexport * from './types';\r\n\r\n// Auto-initialize if data-minimact-auto-init is present\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n        const minimact = new Minimact(document.body, {\r\n          enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n        });\r\n        minimact.start().catch(console.error);\r\n        (window as any).minimact = minimact;\r\n      }\r\n    });\r\n  } else {\r\n    if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n      const minimact = new Minimact(document.body, {\r\n        enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n      });\r\n      minimact.start().catch(console.error);\r\n      (window as any).minimact = minimact;\r\n    }\r\n  }\r\n}\r\n\r\n// Make available globally\r\nif (typeof window !== 'undefined') {\r\n  (window as any).Minimact = Minimact;\r\n}\r\n\r\nexport default Minimact;\r\n","/**\r\n * Task scheduling hooks for fine-grained render timing control\r\n * useMicroTask - runs before paint (microtask queue)\r\n * useMacroTask - runs after paint (task queue)\r\n */\r\n\r\n/**\r\n * Hook: useMicroTask\r\n * Schedules a callback to run in the microtask queue (before next paint)\r\n * Perfect for: DOM measurements, layout calculations, critical updates\r\n */\r\nexport function useMicroTask(callback: () => void): void {\r\n  queueMicrotask(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMicroTask] Error in microtask:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Hook: useMacroTask\r\n * Schedules a callback to run in the task queue (after paint)\r\n * Perfect for: Analytics, logging, non-critical updates, deferred work\r\n */\r\nexport function useMacroTask(callback: () => void, delay: number = 0): void {\r\n  setTimeout(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMacroTask] Error in macrotask:', error);\r\n    }\r\n  }, delay);\r\n}\r\n\r\n/**\r\n * Hook: useAnimationFrame\r\n * Schedules a callback for the next animation frame\r\n * Perfect for: Animations, visual updates, smooth transitions\r\n */\r\nexport function useAnimationFrame(callback: (timestamp: number) => void): number {\r\n  const rafId = requestAnimationFrame((timestamp) => {\r\n    try {\r\n      callback(timestamp);\r\n    } catch (error) {\r\n      console.error('[Minimact useAnimationFrame] Error in animation frame:', error);\r\n    }\r\n  });\r\n\r\n  return rafId;\r\n}\r\n\r\n/**\r\n * Hook: useIdleCallback\r\n * Schedules a callback for when the browser is idle\r\n * Perfect for: Low-priority work, background tasks, optimization\r\n */\r\nexport function useIdleCallback(\r\n  callback: (deadline: IdleDeadline) => void,\r\n  options?: IdleRequestOptions\r\n): number {\r\n  if ('requestIdleCallback' in window) {\r\n    return requestIdleCallback((deadline) => {\r\n      try {\r\n        callback(deadline);\r\n      } catch (error) {\r\n        console.error('[Minimact useIdleCallback] Error in idle callback:', error);\r\n      }\r\n    }, options);\r\n  } else {\r\n    // Fallback to setTimeout for browsers without requestIdleCallback\r\n    return setTimeout(() => {\r\n      const deadline: IdleDeadline = {\r\n        didTimeout: false,\r\n        timeRemaining: () => 50\r\n      };\r\n      callback(deadline);\r\n    }, 1) as unknown as number;\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an animation frame\r\n */\r\nexport function cancelAnimationFrame(id: number): void {\r\n  window.cancelAnimationFrame(id);\r\n}\r\n\r\n/**\r\n * Cancel an idle callback\r\n */\r\nexport function cancelIdleCallback(id: number): void {\r\n  if ('cancelIdleCallback' in window) {\r\n    window.cancelIdleCallback(id);\r\n  } else {\r\n    clearTimeout(id);\r\n  }\r\n}\r\n","/**\r\n * usePaginatedServerTask - Pagination built on useServerTask\r\n *\r\n * Extends the existing useServerTask infrastructure to add pagination capabilities.\r\n * Reuses transpilers, FFI bridge, and task runtime for zero additional complexity.\r\n */\r\n\r\nimport { useServerTask } from './hooks';\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport { ServerTaskOptions } from './server-task';\r\n\r\n/**\r\n * Pagination parameters passed to the fetch function\r\n */\r\nexport interface PaginationParams<TFilter = any> {\r\n  page: number;\r\n  pageSize: number;\r\n  filters: TFilter;\r\n}\r\n\r\n/**\r\n * Options for configuring a paginated server task\r\n */\r\nexport interface PaginatedServerTaskOptions<T, TFilter = any> {\r\n  /** Number of items per page (default: 20) */\r\n  pageSize?: number;\r\n\r\n  /** Function to get total count (for calculating total pages) */\r\n  getTotalCount: (filters: TFilter) => Promise<number>;\r\n\r\n  /** Enable automatic prefetching of next page (default: false) */\r\n  prefetchNext?: boolean;\r\n\r\n  /** Enable automatic prefetching of previous page (default: false) */\r\n  prefetchPrev?: boolean;\r\n\r\n  /** Dependencies that trigger re-fetch when changed */\r\n  dependencies?: any[];\r\n\r\n  /** Runtime selection: 'csharp' or 'rust' (inherited from useServerTask) */\r\n  runtime?: 'csharp' | 'rust';\r\n\r\n  /** Enable parallel execution (for Rust runtime with Rayon) */\r\n  parallel?: boolean;\r\n}\r\n\r\n/**\r\n * Paginated server task result\r\n */\r\nexport interface PaginatedServerTask<T> {\r\n  // Data\r\n  items: T[];\r\n  total: number;\r\n  totalPages: number;\r\n\r\n  // State\r\n  page: number;\r\n  pageSize: number;\r\n  pending: boolean;\r\n  error?: string;\r\n\r\n  // Navigation\r\n  hasNext: boolean;\r\n  hasPrev: boolean;\r\n  next: () => void;\r\n  prev: () => void;\r\n  goto: (page: number) => void;\r\n  refresh: () => void;\r\n\r\n  // Advanced: Access to underlying tasks\r\n  _fetchTask: any;\r\n  _countTask: any;\r\n}\r\n\r\n/**\r\n * usePaginatedServerTask Hook\r\n *\r\n * Wraps useServerTask to provide pagination with intelligent prefetching.\r\n *\r\n * @example\r\n * const users = usePaginatedServerTask(\r\n *   async ({ page, pageSize, filters }) => {\r\n *     return await db.users\r\n *       .where(u => filters.role ? u.role === filters.role : true)\r\n *       .skip((page - 1) * pageSize)\r\n *       .take(pageSize)\r\n *       .toList();\r\n *   },\r\n *   {\r\n *     pageSize: 20,\r\n *     getTotalCount: async (filters) => {\r\n *       return await db.users\r\n *         .where(u => filters.role ? u.role === filters.role : true)\r\n *         .count();\r\n *     },\r\n *     prefetchNext: true,\r\n *     dependencies: [filters]\r\n *   }\r\n * );\r\n */\r\nexport function usePaginatedServerTask<T, TFilter = any>(\r\n  fetchFn: (params: PaginationParams<TFilter>) => Promise<T[]>,\r\n  options: PaginatedServerTaskOptions<T, TFilter>\r\n): PaginatedServerTask<T> {\r\n  const pageSize = options.pageSize || 20;\r\n\r\n  // State\r\n  const [page, setPage] = useState(1);\r\n  const [items, setItems] = useState<T[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Prefetch cache\r\n  const prefetchCache = useRef<Map<number, T[]>>(new Map());\r\n\r\n  // Last args (for retry)\r\n  const lastArgs = useRef<any[]>([]);\r\n\r\n  // Build current filters from dependencies\r\n  const filters = buildFilters(options.dependencies);\r\n\r\n  // ✅ Reuse useServerTask for fetch logic!\r\n  // Note: The actual function is passed via Babel transpilation\r\n  // At runtime, we just get a task instance and call .start(args)\r\n  const fetchTask = useServerTask<T[]>(\r\n    undefined, // Function extracted by Babel plugin\r\n    {\r\n      runtime: options.runtime,\r\n      parallel: options.parallel\r\n    } as ServerTaskOptions\r\n  );\r\n\r\n  // ✅ Reuse useServerTask for count query!\r\n  const countTask = useServerTask<number>(\r\n    undefined, // Function extracted by Babel plugin\r\n    { runtime: options.runtime } as ServerTaskOptions\r\n  );\r\n\r\n  /**\r\n   * Fetch a specific page\r\n   */\r\n  const fetchPage = async (targetPage: number, fromCache = true) => {\r\n    // Check prefetch cache\r\n    if (fromCache && prefetchCache.current.has(targetPage)) {\r\n      const cached = prefetchCache.current.get(targetPage)!;\r\n      setItems(cached);\r\n      setPage(targetPage);\r\n      prefetchCache.current.delete(targetPage);\r\n\r\n      console.log(`[usePaginatedServerTask] 🟢 Cache hit for page ${targetPage}`);\r\n\r\n      // Trigger next prefetch\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Fetch from server via useServerTask\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    lastArgs.current = [args];\r\n\r\n    fetchTask.start(args);\r\n\r\n    // Wait for completion (using promise)\r\n    try {\r\n      const result = await fetchTask.promise;\r\n\r\n      setItems(result as T[]);\r\n      setPage(targetPage);\r\n      setError(null);\r\n\r\n      console.log(`[usePaginatedServerTask] 🔴 Fetched page ${targetPage} from server`);\r\n\r\n      // Prefetch adjacent pages if configured\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch page');\r\n      console.error(`[usePaginatedServerTask] Error fetching page ${targetPage}:`, err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Prefetch in background (non-blocking)\r\n   */\r\n  const prefetchInBackground = async (targetPage: number) => {\r\n    if (prefetchCache.current.has(targetPage)) {\r\n      return; // Already cached\r\n    }\r\n\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    // Create a separate task instance for prefetching\r\n    // Note: This will be optimized later to reuse task instances\r\n    fetchTask.start(args);\r\n\r\n    try {\r\n      const result = await fetchTask.promise;\r\n      prefetchCache.current.set(targetPage, result as T[]);\r\n      console.log(`[usePaginatedServerTask] ⚡ Prefetched page ${targetPage}`);\r\n    } catch (err) {\r\n      console.error(`[usePaginatedServerTask] Prefetch failed for page ${targetPage}:`, err);\r\n      // Silently fail - prefetch is optional\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get total count on mount and when filters change\r\n   */\r\n  useEffect(() => {\r\n    countTask.start(filters);\r\n\r\n    countTask.promise.then((count) => {\r\n      setTotal(count as number);\r\n    }).catch((err) => {\r\n      console.error('[usePaginatedServerTask] Failed to get total count:', err);\r\n    });\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  /**\r\n   * Initial fetch\r\n   */\r\n  useEffect(() => {\r\n    fetchPage(1, false);\r\n  }, []);\r\n\r\n  /**\r\n   * Re-fetch when dependencies change\r\n   */\r\n  useEffect(() => {\r\n    if (options.dependencies && options.dependencies.length > 0) {\r\n      prefetchCache.current.clear();\r\n      fetchPage(1, false);\r\n    }\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  // Computed properties\r\n  const totalPages = Math.ceil(total / pageSize);\r\n  const hasNext = page < totalPages;\r\n  const hasPrev = page > 1;\r\n\r\n  // Navigation methods\r\n  const next = () => {\r\n    if (hasNext) {\r\n      fetchPage(page + 1);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    if (hasPrev) {\r\n      fetchPage(page - 1);\r\n    }\r\n  };\r\n\r\n  const goto = (targetPage: number) => {\r\n    if (targetPage >= 1 && targetPage <= totalPages) {\r\n      fetchPage(targetPage);\r\n    }\r\n  };\r\n\r\n  const refresh = () => {\r\n    prefetchCache.current.clear();\r\n    fetchPage(page, false);\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    items,\r\n    total,\r\n    totalPages,\r\n\r\n    // State\r\n    page,\r\n    pageSize,\r\n    pending: fetchTask.status === 'running',\r\n    error: error || fetchTask.error?.message,\r\n\r\n    // Navigation\r\n    hasNext,\r\n    hasPrev,\r\n    next,\r\n    prev,\r\n    goto,\r\n    refresh,\r\n\r\n    // ✅ Expose underlying tasks for advanced use\r\n    _fetchTask: fetchTask,\r\n    _countTask: countTask\r\n  };\r\n}\r\n\r\n/**\r\n * Helper: Build filters object from dependencies array\r\n */\r\nfunction buildFilters(dependencies?: any[]): any {\r\n  if (!dependencies || dependencies.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // If single object, use as-is\r\n  if (dependencies.length === 1 && typeof dependencies[0] === 'object') {\r\n    return dependencies[0];\r\n  }\r\n\r\n  // Otherwise, create indexed object\r\n  return dependencies.reduce((acc, dep, i) => {\r\n    acc[`dep${i}`] = dep;\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n","import { SignalRManager } from './signalr-manager';\r\n\r\n/**\r\n * SignalR hook state\r\n */\r\nexport interface SignalRHookState<T = any> {\r\n  data: T | null;\r\n  error: string | null;\r\n  connected: boolean;\r\n  connectionId: string | null;\r\n}\r\n\r\n/**\r\n * Hook: useSignalR\r\n * Connects to a SignalR hub and provides real-time updates\r\n *\r\n * Usage:\r\n * const notifications = useSignalR('/hubs/notifications', (message) => {\r\n *   console.log('New notification:', message);\r\n * });\r\n */\r\nexport function useSignalR<T = any>(\r\n  hubUrl: string,\r\n  onMessage?: (data: T) => void,\r\n  options: {\r\n    reconnectInterval?: number;\r\n    debugLogging?: boolean;\r\n    autoConnect?: boolean;\r\n  } = {}\r\n): {\r\n  state: SignalRHookState<T>;\r\n  send: (methodName: string, ...args: any[]) => Promise<void>;\r\n  on: (methodName: string, handler: (...args: any[]) => void) => void;\r\n  off: (methodName: string, handler: (...args: any[]) => void) => void;\r\n  connect: () => Promise<void>;\r\n  disconnect: () => Promise<void>;\r\n} {\r\n  // Create SignalR manager for this hub\r\n  const manager = new SignalRManager(hubUrl, {\r\n    reconnectInterval: options.reconnectInterval,\r\n    debugLogging: options.debugLogging\r\n  });\r\n\r\n  // Initialize state\r\n  const state: SignalRHookState<T> = {\r\n    data: null,\r\n    error: null,\r\n    connected: false,\r\n    connectionId: null\r\n  };\r\n\r\n  // Setup event handlers\r\n  manager.on('connected', ({ connectionId }) => {\r\n    state.connected = true;\r\n    state.connectionId = connectionId || null;\r\n    state.error = null;\r\n  });\r\n\r\n  manager.on('reconnected', ({ connectionId }) => {\r\n    state.connected = true;\r\n    state.connectionId = connectionId || null;\r\n    state.error = null;\r\n  });\r\n\r\n  manager.on('closed', ({ error }) => {\r\n    state.connected = false;\r\n    state.connectionId = null;\r\n    if (error) {\r\n      state.error = error.toString();\r\n    }\r\n  });\r\n\r\n  manager.on('error', ({ message }) => {\r\n    state.error = message;\r\n  });\r\n\r\n  // Setup message handler if provided\r\n  if (onMessage) {\r\n    manager.on('message', (data: T) => {\r\n      state.data = data;\r\n      onMessage(data);\r\n    });\r\n  }\r\n\r\n  // Auto-connect if enabled (default: true)\r\n  if (options.autoConnect !== false) {\r\n    manager.start().catch(error => {\r\n      state.error = error.message;\r\n      console.error('[Minimact useSignalR] Auto-connect failed:', error);\r\n    });\r\n  }\r\n\r\n  return {\r\n    state,\r\n    send: async (methodName: string, ...args: any[]) => {\r\n      try {\r\n        await manager.connection.invoke(methodName, ...args);\r\n      } catch (error: any) {\r\n        state.error = error.message;\r\n        throw error;\r\n      }\r\n    },\r\n    on: (methodName: string, handler: (...args: any[]) => void) => {\r\n      manager.connection.on(methodName, handler);\r\n    },\r\n    off: (methodName: string, handler: (...args: any[]) => void) => {\r\n      manager.connection.off(methodName, handler);\r\n    },\r\n    connect: async () => {\r\n      await manager.start();\r\n    },\r\n    disconnect: async () => {\r\n      await manager.stop();\r\n    }\r\n  };\r\n}\r\n"],"names":["HttpError","Error","constructor","errorMessage","statusCode","trueProto","prototype","super","this","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","get","url","options","send","method","post","getCookieString","LogLevel","MessageType","HubConnectionState","NullLogger","log","_logLevel","_message","instance","Arg","isRequired","val","name","isNotEmpty","match","isIn","values","Platform","isBrowser","isNode","window","document","isWebWorker","self","isReactNative","process","release","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","headers","value","getUserAgentHeader","Trace","logMessageContent","responseType","response","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","platform","versions","node","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__webpack_require__","__non_webpack_require__","require","_jar","CookieJar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","undefined","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","c","join","arrayBuffer","text","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","Object","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","TextMessageFormat","write","output","RecordSeparator","parse","input","messages","pop","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","call","buffer","textData","substring","type","Subject","next","item","err","complete","subscribe","push","MessageBuffer","protocol","connection","bufferSize","_bufferSize","_messages","_totalMessageCount","_waitForSequenceMessage","_nextReceivingSequenceId","_latestReceivedSequenceId","_bufferedByteCount","_reconnectInProgress","_protocol","_connection","_send","serializedMessage","writeMessage","backpressurePromise","_isInvocationMessage","backpressurePromiseResolver","backpressurePromiseRejector","BufferedItem","_disconnected","_ack","ackMessage","newestAckedMessage","element","_id","sequenceId","_resolver","_shouldProcessMessage","Sequence","currentId","_ackTimer","_resetSequence","stop","_resend","_dispose","_rejector","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Close","Ping","Ack","_ackTimerHandle","id","resolver","rejector","HubConnection","create","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","statefulReconnectBufferSize","_nextKeepAlive","_freezeEventListener","_statefulReconnectBufferSize","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","state","connectionId","baseUrl","Reconnecting","start","_startPromise","_startWithStateTransitions","Connecting","Debug","_startInternal","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","transferFormat","features","reconnect","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_messageBuffer","disconnected","resend","inherentKeepAlive","_cleanupPingTimer","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","_completeClose","_sendCloseMessage","_sendWithProtocol","_createCloseMessage","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","invocationEvent","_launchStreams","sendPromise","_createInvocation","invoke","result","on","newMethod","toLowerCase","off","handlers","removeIdx","callback","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","_invokeClientMethod","allowReconnect","responseMessage","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","target","methods","_createCompletionMessage","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","key","nonblocking","streamId","_createStreamItemMessage","i","argument","_isObservable","arg","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","Authorization","Cookie","AccessTokenHttpClient","innerClient","accessTokenFactory","_innerClient","_accessTokenFactory","allowRetry","_accessToken","_setAuthorizationHeader","HttpTransportType","TransferFormat","AbortController$1","_isAborted","LongPollingTransport","pollAborted","_pollAbort","_options","_running","connect","_url","Binary","pollOptions","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","accessToken","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","useStatefulReconnect","_useStatefulReconnect","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","ServerSentEvents","LongPolling","callStop","actualTransport","transportMatches","transferFormats","map","s","lastIndexOf","aTag","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","search","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","offset","set","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isStreamItemMessage","_isCompletionMessage","_isAckMessage","_isSequenceMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","build","SignalRManager","hubUrl","reconnectInterval","debugLogging","eventHandlers","Map","setupEventHandlers","componentId","html","emit","patches","confidence","toFixed","hintId","registerComponent","invokeComponentMethod","argsJson","updateClientState","valueJson","updateClientComputedState","computedValues","updateComponentState","stateKey","updateDomElementState","snapshot","updateComponentStateWithOperation","newValue","operation","updateQueryResults","queryKey","results","resultCount","handler","Set","add","DOMPatcher","applyPatches","rootElement","count","patch","applyPatch","targetElement","getElementByPath","path","patchCreate","patchRemove","patchReplace","patchUpdateText","patchUpdateProps","props","patchReorderChildren","order","newElement","createElementFromVNode","innerHTML","appendChild","parentPath","parent","childNodes","insertBefore","parentNode","removeChild","oldElement","newNode","replaceChild","nodeType","Node","TEXT_NODE","textContent","oldAttrs","from","attributes","attr","startsWith","removeAttribute","entries","setAttribute","className","keyedChildren","child","HTMLElement","getAttribute","currentChild","current","vnode","createTextNode","velem","tag","children","fragment","createDocumentFragment","vfrag","div","replaceHTML","ClientStateManager","states","subscribers","initializeComponent","initialState","getState","componentState","setState","oldValue","notifySubscribers","componentSubscribers","keySubscribers","getComponentState","updateState","updates","clearComponent","bindToElement","property","initialValue","updateElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","bindInput","inputHandler","unsubscribe","EventDelegation","componentMethodInvoker","hintQueue","domPatcher","playgroundBridge","eventListeners","setupEventDelegation","eventTypes","eventType","listener","createEventListener","handlerElement","findHandlerElement","getEventHandler","preventDefault","executeHandler","attrName","legacyAttrName","hasAttribute","parentElement","handlerStr","parts","findComponentId","startTime","performance","argsObj","MouseEvent","mouse","clientX","clientY","button","KeyboardEvent","keyboard","ctrlKey","shiftKey","altKey","matchedHint","tryMatchHint","componentElement","findComponentElement","latency","cacheHit","patchCount","cacheMiss","querySelector","destroy","clear","HydrationManager","clientState","components","hydrateComponent","firstElementChild","metadata","serverState","hydrateClientZones","bindStateElements","clientZones","querySelectorAll","zone","stateName","getInitialValue","boundElements","elem","bindKey","isClientScope","isInClientScope","bindProperty","determineBindProperty","checked","valueAsNumber","dehydrateComponent","getComponent","updateServerState","hydrateAll","TemplateRenderer","renderTemplate","template","params","param","placeholder","formatValue","renderTemplatePatch","templatePatch","stateValues","conditionalTemplates","conditionalBindingIndex","bindingIndex","conditionBinding","bindings","conditionKey","conditionValue","conditionalTemplate","includes","binding","transform","applyTransform","materializePatch","propName","vnodes","renderLoopTemplate","loopTemplate","convertLoopToPatches","materializePatches","materialized","decimals","parseInt","Number","multiplier","parseFloat","divisor","addend","subtrahend","toUpperCase","trim","v","isTemplatePatch","extractBindings","validateBindings","every","getMissingBindings","filter","array","array_binding","itemState","index_var","flattenedState","flattenItemState","renderItemTemplate","item_template","flattened","itemTemplate","template_patch","props_templates","propTemplate","children_templates","childTemplate","key_binding","HintQueue","hints","maxHintAge","queueHint","isTemplate","some","queuedAt","patchType","cleanupStaleHints","matchHint","stateChanges","componentHints","hint","stateMatches","predictedState","materializedPatches","predicted","actual","predictedValue","staleKeys","keysToRemove","clearAll","getStats","allHints","templateHints","h","concreteHints","totalHints","size","templatePercentage","Math","round","hintsByComponent","acc","PlaygroundBridge","predictionReceived","postMessage","elapsedMs","predictionConfidence","correctionApplied","dispatchEvent","CustomEvent","computedRegistry","computeAllForComponent","computed","varName","variable","computeFn","lastValue","computeDependentVariables","changedStateKey","dependencies","hasClientComputed","TemplateStateManager","templates","componentStates","loadTemplateMap","templateMap","nodePath","registerTemplate","getTemplate","getComponentTemplates","getTemplatesBoundTo","getStateValue","render","renderWithParams","applyTemplatePatch","slots","attribute","buildNodePathKey","existingTemplate","keysToDelete","componentCount","templateCount","memoryBytes","memoryKB","avgTemplatesPerComponent","max","templateState","ServerTaskImpl","taskId","signalR","context","progress","chunks","chunkCount","streaming","_createPromise","_promise","_resolve","_reject","idle","running","failed","cancelled","startedAt","completedAt","partial","_triggerRerender","duration","retry","cancel","_updateFromServer","previousStatus","currentContext","stateIndex","effectIndex","refIndex","serverTaskIndex","findElementByPath","root","useState","currentValue","actualNewValue","boundTemplates","newText","createArrayStateSetter","useEffect","deps","effects","effect","dep","cleanup","queueMicrotask","useRef","refKey","refs","baseSetState","currentArray","setter","newArray","prepend","insertAt","removeAt","updateAt","removeWhere","predicate","updateWhere","appendMany","items","removeMany","indices","useServerTask","taskFactory","taskKey","serverTasks","task","EventAggregator","channels","channel","lastMessage","channelData","timestamp","hasCallback","publish","waiting","source","isStale","subscriber","totalChannels","hasLastMessage","globalAggregator","getEventAggregator","Minimact","eventDelegation","enabled","enableDebugLogging","hydration","setupSignalRHandlers","registerAllComponents","component","getClientState","setClientState","recomputeAndSyncClientState","subscribeToState","ClientComputed.hasClientComputed","ClientComputed.computeDependentVariables","ClientComputed.computeAllForComponent","connectionState","minimact","scope","urlPattern","expiry","defaultValue","variables","variableCount","setComputedContext","requestAnimationFrame","memoize","debounce","throttle","setValue","debounceTimer","syncToServer","computedValue","doSync","is","resolvedValue","ctx","requestIdleCallback","deadline","didTimeout","timeRemaining","delay","fetchFn","pageSize","page","setPage","setItems","total","setTotal","setError","prefetchCache","lastArgs","filters","fetchTask","parallel","countTask","fetchPage","targetPage","fromCache","cached","prefetchNext","totalPages","prefetchInBackground","prefetchPrev","ceil","hasNext","hasPrev","pending","prev","goto","refresh","_fetchTask","_countTask","aggregator","onMessage","manager","connected","autoConnect","disconnect"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}