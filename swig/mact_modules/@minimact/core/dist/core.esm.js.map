{"version":3,"file":"core.esm.js","sources":["../src/signalm/types.ts","../src/signalm/RetryPolicy.ts","../src/signalm/JsonProtocol.ts","../src/signalm/EventEmitter.ts","../src/signalm/SignalMConnection.ts","../src/signalm-manager.ts","../src/dom-patcher.ts","../src/client-state.ts","../src/event-delegation.ts","../src/hydration.ts","../src/template-renderer.ts","../src/hint-queue.ts","../src/playground-bridge.ts","../src/client-computed.ts","../src/template-state.ts","../src/server-task.ts","../src/server-reducer.ts","../src/useComputed.ts","../src/hooks.ts","../src/useContext.ts","../src/usePaginatedServerTask.ts","../src/pub-sub.ts","../src/task-scheduling.ts","../src/index.ts"],"sourcesContent":["/**\r\n * SignalM Types and Interfaces\r\n *\r\n * TypeScript definitions for SignalM connection and protocol\r\n */\r\n\r\nimport type { IRetryPolicy } from './RetryPolicy';\r\n\r\n/**\r\n * Connection state\r\n */\r\nexport enum ConnectionState {\r\n  Disconnected = 'Disconnected',\r\n  Connecting = 'Connecting',\r\n  Connected = 'Connected',\r\n  Reconnecting = 'Reconnecting'\r\n}\r\n\r\n/**\r\n * SignalM connection options\r\n */\r\nexport interface SignalMOptions {\r\n  /** Custom retry policy for reconnection */\r\n  reconnectPolicy?: IRetryPolicy;\r\n\r\n  /** Enable debug logging */\r\n  debug?: boolean;\r\n\r\n  /** Additional headers to send with connection */\r\n  headers?: Record<string, string>;\r\n\r\n  /** Connection timeout in milliseconds (default: 30000) */\r\n  connectionTimeout?: number;\r\n\r\n  /** Invocation timeout in milliseconds (default: 30000) */\r\n  invocationTimeout?: number;\r\n}\r\n\r\n/**\r\n * Pending invocation tracking\r\n */\r\nexport interface PendingInvocation {\r\n  resolve: (value: any) => void;\r\n  reject: (reason: any) => void;\r\n  timeout: number;\r\n}\r\n\r\n/**\r\n * SignalR message types\r\n * https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\nexport enum MessageType {\r\n  /** Invocation message (client → server or server → client) */\r\n  Invocation = 1,\r\n  /** StreamItem message (not supported in SignalM) */\r\n  StreamItem = 2,\r\n  /** Completion message (response to invocation) */\r\n  Completion = 3,\r\n  /** StreamInvocation message (not supported in SignalM) */\r\n  StreamInvocation = 4,\r\n  /** CancelInvocation message (not supported in SignalM) */\r\n  CancelInvocation = 5,\r\n  /** Ping message */\r\n  Ping = 6,\r\n  /** Close message */\r\n  Close = 7\r\n}\r\n\r\n/**\r\n * Invocation message (client → server or server → client RPC call)\r\n */\r\nexport interface InvocationMessage {\r\n  type: MessageType.Invocation;\r\n  invocationId?: string;\r\n  target: string;\r\n  arguments: any[];\r\n  streamIds?: string[];\r\n}\r\n\r\n/**\r\n * Completion message (response to invocation)\r\n */\r\nexport interface CompletionMessage {\r\n  type: MessageType.Completion;\r\n  invocationId: string;\r\n  result?: any;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Ping message (keep-alive)\r\n */\r\nexport interface PingMessage {\r\n  type: MessageType.Ping;\r\n}\r\n\r\n/**\r\n * Close message (connection termination)\r\n */\r\nexport interface CloseMessage {\r\n  type: MessageType.Close;\r\n  error?: string;\r\n  allowReconnect?: boolean;\r\n}\r\n\r\n/**\r\n * Union type of all message types\r\n */\r\nexport type Message = InvocationMessage | CompletionMessage | PingMessage | CloseMessage;\r\n\r\n/**\r\n * Connection event types\r\n */\r\nexport type ConnectionEvent = 'connected' | 'disconnected' | 'reconnecting' | 'reconnected' | 'error';\r\n","/**\r\n * Retry Policy Interface and Implementations\r\n *\r\n * Defines reconnection strategies for SignalM connections\r\n */\r\n\r\n/**\r\n * Retry policy interface\r\n */\r\nexport interface IRetryPolicy {\r\n  /**\r\n   * Get next retry delay in milliseconds\r\n   * Returns null if max retries exceeded\r\n   *\r\n   * @param retryAttempt - The retry attempt number (0-indexed)\r\n   * @returns Delay in milliseconds, or null to stop retrying\r\n   */\r\n  nextRetryDelay(retryAttempt: number): number | null;\r\n}\r\n\r\n/**\r\n * Exponential backoff retry policy\r\n *\r\n * Retry delays: 0ms, 2s, 10s, 30s, then 60s max\r\n * Allows infinite retries with capped delay\r\n */\r\nexport class ExponentialBackoffRetryPolicy implements IRetryPolicy {\r\n  private delays = [0, 2000, 10000, 30000];\r\n  private maxDelay = 60000; // 60 seconds\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    // Allow infinite retries, but cap delay at maxDelay\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n    return this.maxDelay;\r\n  }\r\n}\r\n\r\n/**\r\n * Fixed interval retry policy\r\n *\r\n * Retries at fixed intervals with a maximum retry count\r\n */\r\nexport class FixedRetryPolicy implements IRetryPolicy {\r\n  private interval: number;\r\n  private maxRetries: number;\r\n\r\n  /**\r\n   * Create a fixed retry policy\r\n   *\r\n   * @param interval - Retry interval in milliseconds (default: 5000)\r\n   * @param maxRetries - Maximum number of retries (default: 10)\r\n   */\r\n  constructor(interval: number = 5000, maxRetries: number = 10) {\r\n    this.interval = interval;\r\n    this.maxRetries = maxRetries;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt >= this.maxRetries) {\r\n      return null; // Max retries exceeded\r\n    }\r\n    return this.interval;\r\n  }\r\n}\r\n\r\n/**\r\n * No retry policy\r\n *\r\n * Fails immediately without retrying\r\n */\r\nexport class NoRetryPolicy implements IRetryPolicy {\r\n  nextRetryDelay(): null {\r\n    return null; // Never retry\r\n  }\r\n}\r\n\r\n/**\r\n * Custom retry policy with configurable delays\r\n *\r\n * Allows specifying exact retry delays\r\n */\r\nexport class CustomRetryPolicy implements IRetryPolicy {\r\n  private delays: number[];\r\n  private repeatLast: boolean;\r\n\r\n  /**\r\n   * Create a custom retry policy\r\n   *\r\n   * @param delays - Array of retry delays in milliseconds\r\n   * @param repeatLast - If true, repeat the last delay infinitely (default: false)\r\n   */\r\n  constructor(delays: number[], repeatLast: boolean = false) {\r\n    if (delays.length === 0) {\r\n      throw new Error('Delays array cannot be empty');\r\n    }\r\n    this.delays = delays;\r\n    this.repeatLast = repeatLast;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n\r\n    if (this.repeatLast) {\r\n      return this.delays[this.delays.length - 1];\r\n    }\r\n\r\n    return null; // No more retries\r\n  }\r\n}\r\n","/**\r\n * SignalR JSON Protocol Implementation\r\n *\r\n * Implements the SignalR JSON protocol for message serialization.\r\n * Compatible with ASP.NET Core SignalR hubs.\r\n *\r\n * Protocol Spec: https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\n\r\nimport type {\r\n  Message,\r\n  InvocationMessage,\r\n  CompletionMessage,\r\n  PingMessage,\r\n  CloseMessage,\r\n  MessageType\r\n} from './types';\r\n\r\nexport class JsonProtocol {\r\n  /**\r\n   * Protocol name\r\n   */\r\n  static readonly protocolName = 'json';\r\n\r\n  /**\r\n   * Protocol version\r\n   */\r\n  static readonly protocolVersion = 1;\r\n\r\n  /**\r\n   * SignalR message record separator (ASCII 30)\r\n   * Every SignalR message must be terminated with this character\r\n   */\r\n  private static readonly RECORD_SEPARATOR = '\\x1E';\r\n\r\n  /**\r\n   * Write handshake request message\r\n   * Must be sent immediately after WebSocket connection is established\r\n   */\r\n  static writeHandshake(): string {\r\n    const handshake = {\r\n      protocol: this.protocolName,\r\n      version: this.protocolVersion\r\n    };\r\n    return JSON.stringify(handshake) + this.RECORD_SEPARATOR;\r\n  }\r\n\r\n  /**\r\n   * Parse handshake response message\r\n   */\r\n  static parseHandshake(data: string): { error?: string } {\r\n    try {\r\n      const cleanData = data.endsWith(this.RECORD_SEPARATOR)\r\n        ? data.slice(0, -1)\r\n        : data;\r\n      return JSON.parse(cleanData) as { error?: string };\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse handshake: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write invocation message (client → server RPC call)\r\n   */\r\n  static writeInvocation(\r\n    invocationId: string,\r\n    target: string,\r\n    args: any[]\r\n  ): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      invocationId,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write message without response (fire-and-forget)\r\n   */\r\n  static writeMessage(target: string, args: any[]): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write ping message (keep-alive)\r\n   */\r\n  static writePing(): PingMessage {\r\n    return {\r\n      type: 6 as MessageType.Ping\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write close message\r\n   */\r\n  static writeClose(error?: string): CloseMessage {\r\n    return {\r\n      type: 7 as MessageType.Close,\r\n      error\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse incoming message\r\n   * Removes record separator if present\r\n   */\r\n  static parseMessage(data: string): Message {\r\n    try {\r\n      // Remove record separator if present\r\n      const cleanData = data.endsWith(this.RECORD_SEPARATOR)\r\n        ? data.slice(0, -1)\r\n        : data;\r\n      return JSON.parse(cleanData) as Message;\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse message: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serialize message to JSON string with SignalR record separator\r\n   * SignalR requires all messages to end with \\x1E\r\n   */\r\n  static serializeMessage(message: Message): string {\r\n    return JSON.stringify(message) + this.RECORD_SEPARATOR;\r\n  }\r\n\r\n  /**\r\n   * Check if message is invocation\r\n   */\r\n  static isInvocation(message: Message): message is InvocationMessage {\r\n    return message.type === 1;\r\n  }\r\n\r\n  /**\r\n   * Check if message is completion\r\n   */\r\n  static isCompletion(message: Message): message is CompletionMessage {\r\n    return message.type === 3;\r\n  }\r\n\r\n  /**\r\n   * Check if message is ping\r\n   */\r\n  static isPing(message: Message): message is PingMessage {\r\n    return message.type === 6;\r\n  }\r\n\r\n  /**\r\n   * Check if message is close\r\n   */\r\n  static isClose(message: Message): message is CloseMessage {\r\n    return message.type === 7;\r\n  }\r\n}\r\n","/**\r\n * Simple Event Emitter\r\n *\r\n * Lightweight event handling for SignalM connections\r\n */\r\n\r\nexport class EventEmitter {\r\n  private events = new Map<string, Function[]>();\r\n\r\n  /**\r\n   * Register an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event)!.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Unregister an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function to remove\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a one-time event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function (will be called once)\r\n   */\r\n  once(event: string, handler: Function): void {\r\n    const onceHandler = (...args: any[]) => {\r\n      handler(...args);\r\n      this.off(event, onceHandler);\r\n    };\r\n    this.on(event, onceHandler);\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   *\r\n   * @param event - Event name\r\n   * @param args - Event arguments\r\n   */\r\n  emit(event: string, ...args: any[]): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      // Create a copy to avoid issues if handlers are removed during iteration\r\n      const handlersCopy = [...handlers];\r\n      handlersCopy.forEach(handler => {\r\n        try {\r\n          handler(...args);\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in event handler for '${event}':`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all event handlers for a specific event\r\n   *\r\n   * @param event - Event name (if not provided, clears all events)\r\n   */\r\n  removeAllListeners(event?: string): void {\r\n    if (event) {\r\n      this.events.delete(event);\r\n    } else {\r\n      this.events.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of listeners for an event\r\n   *\r\n   * @param event - Event name\r\n   * @returns Number of listeners\r\n   */\r\n  listenerCount(event: string): number {\r\n    const handlers = this.events.get(event);\r\n    return handlers ? handlers.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Get all event names with listeners\r\n   *\r\n   * @returns Array of event names\r\n   */\r\n  eventNames(): string[] {\r\n    return Array.from(this.events.keys());\r\n  }\r\n}\r\n","/**\r\n * SignalM Connection\r\n *\r\n * Lightweight WebSocket-based connection compatible with SignalR hubs.\r\n * Supports method invocation, event handling, and automatic reconnection.\r\n */\r\n\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { JsonProtocol } from './JsonProtocol';\r\nimport { ExponentialBackoffRetryPolicy, type IRetryPolicy } from './RetryPolicy';\r\nimport {\r\n  ConnectionState,\r\n  type SignalMOptions,\r\n  type PendingInvocation\r\n} from './types';\r\n\r\nexport class SignalMConnection {\r\n  private ws: WebSocket | null = null;\r\n  private url: string;\r\n  private handlers = new Map<string, Function[]>();\r\n  private pendingInvocations = new Map<string, PendingInvocation>();\r\n  private invocationId = 0;\r\n  private reconnectPolicy: IRetryPolicy;\r\n  private state: ConnectionState = ConnectionState.Disconnected;\r\n  private reconnectAttempts = 0;\r\n  private eventEmitter: EventEmitter;\r\n  private debugLogging: boolean;\r\n  private connectionTimeout: number;\r\n  private invocationTimeout: number;\r\n  private reconnectTimeoutId: number | null = null;\r\n\r\n  constructor(url: string, options: SignalMOptions = {}) {\r\n    this.url = url;\r\n    this.reconnectPolicy = options.reconnectPolicy || new ExponentialBackoffRetryPolicy();\r\n    this.debugLogging = options.debug || false;\r\n    this.connectionTimeout = options.connectionTimeout || 30000;\r\n    this.invocationTimeout = options.invocationTimeout || 30000;\r\n    this.eventEmitter = new EventEmitter();\r\n  }\r\n\r\n  /**\r\n   * Start the connection\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.state !== ConnectionState.Disconnected) {\r\n      throw new Error('Connection is already started');\r\n    }\r\n\r\n    this.state = ConnectionState.Connecting;\r\n    this.log('Starting connection...');\r\n    return this.connect();\r\n  }\r\n\r\n  /**\r\n   * Stop the connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    this.log('Stopping connection...');\r\n\r\n    // Clear any pending reconnect\r\n    if (this.reconnectTimeoutId !== null) {\r\n      clearTimeout(this.reconnectTimeoutId);\r\n      this.reconnectTimeoutId = null;\r\n    }\r\n\r\n    if (this.ws) {\r\n      this.ws.close(1000, 'Normal closure');\r\n      this.ws = null;\r\n    }\r\n\r\n    this.state = ConnectionState.Disconnected;\r\n    this.eventEmitter.emit('disconnected');\r\n  }\r\n\r\n  /**\r\n   * Invoke a server method and wait for result\r\n   */\r\n  async invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const invocationId = this.generateInvocationId();\r\n    const message = JsonProtocol.writeInvocation(invocationId, methodName, args);\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        this.pendingInvocations.delete(invocationId);\r\n        reject(new Error(`Invocation '${methodName}' timed out after ${this.invocationTimeout}ms`));\r\n      }, this.invocationTimeout);\r\n\r\n      this.pendingInvocations.set(invocationId, {\r\n        resolve,\r\n        reject,\r\n        timeout: timeout as unknown as number\r\n      });\r\n\r\n      const serialized = JsonProtocol.serializeMessage(message);\r\n      this.log(`Invoking '${methodName}' (id: ${invocationId})`, args);\r\n      this.ws!.send(serialized);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a message without expecting a response (fire-and-forget)\r\n   */\r\n  send(methodName: string, ...args: any[]): void {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const message = JsonProtocol.writeMessage(methodName, args);\r\n    const serialized = JsonProtocol.serializeMessage(message);\r\n    this.log(`Sending '${methodName}' (fire-and-forget)`, args);\r\n    this.ws!.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Register a handler for server-to-client method calls\r\n   */\r\n  on(methodName: string, handler: (...args: any[]) => void): void {\r\n    if (!this.handlers.has(methodName)) {\r\n      this.handlers.set(methodName, []);\r\n    }\r\n    this.handlers.get(methodName)!.push(handler);\r\n    this.log(`Registered handler for '${methodName}'`);\r\n  }\r\n\r\n  /**\r\n   * Remove a handler\r\n   */\r\n  off(methodName: string, handler: (...args: any[]) => void): void {\r\n    const handlers = this.handlers.get(methodName);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n        this.log(`Removed handler for '${methodName}'`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register event listener for connection lifecycle events\r\n   */\r\n  onConnected(handler: () => void): void {\r\n    this.eventEmitter.on('connected', handler);\r\n  }\r\n\r\n  onDisconnected(handler: () => void): void {\r\n    this.eventEmitter.on('disconnected', handler);\r\n  }\r\n\r\n  onReconnecting(handler: () => void): void {\r\n    this.eventEmitter.on('reconnecting', handler);\r\n  }\r\n\r\n  onReconnected(handler: () => void): void {\r\n    this.eventEmitter.on('reconnected', handler);\r\n  }\r\n\r\n  onError(handler: (error: Error) => void): void {\r\n    this.eventEmitter.on('error', handler);\r\n  }\r\n\r\n  /**\r\n   * Get current connection state\r\n   */\r\n  get connectionState(): ConnectionState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Internal: Connect to WebSocket\r\n   */\r\n  private async connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const wsUrl = this.buildWebSocketUrl();\r\n      this.log(`Connecting to ${wsUrl}...`);\r\n\r\n      try {\r\n        this.ws = new WebSocket(wsUrl);\r\n      } catch (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n\r\n      // Connection timeout\r\n      const connectionTimeout = setTimeout(() => {\r\n        if (this.state === ConnectionState.Connecting) {\r\n          this.log('Connection timeout');\r\n          this.ws?.close();\r\n          reject(new Error(`Connection timeout after ${this.connectionTimeout}ms`));\r\n        }\r\n      }, this.connectionTimeout);\r\n\r\n      // Track handshake completion\r\n      let handshakeComplete = false;\r\n\r\n      this.ws.onopen = () => {\r\n        // Send handshake immediately after connection\r\n        const handshake = JsonProtocol.writeHandshake();\r\n        this.log('Sending handshake', handshake);\r\n        this.ws!.send(handshake);\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        // First message should be handshake response\r\n        if (!handshakeComplete) {\r\n          try {\r\n            const response = JsonProtocol.parseHandshake(event.data);\r\n            if (response.error) {\r\n              clearTimeout(connectionTimeout);\r\n              this.log('Handshake failed', response.error);\r\n              this.ws?.close();\r\n              reject(new Error(`Handshake failed: ${response.error}`));\r\n              return;\r\n            }\r\n\r\n            // Handshake successful\r\n            handshakeComplete = true;\r\n            clearTimeout(connectionTimeout);\r\n            this.state = ConnectionState.Connected;\r\n            this.reconnectAttempts = 0;\r\n            this.log('Handshake complete ✓');\r\n            this.log('Connected ✓');\r\n            this.eventEmitter.emit('connected');\r\n            resolve();\r\n          } catch (error) {\r\n            clearTimeout(connectionTimeout);\r\n            this.log('Handshake parse error', error);\r\n            this.ws?.close();\r\n            reject(new Error(`Handshake error: ${error}`));\r\n          }\r\n        } else {\r\n          // Handle normal messages\r\n          this.handleMessage(event.data);\r\n        }\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        this.log('WebSocket error', error);\r\n        this.eventEmitter.emit('error', new Error('WebSocket error'));\r\n      };\r\n\r\n      this.ws.onclose = (event) => {\r\n        clearTimeout(connectionTimeout);\r\n        this.handleClose(event);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle incoming messages\r\n   * SignalR can send multiple messages in one WebSocket frame, separated by \\x1E\r\n   */\r\n  private handleMessage(data: string): void {\r\n    // Split on record separator - server can send multiple messages at once\r\n    const messages = data.split('\\x1E').filter(msg => msg.length > 0);\r\n\r\n    for (const messageData of messages) {\r\n      try {\r\n        const message = JSON.parse(messageData);\r\n        this.log(`Received message (type: ${message.type})`, message);\r\n\r\n        if (JsonProtocol.isInvocation(message)) {\r\n          // Server calling client method\r\n          this.handleInvocation(message);\r\n        } else if (JsonProtocol.isCompletion(message)) {\r\n          // Response to client invoke()\r\n          this.handleCompletion(message);\r\n        } else if (JsonProtocol.isPing(message)) {\r\n          // Server ping (respond with pong)\r\n          this.handlePing();\r\n        } else if (JsonProtocol.isClose(message)) {\r\n          // Server requested close\r\n          this.log('Server requested close', message.error);\r\n          this.ws?.close(1000, 'Server closed connection');\r\n        }\r\n      } catch (error) {\r\n        this.log('Error parsing message', error);\r\n        console.error('[SignalM] Error parsing message:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle server-to-client invocation\r\n   */\r\n  private handleInvocation(message: any): void {\r\n    const handlers = this.handlers.get(message.target);\r\n    if (handlers) {\r\n      this.log(`Calling ${handlers.length} handler(s) for '${message.target}'`);\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(...(message.arguments || []));\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in handler for '${message.target}':`, error);\r\n        }\r\n      });\r\n    } else {\r\n      this.log(`No handler registered for '${message.target}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle completion (response to invoke)\r\n   */\r\n  private handleCompletion(message: any): void {\r\n    const pending = this.pendingInvocations.get(message.invocationId);\r\n    if (pending) {\r\n      clearTimeout(pending.timeout);\r\n      this.pendingInvocations.delete(message.invocationId);\r\n\r\n      if (message.error) {\r\n        this.log(`Invocation ${message.invocationId} failed: ${message.error}`);\r\n        pending.reject(new Error(message.error));\r\n      } else {\r\n        this.log(`Invocation ${message.invocationId} completed`, message.result);\r\n        pending.resolve(message.result);\r\n      }\r\n    } else {\r\n      this.log(`Received completion for unknown invocation ${message.invocationId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle ping (send pong)\r\n   */\r\n  private handlePing(): void {\r\n    const pongMessage = JsonProtocol.writePing(); // Pong uses same message type\r\n    const serialized = JsonProtocol.serializeMessage(pongMessage);\r\n    this.log('Received ping, sending pong');\r\n    this.ws?.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle connection close\r\n   */\r\n  private handleClose(event: CloseEvent): void {\r\n    this.log(`Connection closed (code: ${event.code}, reason: ${event.reason})`);\r\n    this.state = ConnectionState.Disconnected;\r\n    this.ws = null;\r\n\r\n    // Reject all pending invocations\r\n    this.pendingInvocations.forEach((pending) => {\r\n      clearTimeout(pending.timeout);\r\n      pending.reject(new Error('Connection closed'));\r\n    });\r\n    this.pendingInvocations.clear();\r\n\r\n    // Attempt reconnection if not normal closure (1000) or going away (1001)\r\n    if (event.code !== 1000 && event.code !== 1001) {\r\n      this.attemptReconnect();\r\n    } else {\r\n      this.eventEmitter.emit('disconnected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Attempt to reconnect\r\n   */\r\n  private async attemptReconnect(): Promise<void> {\r\n    const delay = this.reconnectPolicy.nextRetryDelay(this.reconnectAttempts);\r\n\r\n    if (delay === null) {\r\n      // Max retries exceeded\r\n      this.log('Max reconnection attempts exceeded');\r\n      this.eventEmitter.emit('disconnected');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    this.state = ConnectionState.Reconnecting;\r\n    this.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})...`);\r\n    this.eventEmitter.emit('reconnecting');\r\n\r\n    this.reconnectTimeoutId = setTimeout(async () => {\r\n      this.reconnectTimeoutId = null;\r\n      try {\r\n        await this.connect();\r\n        this.log('Reconnected ✓');\r\n        this.eventEmitter.emit('reconnected');\r\n      } catch (error) {\r\n        this.log('Reconnection failed', error);\r\n        this.attemptReconnect();\r\n      }\r\n    }, delay) as unknown as number;\r\n  }\r\n\r\n  /**\r\n   * Internal: Build WebSocket URL\r\n   */\r\n  private buildWebSocketUrl(): string {\r\n    // If URL is absolute, use it as-is\r\n    if (this.url.startsWith('ws://') || this.url.startsWith('wss://')) {\r\n      return this.url;\r\n    }\r\n\r\n    // Otherwise, construct from current page location\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const baseUrl = this.url.startsWith('/')\r\n      ? `${protocol}//${window.location.host}${this.url}`\r\n      : `${protocol}//${window.location.host}/${this.url}`;\r\n\r\n    return baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Internal: Generate unique invocation ID\r\n   */\r\n  private generateInvocationId(): string {\r\n    return (++this.invocationId).toString();\r\n  }\r\n\r\n  /**\r\n   * Internal: Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      if (data !== undefined) {\r\n        console.log(`[SignalM] ${message}`, data);\r\n      } else {\r\n        console.log(`[SignalM] ${message}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SignalMConnection, ConnectionState } from './signalm/index';\r\nimport { Patch } from './types';\r\nimport { ArrayOperation } from './hooks';\r\n\r\n/**\r\n * Manages SignalM connection to the Minimact server hub\r\n *\r\n * Drop-in replacement for SignalRManager using lightweight SignalM\r\n * Bundle size: ~3 KB gzipped (vs 18 KB with SignalR)\r\n */\r\nexport class SignalMManager {\r\n  private connection: SignalMConnection;\r\n  private debugLogging: boolean;\r\n  private eventHandlers: Map<string, Set<Function>>;\r\n\r\n  constructor(hubUrl: string = '/minimact', options: { reconnectInterval?: number; debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.eventHandlers = new Map();\r\n\r\n    // SignalM uses built-in exponential backoff, reconnectInterval is ignored\r\n    this.connection = new SignalMConnection(hubUrl, {\r\n      debug: this.debugLogging\r\n    });\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup SignalM event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle component updates from server\r\n    this.connection.on('UpdateComponent', (componentId: string, html: string) => {\r\n      this.log('UpdateComponent', { componentId, html });\r\n      this.emit('updateComponent', { componentId, html });\r\n    });\r\n\r\n    // Handle patch updates from server\r\n    this.connection.on('ApplyPatches', (componentId: string, patches: Patch[]) => {\r\n      this.log('ApplyPatches', { componentId, patches });\r\n      this.emit('applyPatches', { componentId, patches });\r\n    });\r\n\r\n    // Handle predicted patches (sent immediately for instant feedback)\r\n    this.connection.on('ApplyPrediction', (data: { componentId: string, patches: Patch[], confidence: number }) => {\r\n      this.log(`ApplyPrediction (${(data.confidence * 100).toFixed(0)}% confident)`, { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyPrediction', { componentId: data.componentId, patches: data.patches, confidence: data.confidence });\r\n    });\r\n\r\n    // Handle correction if prediction was wrong\r\n    this.connection.on('ApplyCorrection', (data: { componentId: string, patches: Patch[] }) => {\r\n      this.log('ApplyCorrection (prediction was incorrect)', { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyCorrection', { componentId: data.componentId, patches: data.patches });\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.connection.on('QueueHint', (data: {\r\n      componentId: string,\r\n      hintId: string,\r\n      patches: Patch[],\r\n      confidence: number,\r\n      predictedState: Record<string, any>\r\n    }) => {\r\n      this.log(`QueueHint '${data.hintId}' (${(data.confidence * 100).toFixed(0)}% confident)`, {\r\n        componentId: data.componentId,\r\n        patches: data.patches\r\n      });\r\n      this.emit('queueHint', data);\r\n    });\r\n\r\n    // Handle errors from server\r\n    this.connection.on('Error', (message: string) => {\r\n      console.error('[Minimact] Server error:', message);\r\n      this.emit('error', { message });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.connection.onReconnecting(() => {\r\n      this.log('Reconnecting...');\r\n      this.emit('reconnecting', {});\r\n    });\r\n\r\n    this.connection.onReconnected(() => {\r\n      this.log('Reconnected');\r\n      this.emit('reconnected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n\r\n    this.connection.onDisconnected(() => {\r\n      this.log('Connection closed');\r\n      this.emit('closed', {});\r\n    });\r\n\r\n    this.connection.onConnected(() => {\r\n      this.log('Connected to Minimact hub');\r\n      this.emit('connected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the SignalM connection\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      await this.connection.start();\r\n      // Connected event already emitted by onConnected handler\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to connect:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the SignalM connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    await this.connection.stop();\r\n    this.log('Disconnected from Minimact hub');\r\n  }\r\n\r\n  /**\r\n   * Register a component with the server\r\n   */\r\n  async registerComponent(componentId: string): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('RegisterComponent', componentId);\r\n      this.log('Registered component', { componentId });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to register component:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke a component method on the server\r\n   */\r\n  async invokeComponentMethod(componentId: string, methodName: string, args: any = {}): Promise<void> {\r\n    try {\r\n      const argsJson = JSON.stringify(args);\r\n      await this.connection.invoke('InvokeComponentMethod', componentId, methodName, argsJson);\r\n      this.log('Invoked method', { componentId, methodName, args });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to invoke method:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update client state on the server (single key-value)\r\n   */\r\n  async updateClientState(componentId: string, key: string, value: any): Promise<void> {\r\n    try {\r\n      const valueJson = JSON.stringify(value);\r\n      await this.connection.invoke('UpdateClientState', componentId, key, valueJson);\r\n      this.log('Updated client state', { componentId, key, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client state:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update multiple client-computed state values on the server\r\n   * Used for external library computations (lodash, moment, etc.)\r\n   */\r\n  async updateClientComputedState(componentId: string, computedValues: Record<string, any>): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateClientComputedState', componentId, computedValues);\r\n      this.log('Updated client-computed state', { componentId, computedValues });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client-computed state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state on the server (from useState hook)\r\n   * This keeps server state in sync with client state changes\r\n   */\r\n  async updateComponentState(componentId: string, stateKey: string, value: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentState', componentId, stateKey, value);\r\n      this.log('Updated component state', { componentId, stateKey, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update DOM element state on the server (from useDomElementState hook)\r\n   * This keeps server aware of DOM changes for accurate rendering\r\n   */\r\n  async updateDomElementState(componentId: string, stateKey: string, snapshot: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateDomElementState', componentId, stateKey, snapshot);\r\n      this.log('Updated DOM element state', { componentId, stateKey, snapshot });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update DOM element state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state with array operation metadata\r\n   * This provides semantic intent for array mutations, enabling precise template extraction\r\n   */\r\n  async updateComponentStateWithOperation(\r\n    componentId: string,\r\n    stateKey: string,\r\n    newValue: any,\r\n    operation: ArrayOperation\r\n  ): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentStateWithOperation', componentId, stateKey, newValue, operation);\r\n      this.log('Updated component state with operation', { componentId, stateKey, operation, newValue });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state with operation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update query results on the server (from useDomQuery hook)\r\n   * This keeps server aware of query results for accurate rendering\r\n   */\r\n  async updateQueryResults(componentId: string, queryKey: string, results: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateQueryResults', componentId, queryKey, results);\r\n      this.log('Updated query results', { componentId, queryKey, resultCount: results.length });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update query results:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic invoke method for calling server hub methods\r\n   */\r\n  async invoke(methodName: string, ...args: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke(methodName, ...args);\r\n      this.log(`Invoked ${methodName}`, { args });\r\n    } catch (error) {\r\n      console.error(`[Minimact] Failed to invoke ${methodName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from events\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit event to subscribers\r\n   */\r\n  private emit(event: string, data: any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact SignalM] ${message}`, data || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection state\r\n   * Maps SignalM ConnectionState to SignalR HubConnectionState for compatibility\r\n   */\r\n  get state(): string {\r\n    return this.connection.connectionState;\r\n  }\r\n\r\n  /**\r\n   * Get connection ID\r\n   * SignalM doesn't expose connection IDs (always returns null)\r\n   */\r\n  get connectionId(): string | null {\r\n    return null;\r\n  }\r\n}\r\n","import { Patch, VNode, VElement, VText } from './types';\r\n\r\n/**\r\n * Applies DOM patches from the server to the actual DOM\r\n * Handles surgical updates for minimal DOM manipulation\r\n */\r\nexport class DOMPatcher {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Apply an array of patches to a root element\r\n   */\r\n  applyPatches(rootElement: HTMLElement, patches: Patch[]): void {\r\n    this.log('Applying patches', { count: patches.length, patches });\r\n\r\n    for (const patch of patches) {\r\n      try {\r\n        this.applyPatch(rootElement, patch);\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to apply patch:', patch, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a single patch to the DOM\r\n   */\r\n  private applyPatch(rootElement: HTMLElement, patch: Patch): void {\r\n    const targetElement = this.getElementByPath(rootElement, patch.path);\r\n\r\n    if (!targetElement && patch.type !== 'Create') {\r\n      console.warn('[Minimact] Target element not found for patch:', patch);\r\n      return;\r\n    }\r\n\r\n    switch (patch.type) {\r\n      case 'Create':\r\n        this.patchCreate(rootElement, patch.path, patch.node);\r\n        break;\r\n      case 'Remove':\r\n        this.patchRemove(targetElement!);\r\n        break;\r\n      case 'Replace':\r\n        this.patchReplace(targetElement!, patch.node);\r\n        break;\r\n      case 'UpdateText':\r\n        this.patchUpdateText(targetElement!, patch.content);\r\n        break;\r\n      case 'UpdateProps':\r\n        this.patchUpdateProps(targetElement as HTMLElement, patch.props);\r\n        break;\r\n      case 'ReorderChildren':\r\n        this.patchReorderChildren(targetElement as HTMLElement, patch.order);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and insert a new node\r\n   */\r\n  private patchCreate(rootElement: HTMLElement, path: number[], node: VNode): void {\r\n    const newElement = this.createElementFromVNode(node);\r\n\r\n    if (path.length === 0) {\r\n      // Replace root\r\n      rootElement.innerHTML = '';\r\n      rootElement.appendChild(newElement);\r\n    } else {\r\n      // Insert at path\r\n      const parentPath = path.slice(0, -1);\r\n      const index = path[path.length - 1];\r\n      const parent = this.getElementByPath(rootElement, parentPath) as HTMLElement;\r\n\r\n      if (parent) {\r\n        if (index >= parent.childNodes.length) {\r\n          parent.appendChild(newElement);\r\n        } else {\r\n          parent.insertBefore(newElement, parent.childNodes[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Created node', { path, node });\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the DOM\r\n   */\r\n  private patchRemove(element: Node): void {\r\n    if (element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n      this.log('Removed node', { element });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace a node with a new one\r\n   */\r\n  private patchReplace(oldElement: Node, newNode: VNode): void {\r\n    const newElement = this.createElementFromVNode(newNode);\r\n\r\n    if (oldElement.parentNode) {\r\n      oldElement.parentNode.replaceChild(newElement, oldElement);\r\n      this.log('Replaced node', { oldElement, newNode });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update text content of a text node\r\n   */\r\n  private patchUpdateText(element: Node, content: string): void {\r\n    if (element.nodeType === Node.TEXT_NODE) {\r\n      element.textContent = content;\r\n    } else {\r\n      // If it's an element, update its text content\r\n      element.textContent = content;\r\n    }\r\n    this.log('Updated text', { element, content });\r\n  }\r\n\r\n  /**\r\n   * Update element properties/attributes\r\n   */\r\n  private patchUpdateProps(element: HTMLElement, props: Record<string, string>): void {\r\n    // Remove old attributes not in new props\r\n    const oldAttrs = Array.from(element.attributes);\r\n    for (const attr of oldAttrs) {\r\n      if (!(attr.name in props) && !attr.name.startsWith('data-minimact-')) {\r\n        element.removeAttribute(attr.name);\r\n      }\r\n    }\r\n\r\n    // Set new attributes\r\n    for (const [key, value] of Object.entries(props)) {\r\n      if (key === 'style') {\r\n        element.setAttribute('style', value);\r\n      } else if (key === 'class' || key === 'className') {\r\n        element.className = value;\r\n      } else if (key.startsWith('on')) {\r\n        // Event handlers are managed separately\r\n        continue;\r\n      } else {\r\n        element.setAttribute(key, value);\r\n      }\r\n    }\r\n\r\n    this.log('Updated props', { element, props });\r\n  }\r\n\r\n  /**\r\n   * Reorder children based on keys\r\n   */\r\n  private patchReorderChildren(element: HTMLElement, order: string[]): void {\r\n    const keyedChildren = new Map<string, Node>();\r\n\r\n    // Build map of keyed children\r\n    for (const child of Array.from(element.childNodes)) {\r\n      if (child instanceof HTMLElement) {\r\n        const key = child.getAttribute('data-key') || child.getAttribute('key');\r\n        if (key) {\r\n          keyedChildren.set(key, child);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reorder based on order array\r\n    for (let i = 0; i < order.length; i++) {\r\n      const key = order[i];\r\n      const child = keyedChildren.get(key);\r\n\r\n      if (child) {\r\n        const currentChild = element.childNodes[i];\r\n        if (currentChild !== child) {\r\n          element.insertBefore(child, currentChild);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Reordered children', { element, order });\r\n  }\r\n\r\n  /**\r\n   * Get a DOM element by its path (array of indices)\r\n   */\r\n  private getElementByPath(rootElement: HTMLElement, path: number[]): Node | null {\r\n    let current: Node = rootElement;\r\n\r\n    for (const index of path) {\r\n      if (index >= current.childNodes.length) {\r\n        return null;\r\n      }\r\n      current = current.childNodes[index];\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Create a DOM element from a VNode\r\n   */\r\n  private createElementFromVNode(vnode: VNode): Node {\r\n    switch (vnode.type) {\r\n      case 'Text':\r\n        return document.createTextNode((vnode as VText).content);\r\n\r\n      case 'Element': {\r\n        const velem = vnode as VElement;\r\n        const element = document.createElement(velem.tag);\r\n\r\n        // Set attributes\r\n        for (const [key, value] of Object.entries(velem.props || {})) {\r\n          if (key === 'className' || key === 'class') {\r\n            element.className = value;\r\n          } else if (key.startsWith('on')) {\r\n            // Event handlers will be attached by event delegation\r\n            element.setAttribute(`data-${key.toLowerCase()}`, value);\r\n          } else {\r\n            element.setAttribute(key, value);\r\n          }\r\n        }\r\n\r\n        // Set key if present\r\n        if (velem.key) {\r\n          element.setAttribute('data-key', velem.key);\r\n        }\r\n\r\n        // Create children\r\n        for (const child of velem.children || []) {\r\n          element.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return element;\r\n      }\r\n\r\n      case 'Fragment': {\r\n        const fragment = document.createDocumentFragment();\r\n        const vfrag = vnode as any;\r\n\r\n        for (const child of vfrag.children || []) {\r\n          fragment.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return fragment;\r\n      }\r\n\r\n      case 'RawHtml': {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = (vnode as any).html;\r\n        return div;\r\n      }\r\n\r\n      default:\r\n        console.warn('[Minimact] Unknown VNode type:', vnode);\r\n        return document.createTextNode('');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace entire HTML (fallback when patches aren't available)\r\n   */\r\n  replaceHTML(rootElement: HTMLElement, html: string): void {\r\n    rootElement.innerHTML = html;\r\n    this.log('Replaced entire HTML', { html });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact DOMPatcher] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { ComponentState } from './types';\r\n\r\n/**\r\n * Manages client-side state (useClientState) with reactive updates\r\n * Handles local state that doesn't require server round-trips\r\n */\r\nexport class ClientStateManager {\r\n  private states: Map<string, ComponentState>;\r\n  private subscribers: Map<string, Map<string, Set<Function>>>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.states = new Map();\r\n    this.subscribers = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Initialize client state for a component\r\n   */\r\n  initializeComponent(componentId: string, initialState: ComponentState = {}): void {\r\n    this.states.set(componentId, { ...initialState });\r\n    this.subscribers.set(componentId, new Map());\r\n    this.log('Initialized component state', { componentId, initialState });\r\n  }\r\n\r\n  /**\r\n   * Get client state value\r\n   */\r\n  getState(componentId: string, key: string): any {\r\n    const componentState = this.states.get(componentId);\r\n    return componentState ? componentState[key] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Set client state value and trigger updates\r\n   */\r\n  setState(componentId: string, key: string, value: any): void {\r\n    const componentState = this.states.get(componentId);\r\n\r\n    if (!componentState) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return;\r\n    }\r\n\r\n    // Update state\r\n    const oldValue = componentState[key];\r\n    componentState[key] = value;\r\n\r\n    this.log('State updated', { componentId, key, oldValue, newValue: value });\r\n\r\n    // Notify subscribers\r\n    this.notifySubscribers(componentId, key, value, oldValue);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to state changes\r\n   */\r\n  subscribe(componentId: string, key: string, callback: (value: any, oldValue: any) => void): () => void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return () => {};\r\n    }\r\n\r\n    if (!componentSubscribers.has(key)) {\r\n      componentSubscribers.set(key, new Set());\r\n    }\r\n\r\n    componentSubscribers.get(key)!.add(callback);\r\n    this.log('Subscribed to state', { componentId, key });\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      componentSubscribers.get(key)?.delete(callback);\r\n      this.log('Unsubscribed from state', { componentId, key });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notify all subscribers of a state change\r\n   */\r\n  private notifySubscribers(componentId: string, key: string, value: any, oldValue: any): void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      return;\r\n    }\r\n\r\n    const keySubscribers = componentSubscribers.get(key);\r\n\r\n    if (keySubscribers) {\r\n      keySubscribers.forEach(callback => {\r\n        try {\r\n          callback(value, oldValue);\r\n        } catch (error) {\r\n          console.error('[Minimact] Error in state subscriber:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all state for a component\r\n   */\r\n  getComponentState(componentId: string): ComponentState | undefined {\r\n    return this.states.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update multiple state values at once\r\n   */\r\n  updateState(componentId: string, updates: ComponentState): void {\r\n    for (const [key, value] of Object.entries(updates)) {\r\n      this.setState(componentId, key, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear state for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    this.states.delete(componentId);\r\n    this.subscribers.delete(componentId);\r\n    this.log('Cleared component state', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Bind state to a DOM element's value/content\r\n   */\r\n  bindToElement(\r\n    componentId: string,\r\n    key: string,\r\n    element: HTMLElement,\r\n    property: 'value' | 'textContent' | 'innerHTML' = 'textContent'\r\n  ): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      this.updateElement(element, property, initialValue);\r\n    }\r\n\r\n    // Subscribe to changes\r\n    return this.subscribe(componentId, key, (value) => {\r\n      this.updateElement(element, property, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a DOM element based on property type\r\n   */\r\n  private updateElement(element: HTMLElement, property: string, value: any): void {\r\n    switch (property) {\r\n      case 'value':\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          element.value = String(value);\r\n        }\r\n        break;\r\n      case 'textContent':\r\n        element.textContent = String(value);\r\n        break;\r\n      case 'innerHTML':\r\n        element.innerHTML = String(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind input element to state (two-way binding)\r\n   */\r\n  bindInput(componentId: string, key: string, input: HTMLInputElement | HTMLTextAreaElement): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      input.value = String(initialValue);\r\n    }\r\n\r\n    // Listen to input changes\r\n    const inputHandler = (e: Event) => {\r\n      const target = e.target as HTMLInputElement | HTMLTextAreaElement;\r\n      this.setState(componentId, key, target.value);\r\n    };\r\n\r\n    input.addEventListener('input', inputHandler);\r\n\r\n    // Subscribe to state changes from other sources\r\n    const unsubscribe = this.subscribe(componentId, key, (value) => {\r\n      if (input.value !== String(value)) {\r\n        input.value = String(value);\r\n      }\r\n    });\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      input.removeEventListener('input', inputHandler);\r\n      unsubscribe();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact ClientState] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import type { HintQueue } from './hint-queue';\r\nimport type { DOMPatcher } from './dom-patcher';\r\nimport type { PlaygroundBridge } from './playground-bridge';\r\n\r\n/**\r\n * Event delegation system for handling component events\r\n * Uses a single root listener for performance\r\n */\r\nexport class EventDelegation {\r\n  private rootElement: HTMLElement;\r\n  private componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>;\r\n  private debugLogging: boolean;\r\n  private eventListeners: Map<string, EventListener>;\r\n  private hintQueue?: HintQueue;\r\n  private domPatcher?: DOMPatcher;\r\n  private playgroundBridge?: PlaygroundBridge;\r\n\r\n  constructor(\r\n    rootElement: HTMLElement,\r\n    componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>,\r\n    options: {\r\n      debugLogging?: boolean;\r\n      hintQueue?: HintQueue;\r\n      domPatcher?: DOMPatcher;\r\n      playgroundBridge?: PlaygroundBridge;\r\n    } = {}\r\n  ) {\r\n    this.rootElement = rootElement;\r\n    this.componentMethodInvoker = componentMethodInvoker;\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.hintQueue = options.hintQueue;\r\n    this.domPatcher = options.domPatcher;\r\n    this.playgroundBridge = options.playgroundBridge;\r\n    this.eventListeners = new Map();\r\n\r\n    this.setupEventDelegation();\r\n  }\r\n\r\n  /**\r\n   * Setup event delegation for common events\r\n   */\r\n  private setupEventDelegation(): void {\r\n    const eventTypes = [\r\n      'click',\r\n      'dblclick',\r\n      'input',\r\n      'change',\r\n      'submit',\r\n      'focus',\r\n      'blur',\r\n      'keydown',\r\n      'keyup',\r\n      'keypress',\r\n      'mouseenter',\r\n      'mouseleave',\r\n      'mouseover',\r\n      'mouseout'\r\n    ];\r\n\r\n    for (const eventType of eventTypes) {\r\n      const listener = this.createEventListener(eventType);\r\n      this.eventListeners.set(eventType, listener);\r\n      this.rootElement.addEventListener(eventType, listener, true); // Use capture phase\r\n    }\r\n\r\n    this.log('Event delegation setup complete', { eventTypes });\r\n  }\r\n\r\n  /**\r\n   * Create an event listener for a specific event type\r\n   */\r\n  private createEventListener(eventType: string): EventListener {\r\n    return async (event: Event) => {\r\n      const target = event.target as HTMLElement;\r\n\r\n      // Find the nearest element with an event handler\r\n      const handlerElement = this.findHandlerElement(target, eventType);\r\n\r\n      if (!handlerElement) {\r\n        return;\r\n      }\r\n\r\n      // Get handler information\r\n      const handler = this.getEventHandler(handlerElement, eventType);\r\n\r\n      if (!handler) {\r\n        return;\r\n      }\r\n\r\n      // Prevent default for submit events\r\n      if (eventType === 'submit') {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.log('Event triggered', { eventType, handler, target });\r\n\r\n      // Execute handler\r\n      await this.executeHandler(handler, event, handlerElement);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the nearest element with an event handler attribute\r\n   */\r\n  private findHandlerElement(element: HTMLElement | null, eventType: string): HTMLElement | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const attrName = `data-on${eventType}`;\r\n      const legacyAttrName = `on${eventType}`;\r\n\r\n      if (current.hasAttribute(attrName) || current.hasAttribute(legacyAttrName)) {\r\n        return current;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get event handler information from element\r\n   */\r\n  private getEventHandler(element: HTMLElement, eventType: string): EventHandler | null {\r\n    const attrName = `data-on${eventType}`;\r\n    const legacyAttrName = `on${eventType}`;\r\n\r\n    const handlerStr = element.getAttribute(attrName) || element.getAttribute(legacyAttrName);\r\n\r\n    if (!handlerStr) {\r\n      return null;\r\n    }\r\n\r\n    // Parse handler string\r\n    // Format: \"MethodName\" or \"MethodName:arg1:arg2\"\r\n    const parts = handlerStr.split(':');\r\n    const methodName = parts[0];\r\n    const args = parts.slice(1);\r\n\r\n    // Find component ID\r\n    const componentId = this.findComponentId(element);\r\n\r\n    if (!componentId) {\r\n      console.warn('[Minimact] No component ID found for event handler:', handlerStr);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      componentId,\r\n      methodName,\r\n      args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the component ID for an element\r\n   */\r\n  private findComponentId(element: HTMLElement | null): string | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const componentId = current.getAttribute('data-minimact-component-id');\r\n      if (componentId) {\r\n        return componentId;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    // Check root element\r\n    const rootComponentId = this.rootElement.getAttribute('data-minimact-component-id');\r\n    return rootComponentId;\r\n  }\r\n\r\n  /**\r\n   * Execute an event handler\r\n   */\r\n  private async executeHandler(handler: EventHandler, event: Event, element: HTMLElement): Promise<void> {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      // Build args object\r\n      const argsObj: any = {};\r\n\r\n      // Add parsed args from handler string\r\n      if (handler.args.length > 0) {\r\n        argsObj.args = handler.args;\r\n      }\r\n\r\n      // Add event data\r\n      if (event instanceof MouseEvent) {\r\n        argsObj.mouse = {\r\n          clientX: event.clientX,\r\n          clientY: event.clientY,\r\n          button: event.button\r\n        };\r\n      }\r\n\r\n      if (event instanceof KeyboardEvent) {\r\n        argsObj.keyboard = {\r\n          key: event.key,\r\n          code: event.code,\r\n          ctrlKey: event.ctrlKey,\r\n          shiftKey: event.shiftKey,\r\n          altKey: event.altKey\r\n        };\r\n      }\r\n\r\n      // Add target value for input events\r\n      if (event.type === 'input' || event.type === 'change') {\r\n        const target = event.target as HTMLInputElement;\r\n        argsObj.value = target.value;\r\n      }\r\n\r\n      // Convert argsObj to array format expected by server\r\n      // Server expects: object[] args, so we pass the actual argument values as an array\r\n      const argsArray: any[] = [];\r\n\r\n      // For input/change events, pass the value as the first argument\r\n      if (argsObj.value !== undefined) {\r\n        argsArray.push(argsObj.value);\r\n      }\r\n\r\n      // For handlers with explicit args, add those\r\n      if (argsObj.args && Array.isArray(argsObj.args)) {\r\n        argsArray.push(...argsObj.args);\r\n      }\r\n\r\n      // Check hint queue for cached prediction (CACHE HIT!)\r\n      if (this.hintQueue && this.domPatcher) {\r\n        // Build hint ID based on method name (simplified - in production would be more sophisticated)\r\n        const hintId = `${handler.methodName}`;\r\n\r\n        // Try to match hint based on the method being called\r\n        // This is a simplified version - in reality we'd need to know the state change\r\n        const matchedHint = this.tryMatchHint(handler.componentId, handler.methodName);\r\n\r\n        if (matchedHint) {\r\n          // 🟢 CACHE HIT! Apply patches instantly\r\n          const componentElement = this.findComponentElement(handler.componentId);\r\n          if (componentElement) {\r\n            this.domPatcher.applyPatches(componentElement, matchedHint.patches as any[]);\r\n\r\n            const latency = performance.now() - startTime;\r\n\r\n            // Notify playground of cache hit\r\n            if (this.playgroundBridge) {\r\n              this.playgroundBridge.cacheHit({\r\n                componentId: handler.componentId,\r\n                hintId: matchedHint.hintId,\r\n                latency,\r\n                confidence: matchedHint.confidence,\r\n                patchCount: matchedHint.patches.length\r\n              });\r\n            }\r\n\r\n            this.log(`🟢 CACHE HIT! Applied ${matchedHint.patches.length} patches in ${latency.toFixed(2)}ms`, {\r\n              handler,\r\n              confidence: (matchedHint.confidence * 100).toFixed(0) + '%'\r\n            });\r\n\r\n            // Still notify server in background for verification\r\n            this.componentMethodInvoker(handler.componentId, handler.methodName, argsArray).catch(err => {\r\n              console.error('[Minimact] Background server notification failed:', err);\r\n            });\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 🔴 CACHE MISS - No prediction found, send to server\r\n      await this.componentMethodInvoker(handler.componentId, handler.methodName, argsArray);\r\n\r\n      const latency = performance.now() - startTime;\r\n\r\n      // Notify playground of cache miss\r\n      if (this.playgroundBridge) {\r\n        this.playgroundBridge.cacheMiss({\r\n          componentId: handler.componentId,\r\n          methodName: handler.methodName,\r\n          latency,\r\n          patchCount: 0 // We don't know patch count in this flow\r\n        });\r\n      }\r\n\r\n      this.log(`🔴 CACHE MISS - Server latency: ${latency.toFixed(2)}ms`, { handler, argsObj });\r\n    } catch (error) {\r\n      console.error('[Minimact] Error executing handler:', handler, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to match a hint in the queue for this method invocation\r\n   * Simplified version - checks if there's a hint matching the method name\r\n   */\r\n  private tryMatchHint(componentId: string, methodName: string): { hintId: string; patches: any[]; confidence: number } | null {\r\n    if (!this.hintQueue) return null;\r\n\r\n    // In a real implementation, we'd need to build the predicted state change\r\n    // For now, we'll use a simplified heuristic based on method name\r\n    // The server sends hints with IDs like \"count_1\" for count going to 1\r\n\r\n    // Try to match by checking all hints for this component\r\n    // This is a placeholder - the actual matching logic would be more sophisticated\r\n    return null; // TODO: Implement proper hint matching\r\n  }\r\n\r\n  /**\r\n   * Find the component element by component ID\r\n   */\r\n  private findComponentElement(componentId: string): HTMLElement | null {\r\n    const element = this.rootElement.querySelector(`[data-minimact-component-id=\"${componentId}\"]`);\r\n    return element as HTMLElement;\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  destroy(): void {\r\n    for (const [eventType, listener] of this.eventListeners.entries()) {\r\n      this.rootElement.removeEventListener(eventType, listener, true);\r\n    }\r\n    this.eventListeners.clear();\r\n    this.log('Event delegation destroyed');\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact EventDelegation] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\ninterface EventHandler {\r\n  componentId: string;\r\n  methodName: string;\r\n  args: string[];\r\n}\r\n","import { ComponentMetadata } from './types';\r\nimport { ClientStateManager } from './client-state';\r\n\r\n/**\r\n * Handles hydration of server-rendered HTML with client interactivity\r\n * Identifies and manages client zones, server zones, and hybrid zones\r\n */\r\nexport class HydrationManager {\r\n  private clientState: ClientStateManager;\r\n  private components: Map<string, ComponentMetadata>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(clientState: ClientStateManager, options: { debugLogging?: boolean } = {}) {\r\n    this.clientState = clientState;\r\n    this.components = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Hydrate a component root element\r\n   */\r\n  hydrateComponent(componentId: string, rootElement: HTMLElement): void {\r\n    this.log('Hydrating component', { componentId });\r\n\r\n    // The actual component element is the first child of the container\r\n    // (rootElement is #minimact-root, first child is the actual component div)\r\n    const componentElement = rootElement.firstElementChild as HTMLElement;\r\n    if (!componentElement) {\r\n      console.error('[Minimact Hydration] No component element found in root');\r\n      return;\r\n    }\r\n\r\n    // Create component metadata\r\n    const metadata: ComponentMetadata = {\r\n      componentId,\r\n      element: componentElement,  // Use the actual component element, not the container\r\n      clientState: {},\r\n      serverState: {}\r\n    };\r\n\r\n    this.components.set(componentId, metadata);\r\n\r\n    // Set component ID on root element\r\n    rootElement.setAttribute('data-minimact-component-id', componentId);\r\n\r\n    // Initialize client state\r\n    this.clientState.initializeComponent(componentId);\r\n\r\n    // Find and hydrate client zones\r\n    this.hydrateClientZones(componentId, rootElement);\r\n\r\n    // Find and bind state to elements\r\n    this.bindStateElements(componentId, rootElement);\r\n\r\n    this.log('Component hydrated', { componentId, metadata });\r\n  }\r\n\r\n  /**\r\n   * Hydrate client-only zones (data-minimact-client-scope)\r\n   */\r\n  private hydrateClientZones(componentId: string, rootElement: HTMLElement): void {\r\n    const clientZones = rootElement.querySelectorAll('[data-minimact-client-scope]');\r\n\r\n    this.log('Found client zones', { count: clientZones.length });\r\n\r\n    clientZones.forEach((zone) => {\r\n      const element = zone as HTMLElement;\r\n\r\n      // Get state name if specified\r\n      const stateName = element.getAttribute('data-state');\r\n\r\n      if (stateName) {\r\n        // Initialize state from element\r\n        const initialValue = this.getInitialValue(element);\r\n        this.clientState.setState(componentId, stateName, initialValue);\r\n\r\n        // Bind element to state\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          this.clientState.bindInput(componentId, stateName, element);\r\n        }\r\n\r\n        this.log('Hydrated client zone', { element, stateName, initialValue });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Bind elements with data-bind attribute to state\r\n   */\r\n  private bindStateElements(componentId: string, rootElement: HTMLElement): void {\r\n    const boundElements = rootElement.querySelectorAll('[data-bind]');\r\n\r\n    this.log('Found bound elements', { count: boundElements.length });\r\n\r\n    boundElements.forEach((elem) => {\r\n      const element = elem as HTMLElement;\r\n      const bindKey = element.getAttribute('data-bind');\r\n\r\n      if (!bindKey) {\r\n        return;\r\n      }\r\n\r\n      // Determine binding type\r\n      const isClientScope = this.isInClientScope(element);\r\n      const bindProperty = this.determineBindProperty(element);\r\n\r\n      if (isClientScope) {\r\n        // Client-side binding\r\n        this.clientState.bindToElement(componentId, bindKey, element, bindProperty);\r\n        this.log('Bound to client state', { element, bindKey, bindProperty });\r\n      } else {\r\n        // Server-side binding - will be updated via patches\r\n        this.log('Server-bound element (patch-controlled)', { element, bindKey });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if an element is within a client scope\r\n   */\r\n  private isInClientScope(element: HTMLElement): boolean {\r\n    let current: HTMLElement | null = element;\r\n\r\n    while (current) {\r\n      if (current.hasAttribute('data-minimact-client-scope')) {\r\n        return true;\r\n      }\r\n      if (current.hasAttribute('data-minimact-server-scope')) {\r\n        return false;\r\n      }\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determine which property to bind (value, textContent, innerHTML)\r\n   */\r\n  private determineBindProperty(element: HTMLElement): 'value' | 'textContent' | 'innerHTML' {\r\n    if (element instanceof HTMLInputElement ||\r\n        element instanceof HTMLTextAreaElement ||\r\n        element instanceof HTMLSelectElement) {\r\n      return 'value';\r\n    }\r\n\r\n    if (element.hasAttribute('data-bind-html')) {\r\n      return 'innerHTML';\r\n    }\r\n\r\n    return 'textContent';\r\n  }\r\n\r\n  /**\r\n   * Get initial value from an element\r\n   */\r\n  private getInitialValue(element: HTMLElement): any {\r\n    if (element instanceof HTMLInputElement) {\r\n      if (element.type === 'checkbox') {\r\n        return element.checked;\r\n      } else if (element.type === 'number') {\r\n        return element.valueAsNumber || 0;\r\n      } else {\r\n        return element.value;\r\n      }\r\n    }\r\n\r\n    if (element instanceof HTMLTextAreaElement) {\r\n      return element.value;\r\n    }\r\n\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element.value;\r\n    }\r\n\r\n    return element.textContent || '';\r\n  }\r\n\r\n  /**\r\n   * Dehydrate (cleanup) a component\r\n   */\r\n  dehydrateComponent(componentId: string): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (!metadata) {\r\n      return;\r\n    }\r\n\r\n    // Clear client state\r\n    this.clientState.clearComponent(componentId);\r\n\r\n    // Remove from registry\r\n    this.components.delete(componentId);\r\n\r\n    this.log('Component dehydrated', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Get component metadata\r\n   */\r\n  getComponent(componentId: string): ComponentMetadata | undefined {\r\n    return this.components.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update server state for a component\r\n   */\r\n  updateServerState(componentId: string, key: string, value: any): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (metadata) {\r\n      metadata.serverState[key] = value;\r\n      this.log('Updated server state', { componentId, key, value });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hydrate all components on the page\r\n   */\r\n  hydrateAll(): void {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    this.log('Hydrating all components', { count: components.length });\r\n\r\n    components.forEach((element) => {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        this.hydrateComponent(componentId, element as HTMLElement);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact Hydration] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { TemplatePatch, Patch, LoopTemplate, ItemTemplate, VNode, VElement, VText, Binding } from './types';\r\n\r\n/**\r\n * Template Renderer\r\n *\r\n * Renders template patches with parameter values for runtime predictions.\r\n * Enables 98% memory reduction by storing patterns instead of concrete values.\r\n *\r\n * Example:\r\n *   template: \"Count: {0}\"\r\n *   params: [42]\r\n *   result: \"Count: 42\"\r\n */\r\nexport class TemplateRenderer {\r\n  /**\r\n   * Render a template string with parameters\r\n   *\r\n   * @param template - Template string with {0}, {1}, etc. placeholders\r\n   * @param params - Parameter values to substitute\r\n   * @returns Rendered string with parameters substituted\r\n   *\r\n   * @example\r\n   * renderTemplate(\"Count: {0}\", [42]) → \"Count: 42\"\r\n   * renderTemplate(\"Hello, {0} {1}!\", [\"John\", \"Doe\"]) → \"Hello, John Doe!\"\r\n   */\r\n  static renderTemplate(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace each placeholder {0}, {1}, etc. with corresponding parameter\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = this.formatValue(param);\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render a template patch with current state values\r\n   *\r\n   * @param templatePatch - Template patch data\r\n   * @param stateValues - Current state values (key-value pairs)\r\n   * @returns Rendered string\r\n   *\r\n   * @example\r\n   * const tp = { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] };\r\n   * renderTemplatePatch(tp, { count: 42 }) → \"Count: 42\"\r\n   *\r\n   * @example Conditional\r\n   * const tp = {\r\n   *   template: \"{0}\",\r\n   *   bindings: [\"isActive\"],\r\n   *   conditionalTemplates: { \"true\": \"Active\", \"false\": \"Inactive\" },\r\n   *   conditionalBindingIndex: 0\r\n   * };\r\n   * renderTemplatePatch(tp, { isActive: true }) → \"Active\"\r\n   */\r\n  static renderTemplatePatch(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string {\r\n    // Check for conditional templates\r\n    if (templatePatch.conditionalTemplates && templatePatch.conditionalBindingIndex !== undefined) {\r\n      const bindingIndex = templatePatch.conditionalBindingIndex;\r\n      const conditionBinding = templatePatch.bindings[bindingIndex];\r\n\r\n      // Get condition value (handle both string and Binding object)\r\n      const conditionKey = typeof conditionBinding === 'object' && 'stateKey' in conditionBinding\r\n        ? conditionBinding.stateKey\r\n        : conditionBinding as string;\r\n      const conditionValue = stateValues[conditionKey];\r\n\r\n      // Lookup the template for this condition value\r\n      const conditionalTemplate = templatePatch.conditionalTemplates[String(conditionValue)];\r\n\r\n      if (conditionalTemplate !== undefined) {\r\n        // If it's a simple conditional (just maps to string), return it\r\n        if (!conditionalTemplate.includes('{')) {\r\n          return conditionalTemplate;\r\n        }\r\n\r\n        // Otherwise, it's a conditional template with other bindings\r\n        // Apply transforms if present\r\n        const params = templatePatch.bindings.map(binding => {\r\n          if (typeof binding === 'object' && 'stateKey' in binding) {\r\n            const value = stateValues[binding.stateKey];\r\n            return binding.transform ? this.applyTransform(value, binding.transform) : value;\r\n          }\r\n          return stateValues[binding as string];\r\n        });\r\n        return this.renderTemplate(conditionalTemplate, params);\r\n      }\r\n    }\r\n\r\n    // Standard template rendering\r\n    const params = templatePatch.bindings.map((binding, index) => {\r\n      // Phase 6: Support Binding objects with transforms\r\n      if (typeof binding === 'object' && 'stateKey' in binding) {\r\n        const value = stateValues[binding.stateKey];\r\n\r\n        // Apply transform if present\r\n        if (binding.transform) {\r\n          return this.applyTransform(value, binding.transform);\r\n        }\r\n\r\n        return value;\r\n      }\r\n\r\n      // Backward compatibility: Simple string binding\r\n      return stateValues[binding as string];\r\n    });\r\n\r\n    return this.renderTemplate(templatePatch.template, params);\r\n  }\r\n\r\n  /**\r\n   * Convert a template patch to concrete patch(es) with current state\r\n   *\r\n   * @param patch - Template patch (UpdateTextTemplate, UpdatePropsTemplate, or UpdateListTemplate)\r\n   * @param stateValues - Current state values\r\n   * @returns Concrete patch or array of patches\r\n   *\r\n   * @example\r\n   * const patch = {\r\n   *   type: 'UpdateTextTemplate',\r\n   *   path: [0, 0],\r\n   *   templatePatch: { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] }\r\n   * };\r\n   * materializePatch(patch, { count: 42 })\r\n   * → { type: 'UpdateText', path: [0, 0], content: \"Count: 42\" }\r\n   */\r\n  static materializePatch(\r\n    patch: Patch,\r\n    stateValues: Record<string, any>\r\n  ): Patch | Patch[] {\r\n    switch (patch.type) {\r\n      case 'UpdateTextTemplate': {\r\n        const content = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateText',\r\n          path: patch.path,\r\n          content\r\n        };\r\n      }\r\n\r\n      case 'UpdatePropsTemplate': {\r\n        const value = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateProps',\r\n          path: patch.path,\r\n          props: { [patch.propName]: value }\r\n        };\r\n      }\r\n\r\n      case 'UpdateListTemplate': {\r\n        // Render loop template to VNodes\r\n        const vnodes = this.renderLoopTemplate(patch.loopTemplate, stateValues);\r\n\r\n        // Convert to concrete patches\r\n        return this.convertLoopToPatches(patch.path, vnodes);\r\n      }\r\n\r\n      default:\r\n        // Not a template patch, return as-is\r\n        return patch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Materialize multiple template patches\r\n   *\r\n   * @param patches - Array of patches (template or concrete)\r\n   * @param stateValues - Current state values\r\n   * @returns Array of concrete patches\r\n   */\r\n  static materializePatches(\r\n    patches: Patch[],\r\n    stateValues: Record<string, any>\r\n  ): Patch[] {\r\n    const materialized: Patch[] = [];\r\n\r\n    for (const patch of patches) {\r\n      const result = this.materializePatch(patch, stateValues);\r\n\r\n      if (Array.isArray(result)) {\r\n        // UpdateListTemplate returns multiple patches\r\n        materialized.push(...result);\r\n      } else {\r\n        materialized.push(result);\r\n      }\r\n    }\r\n\r\n    return materialized;\r\n  }\r\n\r\n  /**\r\n   * Apply transform to a value (Phase 6: Expression Templates)\r\n   * Security: Only whitelisted transforms are allowed\r\n   *\r\n   * @param value - Raw value from state\r\n   * @param transform - Transform string (e.g., \"toFixed(2)\", \"* 100\", \"toUpperCase()\")\r\n   * @returns Transformed value\r\n   *\r\n   * @example\r\n   * applyTransform(99.95, \"toFixed(2)\") → \"99.95\"\r\n   * applyTransform(0.847, \"* 100\") → 84.7\r\n   * applyTransform(\"hello\", \"toUpperCase()\") → \"HELLO\"\r\n   */\r\n  static applyTransform(value: any, transform: string): any {\r\n    // Security: Whitelist-only approach for safe transforms\r\n\r\n    // toFixed(n) - Format number to n decimal places\r\n    if (transform.startsWith('toFixed(')) {\r\n      const decimals = parseInt(transform.match(/\\d+/)?.[0] || '0');\r\n      return Number(value).toFixed(decimals);\r\n    }\r\n\r\n    // Arithmetic: * N (multiplication)\r\n    if (transform.startsWith('* ')) {\r\n      const multiplier = parseFloat(transform.substring(2));\r\n      return Number(value) * multiplier;\r\n    }\r\n\r\n    // Arithmetic: / N (division)\r\n    if (transform.startsWith('/ ')) {\r\n      const divisor = parseFloat(transform.substring(2));\r\n      return Number(value) / divisor;\r\n    }\r\n\r\n    // Arithmetic: + N (addition)\r\n    if (transform.startsWith('+ ')) {\r\n      const addend = parseFloat(transform.substring(2));\r\n      return Number(value) + addend;\r\n    }\r\n\r\n    // Arithmetic: - N (subtraction)\r\n    if (transform.startsWith('- ')) {\r\n      const subtrahend = parseFloat(transform.substring(2));\r\n      return Number(value) - subtrahend;\r\n    }\r\n\r\n    // String: toUpperCase()\r\n    if (transform === 'toUpperCase()' || transform === 'toUpperCase') {\r\n      return String(value).toUpperCase();\r\n    }\r\n\r\n    // String: toLowerCase()\r\n    if (transform === 'toLowerCase()' || transform === 'toLowerCase') {\r\n      return String(value).toLowerCase();\r\n    }\r\n\r\n    // String: trim()\r\n    if (transform === 'trim()' || transform === 'trim') {\r\n      return String(value).trim();\r\n    }\r\n\r\n    // Boolean: ! (negation)\r\n    if (transform === '!') {\r\n      return !value;\r\n    }\r\n\r\n    // Default: Unknown transform, log warning and return value as-is\r\n    console.warn(`[TemplateRenderer] Unknown transform: ${transform}`);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format a value for template substitution\r\n   *\r\n   * @param value - Value to format\r\n   * @returns String representation of value\r\n   */\r\n  private static formatValue(value: any): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === 'number' || typeof value === 'boolean') {\r\n      return String(value);\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      return value.map(v => this.formatValue(v)).join(', ');\r\n    }\r\n\r\n    if (typeof value === 'object') {\r\n      // For objects, use JSON.stringify (could be customized)\r\n      return JSON.stringify(value);\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Check if a patch is a template patch\r\n   *\r\n   * @param patch - Patch to check\r\n   * @returns True if patch is a template patch\r\n   */\r\n  static isTemplatePatch(patch: Patch): boolean {\r\n    return patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate';\r\n  }\r\n\r\n  /**\r\n   * Extract bindings from a template patch\r\n   *\r\n   * @param patch - Template patch\r\n   * @returns Array of state variable names, or empty array if not a template patch\r\n   */\r\n  static extractBindings(patch: Patch): string[] {\r\n    if (patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate') {\r\n      // Handle both string bindings and Binding objects\r\n      return patch.templatePatch.bindings.map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Validate that all required bindings are present in state\r\n   *\r\n   * @param templatePatch - Template patch to validate\r\n   * @param stateValues - Available state values\r\n   * @returns True if all bindings are present\r\n   */\r\n  static validateBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): boolean {\r\n    return templatePatch.bindings.every(binding => {\r\n      const key = typeof binding === 'object' && 'stateKey' in binding\r\n        ? binding.stateKey\r\n        : binding as string;\r\n      return key in stateValues;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get missing bindings from state\r\n   *\r\n   * @param templatePatch - Template patch to check\r\n   * @param stateValues - Available state values\r\n   * @returns Array of missing binding names\r\n   */\r\n  static getMissingBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string[] {\r\n    return templatePatch.bindings\r\n      .filter(binding => {\r\n        const key = typeof binding === 'object' && 'stateKey' in binding\r\n          ? binding.stateKey\r\n          : binding as string;\r\n        return !(key in stateValues);\r\n      })\r\n      .map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Render loop template with current array state\r\n   *\r\n   * @param loopTemplate - Loop template data\r\n   * @param stateValues - Current state values (must include array binding)\r\n   * @returns Array of rendered VNodes\r\n   *\r\n   * @example\r\n   * const template = {\r\n   *   array_binding: \"todos\",\r\n   *   item_template: {\r\n   *     type: \"Element\",\r\n   *     tag: \"li\",\r\n   *     children_templates: [{\r\n   *       type: \"Text\",\r\n   *       template_patch: { template: \"{0}\", bindings: [\"item.text\"], slots: [0] }\r\n   *     }]\r\n   *   }\r\n   * };\r\n   * renderLoopTemplate(template, { todos: [{ text: \"A\" }, { text: \"B\" }] })\r\n   * → [<li>A</li>, <li>B</li>]\r\n   */\r\n  static renderLoopTemplate(\r\n    loopTemplate: LoopTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode[] {\r\n    const array = stateValues[loopTemplate.array_binding];\r\n\r\n    if (!Array.isArray(array)) {\r\n      console.warn(\r\n        `[TemplateRenderer] Expected array for '${loopTemplate.array_binding}', got:`,\r\n        array\r\n      );\r\n      return [];\r\n    }\r\n\r\n    return array.map((item, index) => {\r\n      // Build item state with nested object access\r\n      const itemState = {\r\n        ...stateValues,\r\n        item,\r\n        index,\r\n        ...(loopTemplate.index_var ? { [loopTemplate.index_var]: index } : {})\r\n      };\r\n\r\n      // Flatten item object for binding access (item.text → \"item.text\": value)\r\n      const flattenedState = this.flattenItemState(itemState, item);\r\n\r\n      // Render item template\r\n      return this.renderItemTemplate(loopTemplate.item_template, flattenedState);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten item object for template binding access\r\n   *\r\n   * @param itemState - Current state including item\r\n   * @param item - The array item to flatten\r\n   * @returns Flattened state with \"item.property\" keys\r\n   *\r\n   * @example\r\n   * flattenItemState({ item: { id: 1, text: \"A\" } }, { id: 1, text: \"A\" })\r\n   * → { \"item.id\": 1, \"item.text\": \"A\", item: {...}, ... }\r\n   */\r\n  private static flattenItemState(\r\n    itemState: Record<string, any>,\r\n    item: any\r\n  ): Record<string, any> {\r\n    const flattened = { ...itemState };\r\n\r\n    if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\r\n      // Flatten object properties with \"item.\" prefix\r\n      for (const key in item) {\r\n        flattened[`item.${key}`] = item[key];\r\n      }\r\n    }\r\n\r\n    return flattened;\r\n  }\r\n\r\n  /**\r\n   * Render item template to VNode\r\n   *\r\n   * @param itemTemplate - Template for individual list item\r\n   * @param stateValues - State values with flattened item properties\r\n   * @returns Rendered VNode\r\n   */\r\n  private static renderItemTemplate(\r\n    itemTemplate: ItemTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode {\r\n    switch (itemTemplate.type) {\r\n      case 'Text': {\r\n        const content = this.renderTemplatePatch(itemTemplate.template_patch, stateValues);\r\n        return {\r\n          type: 'Text',\r\n          content\r\n        } as VText;\r\n      }\r\n\r\n      case 'Element': {\r\n        // Render props\r\n        const props: Record<string, string> = {};\r\n        if (itemTemplate.props_templates) {\r\n          for (const [propName, propTemplate] of Object.entries(itemTemplate.props_templates)) {\r\n            props[propName] = this.renderTemplatePatch(propTemplate, stateValues);\r\n          }\r\n        }\r\n\r\n        // Render children\r\n        const children = (itemTemplate.children_templates || []).map(childTemplate =>\r\n          this.renderItemTemplate(childTemplate, stateValues)\r\n        );\r\n\r\n        // Render key\r\n        const key = itemTemplate.key_binding\r\n          ? String(stateValues[itemTemplate.key_binding])\r\n          : undefined;\r\n\r\n        return {\r\n          type: 'Element',\r\n          tag: itemTemplate.tag,\r\n          props,\r\n          children,\r\n          key\r\n        } as VElement;\r\n      }\r\n\r\n      default:\r\n        throw new Error(`Unknown item template type: ${(itemTemplate as any).type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert rendered loop VNodes to concrete patches\r\n   * Generates Create/Replace patches for list update\r\n   *\r\n   * @param parentPath - Path to parent element containing the list\r\n   * @param vnodes - Rendered VNodes for list items\r\n   * @returns Array of patches to update the list\r\n   */\r\n  private static convertLoopToPatches(\r\n    parentPath: number[],\r\n    vnodes: VNode[]\r\n  ): Patch[] {\r\n    // For Phase 4A simplicity: Replace entire list with Create patches\r\n    // TODO Phase 4C: Optimize with incremental diffing\r\n\r\n    return vnodes.map((node, index) => ({\r\n      type: 'Create',\r\n      path: [...parentPath, index],\r\n      node\r\n    } as Patch));\r\n  }\r\n}\r\n","import { Patch } from './types';\r\nimport { TemplateRenderer } from './template-renderer';\r\n\r\n/**\r\n * Queued hint with pre-computed patches\r\n */\r\ninterface QueuedHint {\r\n  hintId: string;\r\n  componentId: string;\r\n  patches: Patch[];\r\n  confidence: number;\r\n  predictedState: Record<string, any>;\r\n  queuedAt: number;\r\n  /** True if this hint contains template patches (for statistics) */\r\n  isTemplate?: boolean;\r\n}\r\n\r\n/**\r\n * Manages hint queue for usePredictHint\r\n * Stores pre-computed patches and applies them when state changes match\r\n */\r\nexport class HintQueue {\r\n  private hints: Map<string, QueuedHint> = new Map();\r\n  private debugLogging: boolean;\r\n  private maxHintAge: number = 5000; // 5 seconds TTL\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Queue a hint from the server\r\n   */\r\n  queueHint(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n    predictedState: Record<string, any>;\r\n  }): void {\r\n    const key = `${data.componentId}:${data.hintId}`;\r\n\r\n    // Check if this hint contains template patches\r\n    const isTemplate = data.patches.some(patch => TemplateRenderer.isTemplatePatch(patch));\r\n\r\n    this.hints.set(key, {\r\n      ...data,\r\n      queuedAt: Date.now(),\r\n      isTemplate\r\n    });\r\n\r\n    const patchType = isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n    this.log(`${patchType} hint '${data.hintId}' queued for ${data.componentId}`, data);\r\n\r\n    // Auto-expire old hints\r\n    this.cleanupStaleHints();\r\n  }\r\n\r\n  /**\r\n   * Check if a state change matches any queued hint\r\n   * Returns patches if match found, null otherwise\r\n   */\r\n  matchHint(componentId: string, stateChanges: Record<string, any>): {\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n  } | null {\r\n    // Find hints for this component\r\n    const componentHints = Array.from(this.hints.entries())\r\n      .filter(([key]) => key.startsWith(`${componentId}:`))\r\n      .map(([, hint]) => hint);\r\n\r\n    // Check each hint to see if it matches the state change\r\n    for (const hint of componentHints) {\r\n      if (this.stateMatches(hint.predictedState, stateChanges)) {\r\n        const patchType = hint.isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n        this.log(`${patchType} hint '${hint.hintId}' matched!`, { hint, stateChanges });\r\n\r\n        // Remove from queue\r\n        const key = `${componentId}:${hint.hintId}`;\r\n        this.hints.delete(key);\r\n\r\n        // Materialize template patches with current state values\r\n        const materializedPatches = TemplateRenderer.materializePatches(\r\n          hint.patches,\r\n          stateChanges\r\n        );\r\n\r\n        return {\r\n          hintId: hint.hintId,\r\n          patches: materializedPatches,\r\n          confidence: hint.confidence\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if predicted state matches actual state change\r\n   */\r\n  private stateMatches(predicted: Record<string, any>, actual: Record<string, any>): boolean {\r\n    // Check if all predicted keys match actual values\r\n    for (const [key, predictedValue] of Object.entries(predicted)) {\r\n      if (!(key in actual)) {\r\n        return false; // Key not in actual change\r\n      }\r\n\r\n      // Deep equality check (simplified - could use lodash.isEqual in production)\r\n      if (JSON.stringify(actual[key]) !== JSON.stringify(predictedValue)) {\r\n        return false; // Value doesn't match\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove hints older than maxHintAge\r\n   */\r\n  private cleanupStaleHints(): void {\r\n    const now = Date.now();\r\n    const staleKeys: string[] = [];\r\n\r\n    for (const [key, hint] of this.hints.entries()) {\r\n      if (now - hint.queuedAt > this.maxHintAge) {\r\n        staleKeys.push(key);\r\n      }\r\n    }\r\n\r\n    if (staleKeys.length > 0) {\r\n      this.log(`Removing ${staleKeys.length} stale hint(s)`, staleKeys);\r\n      for (const key of staleKeys) {\r\n        this.hints.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToRemove = Array.from(this.hints.keys())\r\n      .filter(key => key.startsWith(`${componentId}:`));\r\n\r\n    for (const key of keysToRemove) {\r\n      this.hints.delete(key);\r\n    }\r\n\r\n    if (keysToRemove.length > 0) {\r\n      this.log(`Cleared ${keysToRemove.length} hint(s) for component ${componentId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints\r\n   */\r\n  clearAll(): void {\r\n    this.hints.clear();\r\n    this.log('Cleared all hints');\r\n  }\r\n\r\n  /**\r\n   * Get stats about queued hints\r\n   */\r\n  getStats() {\r\n    const allHints = Array.from(this.hints.values());\r\n    const templateHints = allHints.filter(h => h.isTemplate);\r\n    const concreteHints = allHints.filter(h => !h.isTemplate);\r\n\r\n    return {\r\n      totalHints: this.hints.size,\r\n      templateHints: templateHints.length,\r\n      concreteHints: concreteHints.length,\r\n      templatePercentage: this.hints.size > 0\r\n        ? Math.round((templateHints.length / this.hints.size) * 100)\r\n        : 0,\r\n      hintsByComponent: allHints.reduce((acc, hint) => {\r\n        acc[hint.componentId] = (acc[hint.componentId] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>)\r\n    };\r\n  }\r\n\r\n  private log(message: string, ...args: any[]): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact HintQueue] ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Bridge for communicating prediction events to playground parent window\r\n * Emits postMessage events that the React playground can listen to\r\n */\r\nexport class PlaygroundBridge {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Notify that a prediction was received from server\r\n   */\r\n  predictionReceived(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patchCount: number;\r\n    confidence: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:prediction-received',\r\n      data\r\n    });\r\n\r\n    this.log('Prediction received', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache hit occurred (instant patch application)\r\n   */\r\n  cacheHit(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    latency: number;\r\n    confidence: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-hit',\r\n      data: {\r\n        ...data,\r\n        cacheHit: true,\r\n        elapsedMs: data.latency\r\n      }\r\n    });\r\n\r\n    this.log('🟢 CACHE HIT', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache miss occurred (had to compute on server)\r\n   */\r\n  cacheMiss(data: {\r\n    componentId: string;\r\n    methodName: string;\r\n    latency: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-miss',\r\n      data: {\r\n        ...data,\r\n        cacheHit: false,\r\n        elapsedMs: data.latency,\r\n        predictionConfidence: 0\r\n      }\r\n    });\r\n\r\n    this.log('🔴 CACHE MISS', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a correction was applied (prediction was wrong)\r\n   */\r\n  correctionApplied(data: {\r\n    componentId: string;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:correction',\r\n      data\r\n    });\r\n\r\n    this.log('Correction applied (prediction was incorrect)', data);\r\n  }\r\n\r\n  /**\r\n   * Post message to parent window (for iframe communication)\r\n   */\r\n  private postMessage(message: any): void {\r\n    // Check if we're in an iframe\r\n    if (window.parent && window.parent !== window) {\r\n      window.parent.postMessage(message, '*');\r\n    }\r\n\r\n    // Also dispatch as custom event for same-window listeners\r\n    window.dispatchEvent(new CustomEvent(message.type, { detail: message.data }));\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PlaygroundBridge] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Client-Computed State Manager\r\n *\r\n * Manages variables that are computed on the client using external libraries\r\n * (lodash, moment, etc.) and syncs them to the server for SSR.\r\n *\r\n * This enables Option 1 auto-detection: developers use external libraries\r\n * naturally, and the system automatically handles client-server sync.\r\n */\r\n\r\n/**\r\n * A function that computes a value based on component state\r\n */\r\nexport type ComputeFunction = () => any;\r\n\r\n/**\r\n * Registry entry for a single client-computed variable\r\n */\r\ninterface ClientComputedVariable {\r\n  varName: string;\r\n  computeFn: ComputeFunction;\r\n  lastValue?: any;\r\n  dependencies?: string[]; // State keys this variable depends on\r\n}\r\n\r\n/**\r\n * Registry of client-computed variables per component\r\n */\r\ninterface ClientComputedRegistry {\r\n  [componentId: string]: {\r\n    [varName: string]: ClientComputedVariable;\r\n  };\r\n}\r\n\r\nconst computedRegistry: ClientComputedRegistry = {};\r\n\r\n/**\r\n * Debug logging\r\n */\r\nlet debugLogging = false;\r\n\r\nexport function setDebugLogging(enabled: boolean): void {\r\n  debugLogging = enabled;\r\n}\r\n\r\nfunction log(message: string, data?: any): void {\r\n  if (debugLogging) {\r\n    console.log(`[ClientComputed] ${message}`, data || '');\r\n  }\r\n}\r\n\r\n/**\r\n * Register a client-computed variable for a component\r\n *\r\n * @param componentId - Unique identifier for the component\r\n * @param varName - Name of the variable being computed\r\n * @param computeFn - Function that computes the value\r\n * @param dependencies - Optional list of state keys this variable depends on\r\n */\r\nexport function registerClientComputed(\r\n  componentId: string,\r\n  varName: string,\r\n  computeFn: ComputeFunction,\r\n  dependencies?: string[]\r\n): void {\r\n  if (!computedRegistry[componentId]) {\r\n    computedRegistry[componentId] = {};\r\n  }\r\n\r\n  computedRegistry[componentId][varName] = {\r\n    varName,\r\n    computeFn,\r\n    dependencies\r\n  };\r\n\r\n  log(`Registered client-computed variable`, { componentId, varName, dependencies });\r\n}\r\n\r\n/**\r\n * Compute a single variable's value\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The computed value or undefined if not found\r\n */\r\nexport function computeVariable(componentId: string, varName: string): any {\r\n  const computed = computedRegistry[componentId]?.[varName];\r\n\r\n  if (!computed) {\r\n    console.warn(`[ClientComputed] Variable '${varName}' not registered for component '${componentId}'`);\r\n    return undefined;\r\n  }\r\n\r\n  try {\r\n    const value = computed.computeFn();\r\n    computed.lastValue = value;\r\n    log(`Computed variable`, { componentId, varName, value });\r\n    return value;\r\n  } catch (error) {\r\n    console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute all client-computed variables for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all computed values\r\n */\r\nexport function computeAllForComponent(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    log(`No computed variables for component`, { componentId });\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    try {\r\n      const value = variable.computeFn();\r\n      variable.lastValue = value;\r\n      result[varName] = value;\r\n    } catch (error) {\r\n      console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n      result[varName] = undefined;\r\n    }\r\n  }\r\n\r\n  log(`Computed all variables`, { componentId, result });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute only variables that depend on a specific state key\r\n *\r\n * @param componentId - Component identifier\r\n * @param changedStateKey - State key that changed\r\n * @returns Object with affected computed values\r\n */\r\nexport function computeDependentVariables(\r\n  componentId: string,\r\n  changedStateKey: string\r\n): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    // If no dependencies specified, assume it depends on everything\r\n    const shouldRecompute = !variable.dependencies ||\r\n                           variable.dependencies.includes(changedStateKey);\r\n\r\n    if (shouldRecompute) {\r\n      try {\r\n        const value = variable.computeFn();\r\n        variable.lastValue = value;\r\n        result[varName] = value;\r\n        log(`Recomputed dependent variable`, { componentId, varName, changedStateKey, value });\r\n      } catch (error) {\r\n        console.error(`[ClientComputed] Error recomputing '${varName}':`, error);\r\n        result[varName] = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Get the last computed value without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The last computed value or undefined\r\n */\r\nexport function getLastValue(componentId: string, varName: string): any {\r\n  return computedRegistry[componentId]?.[varName]?.lastValue;\r\n}\r\n\r\n/**\r\n * Get all last computed values without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all last computed values\r\n */\r\nexport function getAllLastValues(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    result[varName] = variable.lastValue;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Check if a component has any client-computed variables\r\n *\r\n * @param componentId - Component identifier\r\n * @returns True if component has computed variables\r\n */\r\nexport function hasClientComputed(componentId: string): boolean {\r\n  return !!computedRegistry[componentId] &&\r\n         Object.keys(computedRegistry[componentId]).length > 0;\r\n}\r\n\r\n/**\r\n * Get list of all computed variable names for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Array of variable names\r\n */\r\nexport function getComputedVariableNames(componentId: string): string[] {\r\n  const computed = computedRegistry[componentId];\r\n  return computed ? Object.keys(computed) : [];\r\n}\r\n\r\n/**\r\n * Clear all computed variables for a component\r\n * Used when component is unmounted\r\n *\r\n * @param componentId - Component identifier\r\n */\r\nexport function clearComponent(componentId: string): void {\r\n  delete computedRegistry[componentId];\r\n  log(`Cleared component`, { componentId });\r\n}\r\n\r\n/**\r\n * Clear all computed variables (for testing/cleanup)\r\n */\r\nexport function clearAll(): void {\r\n  Object.keys(computedRegistry).forEach(key => delete computedRegistry[key]);\r\n  log('Cleared all computed variables');\r\n}\r\n\r\n/**\r\n * Get debug info about registered computations\r\n * Useful for dev tools / debugging\r\n */\r\nexport function getDebugInfo(): {\r\n  componentCount: number;\r\n  components: Record<string, { variableCount: number; variables: string[] }>;\r\n} {\r\n  const components: Record<string, { variableCount: number; variables: string[] }> = {};\r\n\r\n  for (const [componentId, computed] of Object.entries(computedRegistry)) {\r\n    const variables = Object.keys(computed);\r\n    components[componentId] = {\r\n      variableCount: variables.length,\r\n      variables\r\n    };\r\n  }\r\n\r\n  return {\r\n    componentCount: Object.keys(computedRegistry).length,\r\n    components\r\n  };\r\n}\r\n","/**\r\n * Template State Manager - Client-Side Template Rendering\r\n *\r\n * Manages \"virtual state\" for text nodes using parameterized templates.\r\n * This enables instant hot reload with 100% coverage and minimal memory.\r\n *\r\n * Architecture:\r\n * - Templates loaded from .templates.json at component init\r\n * - State changes trigger template re-rendering\r\n * - Hot reload updates templates without server round-trip\r\n *\r\n * Memory: ~2KB per component (vs 100KB with prediction-based approach)\r\n * Coverage: 100% (works with any value)\r\n * Latency: <5ms for template updates\r\n */\r\n\r\nexport interface Template {\r\n  /** Template string with {0}, {1}, etc. placeholders */\r\n  template: string;\r\n  /** State bindings that fill the template slots */\r\n  bindings: string[];\r\n  /** Character positions where params are inserted */\r\n  slots: number[];\r\n  /** DOM path to the text node */\r\n  path: number[];\r\n  /** Template type: static | dynamic | attribute */\r\n  type: 'static' | 'dynamic' | 'attribute';\r\n  /** Attribute name (only for attribute templates) */\r\n  attribute?: string;\r\n}\r\n\r\nexport interface TemplateMap {\r\n  component: string;\r\n  version: string;\r\n  generatedAt: number;\r\n  templates: Record<string, Template>;\r\n}\r\n\r\nexport interface TemplatePatch {\r\n  type: 'UpdateTextTemplate' | 'UpdatePropTemplate';\r\n  componentId: string;\r\n  path: number[];\r\n  template: string;\r\n  params: any[];\r\n  bindings: string[];\r\n  slots: number[];\r\n  attribute?: string;\r\n}\r\n\r\n/**\r\n * Template State Manager\r\n */\r\nexport class TemplateStateManager {\r\n  private templates: Map<string, Template> = new Map();\r\n  private componentStates: Map<string, Map<string, any>> = new Map();\r\n\r\n  /**\r\n   * Initialize templates from .templates.json file\r\n   */\r\n  loadTemplateMap(componentId: string, templateMap: TemplateMap): void {\r\n    console.log(`[TemplateState] Loading ${Object.keys(templateMap.templates).length} templates for ${componentId}`);\r\n\r\n    for (const [nodePath, template] of Object.entries(templateMap.templates)) {\r\n      const key = `${componentId}:${nodePath}`;\r\n      this.templates.set(key, template);\r\n    }\r\n\r\n    // Initialize component state tracking\r\n    if (!this.componentStates.has(componentId)) {\r\n      this.componentStates.set(componentId, new Map());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a template for a specific node path\r\n   */\r\n  registerTemplate(\r\n    componentId: string,\r\n    nodePath: string,\r\n    template: Template\r\n  ): void {\r\n    const key = `${componentId}:${nodePath}`;\r\n    this.templates.set(key, template);\r\n  }\r\n\r\n  /**\r\n   * Get template by component ID and node path\r\n   */\r\n  getTemplate(componentId: string, nodePath: string): Template | undefined {\r\n    const key = `${componentId}:${nodePath}`;\r\n    return this.templates.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all templates for a component\r\n   */\r\n  getComponentTemplates(componentId: string): Map<string, Template> {\r\n    const result = new Map<string, Template>();\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        const nodePath = key.substring(componentId.length + 1);\r\n        result.set(nodePath, template);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get templates bound to a specific state variable\r\n   */\r\n  getTemplatesBoundTo(componentId: string, stateKey: string): Template[] {\r\n    const templates: Template[] = [];\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`) && template.bindings.includes(stateKey)) {\r\n        templates.push(template);\r\n      }\r\n    }\r\n\r\n    return templates;\r\n  }\r\n\r\n  /**\r\n   * Update component state (from useState)\r\n   */\r\n  updateState(componentId: string, stateKey: string, value: any): void {\r\n    let state = this.componentStates.get(componentId);\r\n    if (!state) {\r\n      state = new Map();\r\n      this.componentStates.set(componentId, state);\r\n    }\r\n    state.set(stateKey, value);\r\n  }\r\n\r\n  /**\r\n   * Get component state value\r\n   */\r\n  getStateValue(componentId: string, stateKey: string): any {\r\n    return this.componentStates.get(componentId)?.get(stateKey);\r\n  }\r\n\r\n  /**\r\n   * Render template with current state values\r\n   */\r\n  render(componentId: string, nodePath: string): string | null {\r\n    const template = this.getTemplate(componentId, nodePath);\r\n    if (!template) return null;\r\n\r\n    // Get state values for bindings\r\n    const params = template.bindings.map(binding =>\r\n      this.getStateValue(componentId, binding)\r\n    );\r\n\r\n    return this.renderWithParams(template.template, params);\r\n  }\r\n\r\n  /**\r\n   * Render template with specific parameter values\r\n   */\r\n  renderWithParams(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace {0}, {1}, etc. with parameter values\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = param !== undefined && param !== null ? String(param) : '';\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Apply template patch from hot reload\r\n   */\r\n  applyTemplatePatch(patch: TemplatePatch): { text: string; path: number[] } | null {\r\n    const { componentId, path, template, params, bindings, slots, attribute } = patch;\r\n\r\n    // Render template with params\r\n    const text = this.renderWithParams(template, params);\r\n\r\n    // Build node path key\r\n    const nodePath = this.buildNodePathKey(path);\r\n    const key = `${componentId}:${nodePath}`;\r\n\r\n    // Update stored template\r\n    const existingTemplate = this.templates.get(key);\r\n    if (existingTemplate) {\r\n      existingTemplate.template = template;\r\n      existingTemplate.bindings = bindings;\r\n      existingTemplate.slots = slots;\r\n      if (attribute) {\r\n        existingTemplate.attribute = attribute;\r\n      }\r\n    } else {\r\n      // Register new template\r\n      this.templates.set(key, {\r\n        template,\r\n        bindings,\r\n        slots,\r\n        path,\r\n        type: attribute ? 'attribute' : 'dynamic',\r\n        attribute\r\n      });\r\n    }\r\n\r\n    console.log(`[TemplateState] Applied template patch: \"${template}\" → \"${text}\"`);\r\n\r\n    return { text, path };\r\n  }\r\n\r\n  /**\r\n   * Build node path key from path array\r\n   * Example: [0, 1, 0] → \"0_1_0\"\r\n   */\r\n  private buildNodePathKey(path: number[]): string {\r\n    return path.join('_');\r\n  }\r\n\r\n  /**\r\n   * Clear all templates for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToDelete: string[] = [];\r\n\r\n    for (const key of this.templates.keys()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    for (const key of keysToDelete) {\r\n      this.templates.delete(key);\r\n    }\r\n\r\n    this.componentStates.delete(componentId);\r\n  }\r\n\r\n  /**\r\n   * Clear all templates\r\n   */\r\n  clear(): void {\r\n    this.templates.clear();\r\n    this.componentStates.clear();\r\n  }\r\n\r\n  /**\r\n   * Get statistics\r\n   */\r\n  getStats() {\r\n    const componentCount = this.componentStates.size;\r\n    const templateCount = this.templates.size;\r\n\r\n    // Estimate memory usage (rough estimate)\r\n    let memoryBytes = 0;\r\n    for (const template of this.templates.values()) {\r\n      memoryBytes += template.template.length * 2; // UTF-16\r\n      memoryBytes += template.bindings.length * 20; // Rough estimate\r\n      memoryBytes += template.slots.length * 4; // 4 bytes per number\r\n      memoryBytes += template.path.length * 4;\r\n    }\r\n\r\n    return {\r\n      componentCount,\r\n      templateCount,\r\n      memoryKB: Math.round(memoryBytes / 1024),\r\n      avgTemplatesPerComponent: templateCount / Math.max(componentCount, 1)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Global template state manager instance\r\n */\r\nexport const templateState = new TemplateStateManager();\r\n","/**\r\n * Server Task - Client-side representation of a long-running server task\r\n *\r\n * Provides reactive state management for async operations that execute on the server.\r\n * Automatically syncs state changes from server and triggers component re-renders.\r\n */\r\n\r\nexport type ServerTaskStatus = 'idle' | 'running' | 'complete' | 'error' | 'cancelled';\r\n\r\n/**\r\n * Options for configuring a server task\r\n */\r\nexport interface ServerTaskOptions {\r\n  /** Enable streaming mode (for async generators) */\r\n  stream?: boolean;\r\n  /** Estimated number of chunks (for progress calculation in streaming mode) */\r\n  estimatedChunks?: number;\r\n  /** Callback invoked for each chunk in streaming mode */\r\n  onChunk?: (chunk: any, index: number) => void;\r\n  /** Maximum number of chunks to keep in memory (for memory management) */\r\n  maxChunksInMemory?: number;\r\n}\r\n\r\n/**\r\n * Server task interface - Represents a long-running operation on the server\r\n */\r\nexport interface ServerTask<T> {\r\n  // Status\r\n  status: ServerTaskStatus;\r\n  progress: number; // 0.0 to 1.0\r\n\r\n  // Result\r\n  result?: T;\r\n  error?: Error;\r\n\r\n  // Streaming-specific\r\n  streaming: boolean;\r\n  partial?: T; // Latest partial result (accumulated)\r\n  chunks: T[]; // All chunks received so far\r\n  chunkCount: number; // Number of chunks received\r\n\r\n  // Control methods\r\n  start(...args: any[]): void;\r\n  retry(...args: any[]): void;\r\n  cancel(): void;\r\n\r\n  // Promise interface (for await)\r\n  promise: Promise<T>;\r\n\r\n  // Metadata\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number; // milliseconds\r\n\r\n  // Computed properties\r\n  readonly idle: boolean;\r\n  readonly running: boolean;\r\n  readonly complete: boolean;\r\n  readonly failed: boolean;\r\n  readonly cancelled: boolean;\r\n}\r\n\r\n/**\r\n * Server task implementation\r\n */\r\nexport class ServerTaskImpl<T> implements ServerTask<T> {\r\n  status: ServerTaskStatus = 'idle';\r\n  progress: number = 0;\r\n  result?: T;\r\n  error?: Error;\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number;\r\n\r\n  // Streaming props\r\n  streaming: boolean;\r\n  partial?: T;\r\n  chunks: T[] = [];\r\n  chunkCount: number = 0;\r\n\r\n  private _promise?: Promise<T>;\r\n  private _resolve?: (value: T) => void;\r\n  private _reject?: (error: Error) => void;\r\n  private _options: ServerTaskOptions;\r\n\r\n  constructor(\r\n    private taskId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    options: ServerTaskOptions = {}\r\n  ) {\r\n    this._options = options;\r\n    this.streaming = options.stream || false;\r\n    this._createPromise();\r\n  }\r\n\r\n  private _createPromise(): void {\r\n    this._promise = new Promise<T>((resolve, reject) => {\r\n      this._resolve = resolve;\r\n      this._reject = reject;\r\n    });\r\n  }\r\n\r\n  get promise(): Promise<T> {\r\n    return this._promise!;\r\n  }\r\n\r\n  get idle(): boolean {\r\n    return this.status === 'idle';\r\n  }\r\n\r\n  get running(): boolean {\r\n    return this.status === 'running';\r\n  }\r\n\r\n  get complete(): boolean {\r\n    return this.status === 'complete';\r\n  }\r\n\r\n  get failed(): boolean {\r\n    return this.status === 'error';\r\n  }\r\n\r\n  get cancelled(): boolean {\r\n    return this.status === 'cancelled';\r\n  }\r\n\r\n  /**\r\n   * Start the server task with optional arguments\r\n   */\r\n  start(...args: any[]): void {\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    // Clear previous results\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    // Trigger re-render to show \"running\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server task via SignalR\r\n    this.signalR.invoke('StartServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to start task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retry a failed or cancelled task\r\n   */\r\n  retry(...args: any[]): void {\r\n    if (this.status !== 'error' && this.status !== 'cancelled') {\r\n      console.warn('[Minimact] Can only retry failed or cancelled tasks');\r\n      return;\r\n    }\r\n\r\n    // Reset promise for new attempt\r\n    this._createPromise();\r\n\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    this._triggerRerender();\r\n\r\n    this.signalR.invoke('RetryServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to retry task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Cancel a running task\r\n   */\r\n  cancel(): void {\r\n    if (this.status !== 'running') {\r\n      console.warn('[Minimact] Can only cancel running tasks');\r\n      return;\r\n    }\r\n\r\n    this.signalR.invoke('CancelServerTask', this.componentId, this.taskId)\r\n      .then(() => {\r\n        this.status = 'cancelled';\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(new Error('Task cancelled by user'));\r\n        this._triggerRerender();\r\n      })\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to cancel task ${this.taskId}:`, err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update task state from server\r\n   * Called by Minimact when server sends task state updates via SignalR\r\n   */\r\n  _updateFromServer(state: any): void {\r\n    const previousStatus = this.status;\r\n\r\n    this.status = state.status;\r\n    this.progress = state.progress || 0;\r\n    this.result = state.result;\r\n\r\n    if (state.error) {\r\n      this.error = new Error(state.error);\r\n    }\r\n\r\n    if (state.startedAt) {\r\n      this.startedAt = new Date(state.startedAt);\r\n    }\r\n\r\n    if (state.completedAt) {\r\n      this.completedAt = new Date(state.completedAt);\r\n    }\r\n\r\n    if (state.duration) {\r\n      this.duration = state.duration;\r\n    }\r\n\r\n    // Resolve/reject promise based on status change\r\n    if (this.status === 'complete' && previousStatus !== 'complete') {\r\n      if (this._resolve) {\r\n        this._resolve(this.result!);\r\n      }\r\n    } else if (this.status === 'error' && previousStatus !== 'error') {\r\n      if (this._reject) {\r\n        this._reject(this.error!);\r\n      }\r\n    } else if (this.status === 'cancelled' && previousStatus !== 'cancelled') {\r\n      if (this._reject) {\r\n        this._reject(new Error('Task cancelled'));\r\n      }\r\n    }\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousStatus !== this.status || this.progress !== state.progress) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.taskId]: {\r\n        status: this.status,\r\n        progress: this.progress,\r\n        chunkCount: this.chunkCount\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Task state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Task state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Server Reducer - Client-side representation of a reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n */\r\n\r\n/**\r\n * Server reducer interface - Represents a reducer executing on the server\r\n */\r\nexport interface ServerReducer<TState, TAction> {\r\n  // Current state\r\n  state: TState;\r\n\r\n  // Dispatch an action to the server\r\n  dispatch(action: TAction): void;\r\n\r\n  // Async dispatch with Promise interface (for await)\r\n  dispatchAsync(action: TAction): Promise<TState>;\r\n\r\n  // Status flags\r\n  readonly dispatching: boolean;\r\n  readonly error?: Error;\r\n\r\n  // Metadata\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n}\r\n\r\n/**\r\n * Server reducer implementation\r\n */\r\nexport class ServerReducerImpl<TState, TAction> implements ServerReducer<TState, TAction> {\r\n  state: TState;\r\n  dispatching: boolean = false;\r\n  error?: Error;\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n\r\n  private _pendingPromise?: Promise<TState>;\r\n  private _pendingResolve?: (value: TState) => void;\r\n  private _pendingReject?: (error: Error) => void;\r\n\r\n  constructor(\r\n    private reducerId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    initialState: TState\r\n  ) {\r\n    this.state = initialState;\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server (fire-and-forget)\r\n   */\r\n  dispatch(action: TAction): void {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging (if action has a 'type' field)\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server and wait for the result\r\n   */\r\n  dispatchAsync(action: TAction): Promise<TState> {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Create promise for this dispatch\r\n    this._pendingPromise = new Promise<TState>((resolve, reject) => {\r\n      this._pendingResolve = resolve;\r\n      this._pendingReject = reject;\r\n    });\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._pendingReject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n\r\n    return this._pendingPromise;\r\n  }\r\n\r\n  /**\r\n   * Update reducer state from server\r\n   * Called by Minimact when server sends reducer state updates via SignalR\r\n   */\r\n  _updateFromServer(newState: TState, error?: string): void {\r\n    const previousState = this.state;\r\n\r\n    this.state = newState;\r\n    this.dispatching = false;\r\n\r\n    if (error) {\r\n      this.error = new Error(error);\r\n      this._pendingReject?.(this.error);\r\n    } else {\r\n      this.error = undefined;\r\n      this._pendingResolve?.(newState);\r\n    }\r\n\r\n    // Clear pending promise handlers\r\n    this._pendingPromise = undefined;\r\n    this._pendingResolve = undefined;\r\n    this._pendingReject = undefined;\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousState !== newState) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.reducerId]: {\r\n        state: this.state,\r\n        dispatching: this.dispatching,\r\n        error: this.error?.message\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Reducer state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Reducer state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * useComputed Hook\r\n *\r\n * Compute values on the client using browser-only APIs or external libraries,\r\n * then sync to the server for rendering.\r\n *\r\n * This replaces the conceptually flawed \"useClientState\" with a sound approach:\r\n * - Client computes values using browser APIs (lodash, moment, geolocation, crypto)\r\n * - Results are synced to server via UpdateClientComputedState\r\n * - Server accesses values via GetClientState<T>(key) for rendering\r\n * - Server still does ALL rendering (dehydrationist architecture)\r\n */\r\n\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface UseComputedOptions<T = any> {\r\n  /** Enable memoization (default: true) */\r\n  memoize?: boolean;\r\n  /** Cache expiry in milliseconds (e.g., 5000 = 5 seconds) */\r\n  expiry?: number;\r\n  /** Debounce sync to server (milliseconds) */\r\n  debounce?: number;\r\n  /** Throttle sync to server (milliseconds) */\r\n  throttle?: number;\r\n  /** Initial value before first computation */\r\n  initialValue?: T;\r\n}\r\n\r\ninterface ComputedCache<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  deps: any[];\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\nlet computedIndex = 0;\r\n\r\n/**\r\n * Set the current component context for useComputed\r\n * Called by setComponentContext in hooks.ts\r\n */\r\nexport function setComputedContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * Clear the current component context\r\n */\r\nexport function clearComputedContext(): void {\r\n  currentContext = null;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * useComputed Hook\r\n *\r\n * @param key - Unique identifier for server-side access via GetClientState<T>(key)\r\n * @param computeFn - Function that computes the value (runs on client)\r\n * @param deps - Dependency array (like useEffect)\r\n * @param options - Configuration options\r\n * @returns The computed value\r\n *\r\n * @example\r\n * // With lodash\r\n * const sortedUsers = useComputed('sortedUsers', () => {\r\n *   return _.sortBy(users, 'name');\r\n * }, [users]);\r\n *\r\n * @example\r\n * // With geolocation\r\n * const location = useComputed('location', async () => {\r\n *   const pos = await new Promise((resolve) => {\r\n *     navigator.geolocation.getCurrentPosition(resolve);\r\n *   });\r\n *   return { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n * }, []);\r\n *\r\n * @example\r\n * // With memoization and expiry\r\n * const result = useComputed('result', () => compute(data), [data], {\r\n *   memoize: true,\r\n *   expiry: 5000  // Cache for 5 seconds\r\n * });\r\n */\r\nexport function useComputed<T>(\r\n  key: string,\r\n  computeFn: () => T,\r\n  deps: any[] = [],\r\n  options: UseComputedOptions<T> = {}\r\n): T {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useComputed must be called within a component render');\r\n  }\r\n\r\n  const {\r\n    memoize = true,  // Default to true for performance\r\n    expiry,\r\n    debounce,\r\n    throttle,\r\n    initialValue\r\n  } = options;\r\n\r\n  const context = currentContext;\r\n  const index = computedIndex++;\r\n  const computedKey = `computed_${index}_${key}`;\r\n\r\n  // Store computed value in state\r\n  const [value, setValue] = useState<T>(\r\n    initialValue !== undefined ? initialValue : null as T\r\n  );\r\n\r\n  // Cache for memoization\r\n  const cache = useRef<ComputedCache<T> | null>(null);\r\n\r\n  // Debounce timer ref\r\n  const debounceTimer = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if we should use cached value\r\n    if (memoize && cache.current) {\r\n      // Check if deps changed\r\n      const depsChanged = deps.length !== cache.current.deps.length ||\r\n        deps.some((dep, i) => !Object.is(dep, cache.current!.deps[i]));\r\n\r\n      if (!depsChanged) {\r\n        // Deps haven't changed\r\n        if (expiry) {\r\n          // Check if cache expired\r\n          const age = Date.now() - cache.current.timestamp;\r\n          if (age < expiry) {\r\n            // Cache is still valid, use cached value\r\n            return;\r\n          }\r\n          // Cache expired, continue to recompute\r\n        } else {\r\n          // No expiry, use cached value indefinitely\r\n          return;\r\n        }\r\n      }\r\n      // Deps changed, continue to recompute\r\n    }\r\n\r\n    // Compute new value\r\n    let computed: T;\r\n    try {\r\n      computed = computeFn();\r\n    } catch (error) {\r\n      console.error(`[Minimact] Error in useComputed('${key}'):`, error);\r\n      throw error;\r\n    }\r\n\r\n    // Handle async computations\r\n    if (computed instanceof Promise) {\r\n      computed.then((resolvedValue) => {\r\n        // Update cache if memoization enabled\r\n        if (memoize) {\r\n          cache.current = {\r\n            value: resolvedValue,\r\n            timestamp: Date.now(),\r\n            deps: [...deps]\r\n          };\r\n        }\r\n\r\n        // Update local state\r\n        setValue(resolvedValue);\r\n\r\n        // Sync to server\r\n        syncToServer(resolvedValue);\r\n      }).catch((error) => {\r\n        console.error(`[Minimact] Async error in useComputed('${key}'):`, error);\r\n      });\r\n\r\n      return; // Don't sync yet, wait for promise to resolve\r\n    }\r\n\r\n    // Update cache if memoization enabled\r\n    if (memoize) {\r\n      cache.current = {\r\n        value: computed,\r\n        timestamp: Date.now(),\r\n        deps: [...deps]\r\n      };\r\n    }\r\n\r\n    // Update local state\r\n    setValue(computed);\r\n\r\n    // Sync to server\r\n    syncToServer(computed);\r\n\r\n  }, deps);\r\n\r\n  /**\r\n   * Sync computed value to server via SignalR\r\n   */\r\n  function syncToServer(computedValue: T): void {\r\n    const doSync = () => {\r\n      if (!context.signalR) {\r\n        console.warn(`[Minimact] SignalR not available, cannot sync useComputed('${key}')`);\r\n        return;\r\n      }\r\n\r\n      context.signalR.updateClientComputedState(context.componentId, { [key]: computedValue })\r\n        .catch(err => {\r\n          console.error(`[Minimact] Failed to sync computed state '${key}':`, err);\r\n        });\r\n    };\r\n\r\n    // Apply debounce if specified\r\n    if (debounce) {\r\n      if (debounceTimer.current !== null) {\r\n        clearTimeout(debounceTimer.current);\r\n      }\r\n      debounceTimer.current = window.setTimeout(() => {\r\n        doSync();\r\n        debounceTimer.current = null;\r\n      }, debounce);\r\n      return;\r\n    }\r\n\r\n    // TODO: Implement throttle\r\n    if (throttle) {\r\n      // For now, just sync immediately\r\n      // Proper throttle implementation would track last sync time\r\n      doSync();\r\n      return;\r\n    }\r\n\r\n    // No debounce/throttle, sync immediately\r\n    doSync();\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { HintQueue } from './hint-queue';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { IConnectionManager } from './connection-manager';\r\nimport { templateState } from './template-state';\r\nimport { ServerTask, ServerTaskImpl, ServerTaskOptions } from './server-task';\r\nimport { ServerReducer, ServerReducerImpl } from './server-reducer';\r\nimport { setComputedContext } from './useComputed';\r\n\r\n/**\r\n * Component instance context for hooks\r\n */\r\nexport interface ComponentContext {\r\n  componentId: string;\r\n  element: HTMLElement;\r\n  state: Map<string, any>;\r\n  effects: Array<{ callback: () => void | (() => void), deps: any[] | undefined, cleanup?: () => void }>;\r\n  refs: Map<string, { current: any }>;\r\n  serverTasks?: Map<string, ServerTaskImpl<any>>; // For useServerTask integration\r\n  serverReducers?: Map<string, ServerReducerImpl<any, any>>; // For useServerReducer integration\r\n  computedValues?: Map<string, any>; // For useComputed integration\r\n  hintQueue: HintQueue;\r\n  domPatcher: DOMPatcher;\r\n  playgroundBridge?: PlaygroundBridge;\r\n  signalR: IConnectionManager; // For syncing state to server (works with SignalR or SignalM)\r\n  // Note: domElementStates and confidenceWorker are added via module augmentation by minimact-punch\r\n}\r\n\r\n// Global context tracking\r\nlet currentContext: ComponentContext | null = null;\r\nlet stateIndex = 0;\r\nlet effectIndex = 0;\r\nlet refIndex = 0;\r\nlet serverTaskIndex = 0;\r\nlet serverReducerIndex = 0;\r\n\r\n/**\r\n * Set the current component context (called before render)\r\n */\r\nexport function setComponentContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  stateIndex = 0;\r\n  effectIndex = 0;\r\n  refIndex = 0;\r\n  serverTaskIndex = 0;\r\n  serverReducerIndex = 0;\r\n\r\n  // Reset computed index for useComputed hook\r\n  setComputedContext(context);\r\n}\r\n\r\n/**\r\n * Clear the current component context (called after render)\r\n */\r\nexport function clearComponentContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Find DOM element by path array\r\n * Example: [0, 1, 0] → first child, second child, first child\r\n */\r\nfunction findElementByPath(root: HTMLElement, path: number[]): Node | null {\r\n  let current: Node | null = root;\r\n\r\n  for (const index of path) {\r\n    if (!current || !current.childNodes) return null;\r\n    current = current.childNodes[index] || null;\r\n  }\r\n\r\n  return current;\r\n}\r\n\r\n/**\r\n * useState hook - manages component state with hint queue integration\r\n */\r\nexport function useState<T>(initialValue: T): [T, (newValue: T | ((prev: T) => T)) => void] {\r\n  if (!currentContext) {\r\n    throw new Error('useState must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = stateIndex++;\r\n  const stateKey = `state_${index}`;\r\n\r\n  // Initialize state if not exists\r\n  if (!context.state.has(stateKey)) {\r\n    context.state.set(stateKey, initialValue);\r\n  }\r\n\r\n  const currentValue = context.state.get(stateKey) as T;\r\n\r\n  const setState = (newValue: T | ((prev: T) => T)) => {\r\n    const startTime = performance.now();\r\n\r\n    const actualNewValue = typeof newValue === 'function'\r\n      ? (newValue as (prev: T) => T)(context.state.get(stateKey) as T)\r\n      : newValue;\r\n\r\n    // Build state change object for hint matching\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: actualNewValue\r\n    };\r\n\r\n    // Check hint queue for match\r\n    const hint = context.hintQueue.matchHint(context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // 🟢 CACHE HIT! Apply queued patches immediately\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🟢 CACHE HIT! Hint '${hint.hintId}' matched - applying ${hint.patches.length} patches in ${latency.toFixed(2)}ms`);\r\n\r\n      context.domPatcher.applyPatches(context.element, hint.patches);\r\n\r\n      // Notify playground of cache hit\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheHit({\r\n          componentId: context.componentId,\r\n          hintId: hint.hintId,\r\n          latency,\r\n          confidence: hint.confidence,\r\n          patchCount: hint.patches.length\r\n        });\r\n      }\r\n    } else {\r\n      // 🔴 CACHE MISS - No prediction found\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🔴 CACHE MISS - No prediction for state change:`, stateChanges);\r\n\r\n      // Notify playground of cache miss\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheMiss({\r\n          componentId: context.componentId,\r\n          methodName: `setState(${stateKey})`,\r\n          latency,\r\n          patchCount: 0\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update state\r\n    context.state.set(stateKey, actualNewValue);\r\n\r\n    // Update template state for template rendering\r\n    templateState.updateState(context.componentId, stateKey, actualNewValue);\r\n\r\n    // Re-render templates bound to this state\r\n    const boundTemplates = templateState.getTemplatesBoundTo(context.componentId, stateKey);\r\n    for (const template of boundTemplates) {\r\n      // Build node path from template path array\r\n      const nodePath = template.path.join('_');\r\n\r\n      // Render template with new value\r\n      const newText = templateState.render(context.componentId, nodePath);\r\n\r\n      if (newText !== null) {\r\n        // Find DOM element by path and update it\r\n        const element = findElementByPath(context.element, template.path);\r\n        if (element) {\r\n          if (element.nodeType === Node.TEXT_NODE) {\r\n            element.textContent = newText;\r\n          } else if (element instanceof HTMLElement) {\r\n            // For attribute templates\r\n            if (template.attribute) {\r\n              element.setAttribute(template.attribute, newText);\r\n            } else {\r\n              element.textContent = newText;\r\n            }\r\n          }\r\n\r\n          console.log(`[Minimact] 📋 Template updated: \"${newText}\" (${stateKey} changed)`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sync state to server to prevent stale data\r\n    context.signalR.updateComponentState(context.componentId, stateKey, actualNewValue)\r\n      .catch(err => {\r\n        console.error('[Minimact] Failed to sync state to server:', err);\r\n      });\r\n  };\r\n\r\n  // If value is an array, add array helpers\r\n  if (Array.isArray(currentValue)) {\r\n    return [currentValue, createArrayStateSetter(setState, currentValue, stateKey, context)] as any;\r\n  }\r\n\r\n  return [currentValue, setState];\r\n}\r\n\r\n/**\r\n * useEffect hook - runs side effects after render\r\n */\r\nexport function useEffect(callback: () => void | (() => void), deps?: any[]): void {\r\n  if (!currentContext) {\r\n    throw new Error('useEffect must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = effectIndex++;\r\n\r\n  // Get or create effect entry\r\n  if (!context.effects[index]) {\r\n    context.effects[index] = {\r\n      callback,\r\n      deps,\r\n      cleanup: undefined\r\n    };\r\n\r\n    // Run effect after render\r\n    queueMicrotask(() => {\r\n      const cleanup = callback();\r\n      if (typeof cleanup === 'function') {\r\n        context.effects[index].cleanup = cleanup;\r\n      }\r\n    });\r\n  } else {\r\n    const effect = context.effects[index];\r\n\r\n    // Check if deps changed\r\n    const depsChanged = !deps || !effect.deps ||\r\n      deps.length !== effect.deps.length ||\r\n      deps.some((dep, i) => dep !== effect.deps![i]);\r\n\r\n    if (depsChanged) {\r\n      // Run cleanup if exists\r\n      if (effect.cleanup) {\r\n        effect.cleanup();\r\n      }\r\n\r\n      // Update effect\r\n      effect.callback = callback;\r\n      effect.deps = deps;\r\n\r\n      // Run new effect\r\n      queueMicrotask(() => {\r\n        const cleanup = callback();\r\n        if (typeof cleanup === 'function') {\r\n          effect.cleanup = cleanup;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * useRef hook - creates a mutable ref object\r\n */\r\nexport function useRef<T>(initialValue: T): { current: T } {\r\n  if (!currentContext) {\r\n    throw new Error('useRef must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = refIndex++;\r\n  const refKey = `ref_${index}`;\r\n\r\n  // Initialize ref if not exists\r\n  if (!context.refs.has(refKey)) {\r\n    context.refs.set(refKey, { current: initialValue });\r\n  }\r\n\r\n  return context.refs.get(refKey)!;\r\n}\r\n\r\n/**\r\n * Cleanup all effects for a component\r\n */\r\nexport function cleanupEffects(context: ComponentContext): void {\r\n  for (const effect of context.effects) {\r\n    if (effect.cleanup) {\r\n      effect.cleanup();\r\n    }\r\n  }\r\n  context.effects = [];\r\n}\r\n\r\n/**\r\n * Array operation metadata for semantic state updates\r\n * @public\r\n */\r\nexport interface ArrayOperation {\r\n  type: 'Append' | 'Prepend' | 'InsertAt' | 'RemoveAt' | 'UpdateAt';\r\n  index?: number;\r\n  item?: any;\r\n}\r\n\r\n/**\r\n * Enhanced state setter with array helper methods\r\n */\r\nexport interface ArrayStateSetter<T> {\r\n  // Standard setter (for compatibility)\r\n  (newValue: T[] | ((prev: T[]) => T[])): void;\r\n\r\n  // Array operation helpers\r\n  append(item: T): void;\r\n  prepend(item: T): void;\r\n  insertAt(index: number, item: T): void;\r\n  removeAt(index: number): void;\r\n  updateAt(index: number, updates: Partial<T> | ((prev: T) => T)): void;\r\n  clear(): void;\r\n\r\n  // Batch operations\r\n  appendMany(items: T[]): void;\r\n  removeMany(indices: number[]): void;\r\n\r\n  // Conditional operations\r\n  removeWhere(predicate: (item: T) => boolean): void;\r\n  updateWhere(predicate: (item: T) => boolean, updates: Partial<T>): void;\r\n}\r\n\r\n/**\r\n * Create array state setter with semantic helper methods\r\n */\r\nfunction createArrayStateSetter<T>(\r\n  baseSetState: (value: T[]) => void,\r\n  currentArray: T[],\r\n  stateKey: string,\r\n  context: ComponentContext\r\n): ArrayStateSetter<T> {\r\n  // Base setter function\r\n  const setter: any = baseSetState;\r\n\r\n  // Append helper\r\n  setter.append = (item: T) => {\r\n    const newArray = [...currentArray, item];\r\n\r\n    // Update local state\r\n    context.state.set(stateKey, newArray);\r\n\r\n    // Update template state\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    // Notify server of APPEND operation (not just new array)\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Append', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array append to server:', err);\r\n    });\r\n\r\n    // TODO: Try to predict patch using loop template\r\n    console.log(`[Minimact] 🔵 Array append: ${stateKey}`, item);\r\n  };\r\n\r\n  // Prepend helper\r\n  setter.prepend = (item: T) => {\r\n    const newArray = [item, ...currentArray];\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Prepend', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array prepend to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array prepend: ${stateKey}`, item);\r\n  };\r\n\r\n  // InsertAt helper\r\n  setter.insertAt = (index: number, item: T) => {\r\n    const newArray = [...currentArray];\r\n    newArray.splice(index, 0, item);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'InsertAt', index, item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array insert to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array insertAt(${index}): ${stateKey}`, item);\r\n  };\r\n\r\n  // RemoveAt helper\r\n  setter.removeAt = (index: number) => {\r\n    const newArray = currentArray.filter((_, i) => i !== index);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'RemoveAt', index }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array remove to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array removeAt(${index}): ${stateKey}`);\r\n  };\r\n\r\n  // UpdateAt helper\r\n  setter.updateAt = (index: number, updates: Partial<T> | ((prev: T) => T)) => {\r\n    const newArray = [...currentArray];\r\n    newArray[index] = typeof updates === 'function'\r\n      ? (updates as (prev: T) => T)(currentArray[index])\r\n      : { ...currentArray[index] as any, ...updates };\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'UpdateAt', index, item: newArray[index] }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array update to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array updateAt(${index}): ${stateKey}`, newArray[index]);\r\n  };\r\n\r\n  // Clear helper\r\n  setter.clear = () => {\r\n    baseSetState([]);\r\n  };\r\n\r\n  // RemoveWhere helper\r\n  setter.removeWhere = (predicate: (item: T) => boolean) => {\r\n    const newArray = currentArray.filter(item => !predicate(item));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // UpdateWhere helper\r\n  setter.updateWhere = (predicate: (item: T) => boolean, updates: Partial<T>) => {\r\n    const newArray = currentArray.map(item =>\r\n      predicate(item) ? { ...item as any, ...updates } : item\r\n    );\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // AppendMany helper\r\n  setter.appendMany = (items: T[]) => {\r\n    const newArray = [...currentArray, ...items];\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // RemoveMany helper\r\n  setter.removeMany = (indices: number[]) => {\r\n    const newArray = currentArray.filter((_, i) => !indices.includes(i));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  return setter as ArrayStateSetter<T>;\r\n}\r\n\r\n/**\r\n * useServerTask - Execute long-running operations on the server with reactive client state\r\n *\r\n * @param taskFactory - Optional async function (will be transpiled to C# by Babel plugin)\r\n * @param options - Configuration options for the server task\r\n * @returns ServerTask interface with status, result, and control methods\r\n *\r\n * @example\r\n * const analysis = useServerTask(async () => {\r\n *   // This code runs on the SERVER (transpiled to C#)\r\n *   const data = await fetchData();\r\n *   return processData(data);\r\n * });\r\n *\r\n * // In JSX:\r\n * <button onClick={analysis.start}>Start</button>\r\n * {analysis.running && <Spinner />}\r\n * {analysis.complete && <div>{analysis.result}</div>}\r\n */\r\nexport function useServerTask<T>(\r\n  taskFactory?: () => Promise<T>,\r\n  options: ServerTaskOptions = {}\r\n): ServerTask<T> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerTask must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverTaskIndex++;\r\n  const taskKey = `serverTask_${index}`;\r\n\r\n  // Initialize serverTasks map if not exists\r\n  if (!context.serverTasks) {\r\n    context.serverTasks = new Map();\r\n  }\r\n\r\n  // Get or create server task instance\r\n  if (!context.serverTasks.has(taskKey)) {\r\n    const task = new ServerTaskImpl<T>(\r\n      taskKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      options\r\n    );\r\n\r\n    context.serverTasks.set(taskKey, task);\r\n  }\r\n\r\n  return context.serverTasks.get(taskKey)!;\r\n}\r\n\r\n/**\r\n * useServerReducer - React-like reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n *\r\n * @example\r\n * ```tsx\r\n * type CounterState = { count: number };\r\n * type CounterAction = { type: 'increment' } | { type: 'decrement' } | { type: 'set', value: number };\r\n *\r\n * const counter = useServerReducer<CounterState, CounterAction>({ count: 0 });\r\n *\r\n * // In JSX:\r\n * <button onClick={() => counter.dispatch({ type: 'increment' })}>+</button>\r\n * <span>{counter.state.count}</span>\r\n * <button onClick={() => counter.dispatch({ type: 'decrement' })}>-</button>\r\n * {counter.dispatching && <Spinner />}\r\n * {counter.error && <div>Error: {counter.error.message}</div>}\r\n * ```\r\n *\r\n * @example\r\n * ```tsx\r\n * // With async dispatch (await the result)\r\n * const handleReset = async () => {\r\n *   const newState = await counter.dispatchAsync({ type: 'set', value: 0 });\r\n *   console.log('Counter reset to:', newState.count);\r\n * };\r\n * ```\r\n */\r\nexport function useServerReducer<TState, TAction>(\r\n  initialState: TState\r\n): ServerReducer<TState, TAction> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerReducer must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverReducerIndex++;\r\n  const reducerKey = `serverReducer_${index}`;\r\n\r\n  // Initialize serverReducers map if not exists\r\n  if (!context.serverReducers) {\r\n    context.serverReducers = new Map();\r\n  }\r\n\r\n  // Get or create server reducer instance\r\n  if (!context.serverReducers.has(reducerKey)) {\r\n    const reducer = new ServerReducerImpl<TState, TAction>(\r\n      reducerKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      initialState\r\n    );\r\n\r\n    context.serverReducers.set(reducerKey, reducer);\r\n  }\r\n\r\n  return context.serverReducers.get(reducerKey)!;\r\n}\r\n","/**\r\n * useContext - Server-side cache system with multiple scope types\r\n *\r\n * This reimagines React's context API as a Redis-like in-memory cache\r\n * that enables shared state across components with flexible lifetime management.\r\n */\r\n\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface ContextOptions {\r\n  scope?: 'request' | 'session' | 'application' | 'url';\r\n  urlPattern?: string;\r\n  expiry?: number;\r\n  defaultValue?: any;\r\n}\r\n\r\nexport interface Context<T> {\r\n  key: string;\r\n  options: ContextOptions;\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\n\r\n/**\r\n * Set the current component context for hook execution\r\n * Called internally by Minimact before rendering\r\n */\r\nexport function setContextHookContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n}\r\n\r\n/**\r\n * Clear the current component context after rendering\r\n * Called internally by Minimact after rendering\r\n */\r\nexport function clearContextHookContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Create a context with specified scope and options\r\n *\r\n * @example\r\n * // Session-scoped user context\r\n * const UserContext = createContext<User>('current-user', {\r\n *   scope: 'session',\r\n *   expiry: 3600000 // 1 hour\r\n * });\r\n *\r\n * @example\r\n * // URL-scoped dashboard filters\r\n * const DashboardFilters = createContext<Filters>('dashboard-filters', {\r\n *   scope: 'url',\r\n *   urlPattern: '/dashboard/*',\r\n *   expiry: 3600000\r\n * });\r\n */\r\nexport function createContext<T>(\r\n  key: string,\r\n  options: ContextOptions = {}\r\n): Context<T> {\r\n  // Validate URL pattern if scope is 'url'\r\n  if (options.scope === 'url' && !options.urlPattern) {\r\n    throw new Error(`Context '${key}' with scope 'url' requires urlPattern`);\r\n  }\r\n\r\n  return {\r\n    key,\r\n    options: {\r\n      scope: options.scope || 'request',\r\n      urlPattern: options.urlPattern,\r\n      expiry: options.expiry,\r\n      defaultValue: options.defaultValue\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Use a context - returns [value, setValue, clearValue]\r\n *\r\n * Unlike React's useContext, this doesn't require a Provider component.\r\n * The context is stored server-side in a cache with the specified scope.\r\n *\r\n * @returns Tuple of [value, setValue, clearValue]\r\n *\r\n * @example\r\n * // Read and write to context\r\n * function LoginForm() {\r\n *   const [_, setUser] = useContext(UserContext);\r\n *\r\n *   const handleLogin = async (credentials) => {\r\n *     const user = await authenticate(credentials);\r\n *     setUser(user); // Stored in session-scoped cache\r\n *   };\r\n *\r\n *   return <form onSubmit={handleLogin}>...</form>;\r\n * }\r\n *\r\n * @example\r\n * // Read from context (different component, no parent-child relationship needed)\r\n * function UserProfile() {\r\n *   const [user] = useContext(UserContext);\r\n *\r\n *   if (!user) return <Login />;\r\n *   return <div>Welcome, {user.name}</div>;\r\n * }\r\n */\r\nexport function useContext<T>(\r\n  context: Context<T>\r\n): [T | undefined, (value: T) => void, () => void] {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useContext must be called within a component render');\r\n  }\r\n\r\n  const ctx = currentContext;\r\n  const stateKey = `context_${context.key}`;\r\n\r\n  // Get current value from component state (initialized from server)\r\n  let currentValue = ctx.state.get(stateKey) as T | undefined;\r\n\r\n  // If no value and has default, use default\r\n  if (currentValue === undefined && context.options.defaultValue !== undefined) {\r\n    currentValue = context.options.defaultValue;\r\n  }\r\n\r\n  // Setter - updates local state and syncs to server\r\n  const setContextValue = (newValue: T) => {\r\n    // Update local state immediately for instant feedback\r\n    ctx.state.set(stateKey, newValue);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: newValue\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('UpdateContext', {\r\n      key: context.key,\r\n      value: newValue,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern,\r\n      expiry: context.options.expiry\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to update context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  // Clear - removes value from cache\r\n  const clearContextValue = () => {\r\n    // Clear local state\r\n    ctx.state.set(stateKey, undefined);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: undefined\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('ClearContext', {\r\n      key: context.key,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to clear context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  return [currentValue, setContextValue, clearContextValue];\r\n}\r\n","/**\r\n * usePaginatedServerTask - Pagination built on useServerTask\r\n *\r\n * Extends the existing useServerTask infrastructure to add pagination capabilities.\r\n * Reuses transpilers, FFI bridge, and task runtime for zero additional complexity.\r\n */\r\n\r\nimport { useServerTask } from './hooks';\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport { ServerTaskOptions } from './server-task';\r\n\r\n/**\r\n * Pagination parameters passed to the fetch function\r\n */\r\nexport interface PaginationParams<TFilter = any> {\r\n  page: number;\r\n  pageSize: number;\r\n  filters: TFilter;\r\n}\r\n\r\n/**\r\n * Options for configuring a paginated server task\r\n */\r\nexport interface PaginatedServerTaskOptions<T, TFilter = any> {\r\n  /** Number of items per page (default: 20) */\r\n  pageSize?: number;\r\n\r\n  /** Function to get total count (for calculating total pages) */\r\n  getTotalCount: (filters: TFilter) => Promise<number>;\r\n\r\n  /** Enable automatic prefetching of next page (default: false) */\r\n  prefetchNext?: boolean;\r\n\r\n  /** Enable automatic prefetching of previous page (default: false) */\r\n  prefetchPrev?: boolean;\r\n\r\n  /** Dependencies that trigger re-fetch when changed */\r\n  dependencies?: any[];\r\n\r\n  /** Runtime selection: 'csharp' or 'rust' (inherited from useServerTask) */\r\n  runtime?: 'csharp' | 'rust';\r\n\r\n  /** Enable parallel execution (for Rust runtime with Rayon) */\r\n  parallel?: boolean;\r\n}\r\n\r\n/**\r\n * Paginated server task result\r\n */\r\nexport interface PaginatedServerTask<T> {\r\n  // Data\r\n  items: T[];\r\n  total: number;\r\n  totalPages: number;\r\n\r\n  // State\r\n  page: number;\r\n  pageSize: number;\r\n  pending: boolean;\r\n  error?: string;\r\n\r\n  // Navigation\r\n  hasNext: boolean;\r\n  hasPrev: boolean;\r\n  next: () => void;\r\n  prev: () => void;\r\n  goto: (page: number) => void;\r\n  refresh: () => void;\r\n\r\n  // Advanced: Access to underlying tasks\r\n  _fetchTask: any;\r\n  _countTask: any;\r\n}\r\n\r\n/**\r\n * usePaginatedServerTask Hook\r\n *\r\n * Wraps useServerTask to provide pagination with intelligent prefetching.\r\n *\r\n * @example\r\n * const users = usePaginatedServerTask(\r\n *   async ({ page, pageSize, filters }) => {\r\n *     return await db.users\r\n *       .where(u => filters.role ? u.role === filters.role : true)\r\n *       .skip((page - 1) * pageSize)\r\n *       .take(pageSize)\r\n *       .toList();\r\n *   },\r\n *   {\r\n *     pageSize: 20,\r\n *     getTotalCount: async (filters) => {\r\n *       return await db.users\r\n *         .where(u => filters.role ? u.role === filters.role : true)\r\n *         .count();\r\n *     },\r\n *     prefetchNext: true,\r\n *     dependencies: [filters]\r\n *   }\r\n * );\r\n */\r\nexport function usePaginatedServerTask<T, TFilter = any>(\r\n  fetchFn: (params: PaginationParams<TFilter>) => Promise<T[]>,\r\n  options: PaginatedServerTaskOptions<T, TFilter>\r\n): PaginatedServerTask<T> {\r\n  const pageSize = options.pageSize || 20;\r\n\r\n  // State\r\n  const [page, setPage] = useState(1);\r\n  const [items, setItems] = useState<T[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Prefetch cache\r\n  const prefetchCache = useRef<Map<number, T[]>>(new Map());\r\n\r\n  // Last args (for retry)\r\n  const lastArgs = useRef<any[]>([]);\r\n\r\n  // Build current filters from dependencies\r\n  const filters = buildFilters(options.dependencies);\r\n\r\n  // ✅ Reuse useServerTask for fetch logic!\r\n  // Note: The actual function is passed via Babel transpilation\r\n  // At runtime, we just get a task instance and call .start(args)\r\n  const fetchTask = useServerTask<T[]>(\r\n    undefined, // Function extracted by Babel plugin\r\n    {\r\n      runtime: options.runtime,\r\n      parallel: options.parallel\r\n    } as ServerTaskOptions\r\n  );\r\n\r\n  // ✅ Reuse useServerTask for count query!\r\n  const countTask = useServerTask<number>(\r\n    undefined, // Function extracted by Babel plugin\r\n    { runtime: options.runtime } as ServerTaskOptions\r\n  );\r\n\r\n  /**\r\n   * Fetch a specific page\r\n   */\r\n  const fetchPage = async (targetPage: number, fromCache = true) => {\r\n    // Check prefetch cache\r\n    if (fromCache && prefetchCache.current.has(targetPage)) {\r\n      const cached = prefetchCache.current.get(targetPage)!;\r\n      setItems(cached);\r\n      setPage(targetPage);\r\n      prefetchCache.current.delete(targetPage);\r\n\r\n      console.log(`[usePaginatedServerTask] 🟢 Cache hit for page ${targetPage}`);\r\n\r\n      // Trigger next prefetch\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Fetch from server via useServerTask\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    lastArgs.current = [args];\r\n\r\n    fetchTask.start(args);\r\n\r\n    // Wait for completion (using promise)\r\n    try {\r\n      const result = await fetchTask.promise;\r\n\r\n      setItems(result as T[]);\r\n      setPage(targetPage);\r\n      setError(null);\r\n\r\n      console.log(`[usePaginatedServerTask] 🔴 Fetched page ${targetPage} from server`);\r\n\r\n      // Prefetch adjacent pages if configured\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch page');\r\n      console.error(`[usePaginatedServerTask] Error fetching page ${targetPage}:`, err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Prefetch in background (non-blocking)\r\n   */\r\n  const prefetchInBackground = async (targetPage: number) => {\r\n    if (prefetchCache.current.has(targetPage)) {\r\n      return; // Already cached\r\n    }\r\n\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    // Create a separate task instance for prefetching\r\n    // Note: This will be optimized later to reuse task instances\r\n    fetchTask.start(args);\r\n\r\n    try {\r\n      const result = await fetchTask.promise;\r\n      prefetchCache.current.set(targetPage, result as T[]);\r\n      console.log(`[usePaginatedServerTask] ⚡ Prefetched page ${targetPage}`);\r\n    } catch (err) {\r\n      console.error(`[usePaginatedServerTask] Prefetch failed for page ${targetPage}:`, err);\r\n      // Silently fail - prefetch is optional\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get total count on mount and when filters change\r\n   */\r\n  useEffect(() => {\r\n    countTask.start(filters);\r\n\r\n    countTask.promise.then((count) => {\r\n      setTotal(count as number);\r\n    }).catch((err) => {\r\n      console.error('[usePaginatedServerTask] Failed to get total count:', err);\r\n    });\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  /**\r\n   * Initial fetch\r\n   */\r\n  useEffect(() => {\r\n    fetchPage(1, false);\r\n  }, []);\r\n\r\n  /**\r\n   * Re-fetch when dependencies change\r\n   */\r\n  useEffect(() => {\r\n    if (options.dependencies && options.dependencies.length > 0) {\r\n      prefetchCache.current.clear();\r\n      fetchPage(1, false);\r\n    }\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  // Computed properties\r\n  const totalPages = Math.ceil(total / pageSize);\r\n  const hasNext = page < totalPages;\r\n  const hasPrev = page > 1;\r\n\r\n  // Navigation methods\r\n  const next = () => {\r\n    if (hasNext) {\r\n      fetchPage(page + 1);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    if (hasPrev) {\r\n      fetchPage(page - 1);\r\n    }\r\n  };\r\n\r\n  const goto = (targetPage: number) => {\r\n    if (targetPage >= 1 && targetPage <= totalPages) {\r\n      fetchPage(targetPage);\r\n    }\r\n  };\r\n\r\n  const refresh = () => {\r\n    prefetchCache.current.clear();\r\n    fetchPage(page, false);\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    items,\r\n    total,\r\n    totalPages,\r\n\r\n    // State\r\n    page,\r\n    pageSize,\r\n    pending: fetchTask.status === 'running',\r\n    error: error || fetchTask.error?.message,\r\n\r\n    // Navigation\r\n    hasNext,\r\n    hasPrev,\r\n    next,\r\n    prev,\r\n    goto,\r\n    refresh,\r\n\r\n    // ✅ Expose underlying tasks for advanced use\r\n    _fetchTask: fetchTask,\r\n    _countTask: countTask\r\n  };\r\n}\r\n\r\n/**\r\n * Helper: Build filters object from dependencies array\r\n */\r\nfunction buildFilters(dependencies?: any[]): any {\r\n  if (!dependencies || dependencies.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // If single object, use as-is\r\n  if (dependencies.length === 1 && typeof dependencies[0] === 'object') {\r\n    return dependencies[0];\r\n  }\r\n\r\n  // Otherwise, create indexed object\r\n  return dependencies.reduce((acc, dep, i) => {\r\n    acc[`dep${i}`] = dep;\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n","/**\r\n * Client-side pub/sub event aggregator\r\n * Enables component-to-component communication without prop drilling\r\n */\r\n\r\nexport interface PubSubMessage<T = any> {\r\n  value: T;\r\n  error?: string;\r\n  waiting?: number;\r\n  source?: string;\r\n  timestamp: number;\r\n  isStale?: boolean;\r\n}\r\n\r\ntype Subscriber<T = any> = (message: PubSubMessage<T>) => void;\r\n\r\n/**\r\n * Global event aggregator for client-side pub/sub\r\n */\r\nclass EventAggregator {\r\n  private channels: Map<string, {\r\n    subscribers: Set<Subscriber>;\r\n    lastMessage: PubSubMessage | null;\r\n  }> = new Map();\r\n\r\n  private debugLogging: boolean = false;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a channel\r\n   */\r\n  subscribe<T = any>(\r\n    channel: string,\r\n    callback?: Subscriber<T>\r\n  ): PubSubMessage<T> {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    // Add callback if provided\r\n    if (callback) {\r\n      channelData.subscribers.add(callback as Subscriber);\r\n    }\r\n\r\n    // Return reactive message object\r\n    const message: PubSubMessage<T> = channelData.lastMessage || {\r\n      value: undefined as T,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.log(`Subscribed to '${channel}'`, { hasCallback: !!callback });\r\n\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a channel\r\n   */\r\n  unsubscribe(channel: string, callback: Subscriber): void {\r\n    const channelData = this.channels.get(channel);\r\n    if (channelData) {\r\n      channelData.subscribers.delete(callback);\r\n      this.log(`Unsubscribed from '${channel}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Publish a message to a channel\r\n   */\r\n  publish<T = any>(\r\n    channel: string,\r\n    value: T,\r\n    options: {\r\n      source?: string;\r\n      error?: string;\r\n      waiting?: number;\r\n    } = {}\r\n  ): void {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    const message: PubSubMessage<T> = {\r\n      value,\r\n      error: options.error,\r\n      waiting: options.waiting,\r\n      source: options.source,\r\n      timestamp: Date.now(),\r\n      isStale: false\r\n    };\r\n\r\n    // Update last message\r\n    channelData.lastMessage = message;\r\n\r\n    // Notify all subscribers\r\n    channelData.subscribers.forEach(subscriber => {\r\n      try {\r\n        subscriber(message);\r\n      } catch (error) {\r\n        console.error(`[Minimact PubSub] Error in subscriber for '${channel}':`, error);\r\n      }\r\n    });\r\n\r\n    this.log(`Published to '${channel}'`, {\r\n      subscribers: channelData.subscribers.size,\r\n      value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear a channel\r\n   */\r\n  clear(channel: string): void {\r\n    this.channels.delete(channel);\r\n    this.log(`Cleared channel '${channel}'`);\r\n  }\r\n\r\n  /**\r\n   * Clear all channels\r\n   */\r\n  clearAll(): void {\r\n    this.channels.clear();\r\n    this.log('Cleared all channels');\r\n  }\r\n\r\n  /**\r\n   * Get stats\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalChannels: this.channels.size,\r\n      channels: Array.from(this.channels.entries()).map(([name, data]) => ({\r\n        name,\r\n        subscribers: data.subscribers.size,\r\n        hasLastMessage: !!data.lastMessage\r\n      }))\r\n    };\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PubSub] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Global singleton instance\r\nlet globalAggregator: EventAggregator | null = null;\r\n\r\nexport function getEventAggregator(options?: { debugLogging?: boolean }): EventAggregator {\r\n  if (!globalAggregator) {\r\n    globalAggregator = new EventAggregator(options);\r\n  }\r\n  return globalAggregator;\r\n}\r\n\r\n/**\r\n * Hook: usePub - Publish to a channel\r\n */\r\nexport function usePub<T = any>(channel: string): (value: T, options?: {\r\n  source?: string;\r\n  error?: string;\r\n  waiting?: number;\r\n}) => void {\r\n  const aggregator = getEventAggregator();\r\n\r\n  return (value: T, options = {}) => {\r\n    aggregator.publish(channel, value, options);\r\n  };\r\n}\r\n\r\n/**\r\n * Hook: useSub - Subscribe to a channel\r\n */\r\nexport function useSub<T = any>(\r\n  channel: string,\r\n  callback?: (message: PubSubMessage<T>) => void\r\n): PubSubMessage<T> {\r\n  const aggregator = getEventAggregator();\r\n\r\n  // Subscribe and return reactive message object\r\n  const message = aggregator.subscribe<T>(channel, callback);\r\n\r\n  // TODO: Integrate with component lifecycle for auto-unsubscribe\r\n  // For now, developers must manually unsubscribe or we rely on component unmount\r\n\r\n  return message;\r\n}\r\n","/**\r\n * Task scheduling hooks for fine-grained render timing control\r\n * useMicroTask - runs before paint (microtask queue)\r\n * useMacroTask - runs after paint (task queue)\r\n */\r\n\r\n/**\r\n * Hook: useMicroTask\r\n * Schedules a callback to run in the microtask queue (before next paint)\r\n * Perfect for: DOM measurements, layout calculations, critical updates\r\n */\r\nexport function useMicroTask(callback: () => void): void {\r\n  queueMicrotask(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMicroTask] Error in microtask:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Hook: useMacroTask\r\n * Schedules a callback to run in the task queue (after paint)\r\n * Perfect for: Analytics, logging, non-critical updates, deferred work\r\n */\r\nexport function useMacroTask(callback: () => void, delay: number = 0): void {\r\n  setTimeout(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMacroTask] Error in macrotask:', error);\r\n    }\r\n  }, delay);\r\n}\r\n\r\n/**\r\n * Hook: useAnimationFrame\r\n * Schedules a callback for the next animation frame\r\n * Perfect for: Animations, visual updates, smooth transitions\r\n */\r\nexport function useAnimationFrame(callback: (timestamp: number) => void): number {\r\n  const rafId = requestAnimationFrame((timestamp) => {\r\n    try {\r\n      callback(timestamp);\r\n    } catch (error) {\r\n      console.error('[Minimact useAnimationFrame] Error in animation frame:', error);\r\n    }\r\n  });\r\n\r\n  return rafId;\r\n}\r\n\r\n/**\r\n * Hook: useIdleCallback\r\n * Schedules a callback for when the browser is idle\r\n * Perfect for: Low-priority work, background tasks, optimization\r\n */\r\nexport function useIdleCallback(\r\n  callback: (deadline: IdleDeadline) => void,\r\n  options?: IdleRequestOptions\r\n): number {\r\n  if ('requestIdleCallback' in window) {\r\n    return requestIdleCallback((deadline) => {\r\n      try {\r\n        callback(deadline);\r\n      } catch (error) {\r\n        console.error('[Minimact useIdleCallback] Error in idle callback:', error);\r\n      }\r\n    }, options);\r\n  } else {\r\n    // Fallback to setTimeout for browsers without requestIdleCallback\r\n    return setTimeout(() => {\r\n      const deadline: IdleDeadline = {\r\n        didTimeout: false,\r\n        timeRemaining: () => 50\r\n      };\r\n      callback(deadline);\r\n    }, 1) as unknown as number;\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an animation frame\r\n */\r\nexport function cancelAnimationFrame(id: number): void {\r\n  window.cancelAnimationFrame(id);\r\n}\r\n\r\n/**\r\n * Cancel an idle callback\r\n */\r\nexport function cancelIdleCallback(id: number): void {\r\n  if ('cancelIdleCallback' in window) {\r\n    window.cancelIdleCallback(id);\r\n  } else {\r\n    clearTimeout(id);\r\n  }\r\n}\r\n","import { SignalMManager } from './signalm-manager';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { ClientStateManager } from './client-state';\r\nimport { EventDelegation } from './event-delegation';\r\nimport { HydrationManager } from './hydration';\r\nimport { HintQueue } from './hint-queue';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { HotReloadManager } from './hot-reload';\r\nimport * as ClientComputed from './client-computed';\r\nimport { MinimactOptions, Patch } from './types';\r\n\r\n/**\r\n * Main Minimact client runtime\r\n * Orchestrates SignalM (lightweight WebSocket), DOM patching, state management, and hydration\r\n *\r\n * Bundle size: ~10 KB gzipped (vs 25 KB with SignalR)\r\n */\r\nexport class Minimact {\r\n  private signalR: SignalMManager;\r\n  private domPatcher: DOMPatcher;\r\n  private clientState: ClientStateManager;\r\n  private hydration: HydrationManager;\r\n  private hintQueue: HintQueue;\r\n  private playgroundBridge: PlaygroundBridge;\r\n  private eventDelegation: EventDelegation | null = null;\r\n  private options: Required<MinimactOptions>;\r\n  private rootElement: HTMLElement;\r\n\r\n  constructor(rootElement: HTMLElement | string = document.body, options: MinimactOptions = {}) {\r\n    // Resolve root element\r\n    if (typeof rootElement === 'string') {\r\n      const element = document.querySelector(rootElement);\r\n      if (!element) {\r\n        throw new Error(`[Minimact] Root element not found: ${rootElement}`);\r\n      }\r\n      this.rootElement = element as HTMLElement;\r\n    } else {\r\n      this.rootElement = rootElement;\r\n    }\r\n\r\n    // Default options\r\n    this.options = {\r\n      hubUrl: options.hubUrl || '/minimact',\r\n      enableDebugLogging: options.enableDebugLogging || false,\r\n      reconnectInterval: options.reconnectInterval || 5000\r\n    };\r\n\r\n    // Initialize subsystems (using lightweight SignalM!)\r\n    this.signalR = new SignalMManager(this.options.hubUrl, {\r\n      reconnectInterval: this.options.reconnectInterval,\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.domPatcher = new DOMPatcher({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.clientState = new ClientStateManager({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hydration = new HydrationManager(this.clientState, {\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hintQueue = new HintQueue({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.playgroundBridge = new PlaygroundBridge({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    // Enable debug logging for client-computed module\r\n    ClientComputed.setDebugLogging(this.options.enableDebugLogging);\r\n\r\n    this.setupSignalRHandlers();\r\n    this.log('Minimact initialized', { rootElement: this.rootElement, options: this.options });\r\n  }\r\n\r\n  /**\r\n   * Start the Minimact runtime\r\n   */\r\n  async start(): Promise<void> {\r\n    // Connect to SignalR hub\r\n    await this.signalR.start();\r\n\r\n    // Hydrate all components\r\n    this.hydration.hydrateAll();\r\n\r\n    // Setup event delegation\r\n    this.eventDelegation = new EventDelegation(\r\n      this.rootElement,\r\n      (componentId, methodName, args) => this.signalR.invokeComponentMethod(componentId, methodName, args),\r\n      { debugLogging: this.options.enableDebugLogging }\r\n    );\r\n\r\n    // Register all components with server\r\n    await this.registerAllComponents();\r\n\r\n    this.log('Minimact started');\r\n  }\r\n\r\n  /**\r\n   * Stop the Minimact runtime\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (this.eventDelegation) {\r\n      this.eventDelegation.destroy();\r\n      this.eventDelegation = null;\r\n    }\r\n\r\n    await this.signalR.stop();\r\n\r\n    this.log('Minimact stopped');\r\n  }\r\n\r\n  /**\r\n   * Setup SignalR event handlers\r\n   */\r\n  private setupSignalRHandlers(): void {\r\n    // Handle full HTML updates\r\n    this.signalR.on('updateComponent', ({ componentId, html }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.replaceHTML(component.element, html);\r\n        this.log('Component HTML updated', { componentId });\r\n      }\r\n    });\r\n\r\n    // Handle patch updates\r\n    this.signalR.on('applyPatches', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Patches applied', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle predicted patches (instant UI updates!)\r\n    this.signalR.on('applyPrediction', ({ componentId, patches, confidence }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log(`Prediction applied (${(confidence * 100).toFixed(0)}% confident)`, { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle corrections if prediction was wrong\r\n    this.signalR.on('applyCorrection', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Correction applied (prediction was incorrect)', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.signalR.on('queueHint', (data) => {\r\n      this.hintQueue.queueHint(data);\r\n      this.log(`Hint '${data.hintId}' queued for component ${data.componentId}`, {\r\n        patchCount: data.patches.length,\r\n        confidence: (data.confidence * 100).toFixed(0) + '%'\r\n      });\r\n\r\n      // Notify playground that prediction was received\r\n      this.playgroundBridge.predictionReceived({\r\n        componentId: data.componentId,\r\n        hintId: data.hintId,\r\n        patchCount: data.patches.length,\r\n        confidence: data.confidence\r\n      });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.signalR.on('reconnected', async () => {\r\n      this.log('Reconnected - re-registering components');\r\n      await this.registerAllComponents();\r\n    });\r\n\r\n    // Handle server reducer state updates\r\n    this.signalR.on('UpdateServerReducerState', ({ componentId, reducerId, state, error }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component && component.context.serverReducers) {\r\n        const reducer = component.context.serverReducers.get(reducerId);\r\n        if (reducer) {\r\n          reducer._updateFromServer(state, error);\r\n          this.log('Server reducer state updated', { componentId, reducerId });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Handle errors\r\n    this.signalR.on('error', ({ message }) => {\r\n      console.error('[Minimact] Server error:', message);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register all components with the server\r\n   */\r\n  private async registerAllComponents(): Promise<void> {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    for (const element of Array.from(components)) {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        try {\r\n          await this.signalR.registerComponent(componentId);\r\n          this.log('Registered component', { componentId });\r\n        } catch (error) {\r\n          console.error('[Minimact] Failed to register component:', componentId, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually hydrate a component\r\n   */\r\n  hydrateComponent(componentId: string, element: HTMLElement): void {\r\n    this.hydration.hydrateComponent(componentId, element);\r\n  }\r\n\r\n  /**\r\n   * Get component by ID (for hot reload)\r\n   */\r\n  getComponent(componentId: string): any {\r\n    return this.hydration.getComponent(componentId);\r\n  }\r\n\r\n  /**\r\n   * Get client state for a component\r\n   */\r\n  getClientState(componentId: string, key: string): any {\r\n    return this.clientState.getState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Set client state for a component\r\n   */\r\n  setClientState(componentId: string, key: string, value: any): void {\r\n    this.clientState.setState(componentId, key, value);\r\n\r\n    // Recompute client-computed variables that depend on this state\r\n    this.recomputeAndSyncClientState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to client state changes\r\n   */\r\n  subscribeToState(componentId: string, key: string, callback: (value: any) => void): () => void {\r\n    return this.clientState.subscribe(componentId, key, callback);\r\n  }\r\n\r\n  /**\r\n   * Recompute client-computed variables after state change and sync to server\r\n   */\r\n  private async recomputeAndSyncClientState(componentId: string, changedStateKey?: string): Promise<void> {\r\n    // Check if component has any client-computed variables\r\n    if (!ClientComputed.hasClientComputed(componentId)) {\r\n      return;\r\n    }\r\n\r\n    // Compute affected variables\r\n    const computed = changedStateKey\r\n      ? ClientComputed.computeDependentVariables(componentId, changedStateKey)\r\n      : ClientComputed.computeAllForComponent(componentId);\r\n\r\n    // If there are computed values, send to server\r\n    if (Object.keys(computed).length > 0) {\r\n      try {\r\n        await this.signalR.updateClientComputedState(componentId, computed);\r\n        this.log('Client-computed state synced', { componentId, computed });\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to sync client-computed state:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection state\r\n   */\r\n  get connectionState(): string {\r\n    return this.signalR.state.toString();\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection ID\r\n   */\r\n  get connectionId(): string | null {\r\n    return this.signalR.connectionId;\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.options.enableDebugLogging) {\r\n      console.log(`[Minimact] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Export all types and classes for advanced usage\r\nexport { SignalMManager } from './signalm-manager';\r\nexport { DOMPatcher } from './dom-patcher';\r\nexport { ClientStateManager } from './client-state';\r\nexport { EventDelegation } from './event-delegation';\r\nexport { HydrationManager } from './hydration';\r\nexport { HintQueue } from './hint-queue';\r\n\r\n// Client-computed state (for external libraries)\r\nexport {\r\n  registerClientComputed,\r\n  computeVariable,\r\n  computeAllForComponent,\r\n  computeDependentVariables,\r\n  getLastValue,\r\n  getAllLastValues,\r\n  hasClientComputed,\r\n  getComputedVariableNames,\r\n  clearComponent as clearClientComputedComponent,\r\n  getDebugInfo as getClientComputedDebugInfo\r\n} from './client-computed';\r\n\r\n// Template state (for hot reload)\r\nexport { TemplateStateManager, templateState } from './template-state';\r\nexport type { Template, TemplateMap } from './template-state';\r\n\r\n// Template renderer (for runtime prediction)\r\nexport { TemplateRenderer } from './template-renderer';\r\n\r\n// Core hooks\r\nexport { useState, useEffect, useRef, useServerTask, useServerReducer, setComponentContext, clearComponentContext, ComponentContext } from './hooks';\r\n\r\n// useComputed hook (for client-side computation with browser APIs/libraries)\r\nexport { useComputed } from './useComputed';\r\nexport type { UseComputedOptions } from './useComputed';\r\n\r\n// Context hooks\r\nexport { createContext, useContext, setContextHookContext, clearContextHookContext } from './useContext';\r\nexport type { Context, ContextOptions } from './useContext';\r\n\r\n// Server task types\r\nexport type { ServerTask, ServerTaskOptions, ServerTaskStatus } from './server-task';\r\n\r\n// Server reducer types\r\nexport type { ServerReducer } from './server-reducer';\r\n\r\n// Paginated server task\r\nexport { usePaginatedServerTask } from './usePaginatedServerTask';\r\nexport type { PaginatedServerTask, PaginatedServerTaskOptions, PaginationParams } from './usePaginatedServerTask';\r\n\r\n// Pub/Sub hooks\r\nexport { usePub, useSub } from './pub-sub';\r\nexport type { PubSubMessage } from './pub-sub';\r\n\r\n// Task scheduling hooks\r\nexport { useMicroTask, useMacroTask, useAnimationFrame, useIdleCallback } from './task-scheduling';\r\n\r\n// NOTE: useSignalR hook is NOT available in the SignalM version\r\n// It requires the full SignalR client library\r\n// If you need useSignalR, use 'minimact/signalr' instead\r\n\r\n// Types\r\nexport * from './types';\r\n\r\n// Auto-initialize if data-minimact-auto-init is present\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n        const minimact = new Minimact(document.body, {\r\n          enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n        });\r\n        minimact.start().catch(console.error);\r\n        (window as any).minimact = minimact;\r\n      }\r\n    });\r\n  } else {\r\n    if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n      const minimact = new Minimact(document.body, {\r\n        enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n      });\r\n      minimact.start().catch(console.error);\r\n      (window as any).minimact = minimact;\r\n    }\r\n  }\r\n}\r\n\r\n// Make available globally\r\nif (typeof window !== 'undefined') {\r\n  (window as any).Minimact = Minimact;\r\n}\r\n\r\nexport default Minimact;\r\n"],"names":["currentContext","ClientComputed.setDebugLogging","ClientComputed.hasClientComputed","ClientComputed.computeDependentVariables","ClientComputed.computeAllForComponent"],"mappings":"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"}