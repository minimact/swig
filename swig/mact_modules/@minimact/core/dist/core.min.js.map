{"version":3,"file":"core.min.js","sources":["../src/signalm/types.ts","../src/signalm/RetryPolicy.ts","../src/signalm/JsonProtocol.ts","../src/signalm/EventEmitter.ts","../src/signalm/SignalMConnection.ts","../src/signalm-manager.ts","../src/dom-patcher.ts","../src/client-state.ts","../src/event-delegation.ts","../src/hydration.ts","../src/template-renderer.ts","../src/hint-queue.ts","../src/playground-bridge.ts","../src/client-computed.ts","../src/template-state.ts","../src/server-task.ts","../src/server-reducer.ts","../src/useComputed.ts","../src/hooks.ts","../src/useContext.ts","../src/pub-sub.ts","../src/index.ts","../src/task-scheduling.ts","../src/usePaginatedServerTask.ts"],"sourcesContent":["/**\r\n * SignalM Types and Interfaces\r\n *\r\n * TypeScript definitions for SignalM connection and protocol\r\n */\r\n\r\nimport type { IRetryPolicy } from './RetryPolicy';\r\n\r\n/**\r\n * Connection state\r\n */\r\nexport enum ConnectionState {\r\n  Disconnected = 'Disconnected',\r\n  Connecting = 'Connecting',\r\n  Connected = 'Connected',\r\n  Reconnecting = 'Reconnecting'\r\n}\r\n\r\n/**\r\n * SignalM connection options\r\n */\r\nexport interface SignalMOptions {\r\n  /** Custom retry policy for reconnection */\r\n  reconnectPolicy?: IRetryPolicy;\r\n\r\n  /** Enable debug logging */\r\n  debug?: boolean;\r\n\r\n  /** Additional headers to send with connection */\r\n  headers?: Record<string, string>;\r\n\r\n  /** Connection timeout in milliseconds (default: 30000) */\r\n  connectionTimeout?: number;\r\n\r\n  /** Invocation timeout in milliseconds (default: 30000) */\r\n  invocationTimeout?: number;\r\n}\r\n\r\n/**\r\n * Pending invocation tracking\r\n */\r\nexport interface PendingInvocation {\r\n  resolve: (value: any) => void;\r\n  reject: (reason: any) => void;\r\n  timeout: number;\r\n}\r\n\r\n/**\r\n * SignalR message types\r\n * https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\nexport enum MessageType {\r\n  /** Invocation message (client → server or server → client) */\r\n  Invocation = 1,\r\n  /** StreamItem message (not supported in SignalM) */\r\n  StreamItem = 2,\r\n  /** Completion message (response to invocation) */\r\n  Completion = 3,\r\n  /** StreamInvocation message (not supported in SignalM) */\r\n  StreamInvocation = 4,\r\n  /** CancelInvocation message (not supported in SignalM) */\r\n  CancelInvocation = 5,\r\n  /** Ping message */\r\n  Ping = 6,\r\n  /** Close message */\r\n  Close = 7\r\n}\r\n\r\n/**\r\n * Invocation message (client → server or server → client RPC call)\r\n */\r\nexport interface InvocationMessage {\r\n  type: MessageType.Invocation;\r\n  invocationId?: string;\r\n  target: string;\r\n  arguments: any[];\r\n  streamIds?: string[];\r\n}\r\n\r\n/**\r\n * Completion message (response to invocation)\r\n */\r\nexport interface CompletionMessage {\r\n  type: MessageType.Completion;\r\n  invocationId: string;\r\n  result?: any;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Ping message (keep-alive)\r\n */\r\nexport interface PingMessage {\r\n  type: MessageType.Ping;\r\n}\r\n\r\n/**\r\n * Close message (connection termination)\r\n */\r\nexport interface CloseMessage {\r\n  type: MessageType.Close;\r\n  error?: string;\r\n  allowReconnect?: boolean;\r\n}\r\n\r\n/**\r\n * Union type of all message types\r\n */\r\nexport type Message = InvocationMessage | CompletionMessage | PingMessage | CloseMessage;\r\n\r\n/**\r\n * Connection event types\r\n */\r\nexport type ConnectionEvent = 'connected' | 'disconnected' | 'reconnecting' | 'reconnected' | 'error';\r\n","/**\r\n * Retry Policy Interface and Implementations\r\n *\r\n * Defines reconnection strategies for SignalM connections\r\n */\r\n\r\n/**\r\n * Retry policy interface\r\n */\r\nexport interface IRetryPolicy {\r\n  /**\r\n   * Get next retry delay in milliseconds\r\n   * Returns null if max retries exceeded\r\n   *\r\n   * @param retryAttempt - The retry attempt number (0-indexed)\r\n   * @returns Delay in milliseconds, or null to stop retrying\r\n   */\r\n  nextRetryDelay(retryAttempt: number): number | null;\r\n}\r\n\r\n/**\r\n * Exponential backoff retry policy\r\n *\r\n * Retry delays: 0ms, 2s, 10s, 30s, then 60s max\r\n * Allows infinite retries with capped delay\r\n */\r\nexport class ExponentialBackoffRetryPolicy implements IRetryPolicy {\r\n  private delays = [0, 2000, 10000, 30000];\r\n  private maxDelay = 60000; // 60 seconds\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    // Allow infinite retries, but cap delay at maxDelay\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n    return this.maxDelay;\r\n  }\r\n}\r\n\r\n/**\r\n * Fixed interval retry policy\r\n *\r\n * Retries at fixed intervals with a maximum retry count\r\n */\r\nexport class FixedRetryPolicy implements IRetryPolicy {\r\n  private interval: number;\r\n  private maxRetries: number;\r\n\r\n  /**\r\n   * Create a fixed retry policy\r\n   *\r\n   * @param interval - Retry interval in milliseconds (default: 5000)\r\n   * @param maxRetries - Maximum number of retries (default: 10)\r\n   */\r\n  constructor(interval: number = 5000, maxRetries: number = 10) {\r\n    this.interval = interval;\r\n    this.maxRetries = maxRetries;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt >= this.maxRetries) {\r\n      return null; // Max retries exceeded\r\n    }\r\n    return this.interval;\r\n  }\r\n}\r\n\r\n/**\r\n * No retry policy\r\n *\r\n * Fails immediately without retrying\r\n */\r\nexport class NoRetryPolicy implements IRetryPolicy {\r\n  nextRetryDelay(): null {\r\n    return null; // Never retry\r\n  }\r\n}\r\n\r\n/**\r\n * Custom retry policy with configurable delays\r\n *\r\n * Allows specifying exact retry delays\r\n */\r\nexport class CustomRetryPolicy implements IRetryPolicy {\r\n  private delays: number[];\r\n  private repeatLast: boolean;\r\n\r\n  /**\r\n   * Create a custom retry policy\r\n   *\r\n   * @param delays - Array of retry delays in milliseconds\r\n   * @param repeatLast - If true, repeat the last delay infinitely (default: false)\r\n   */\r\n  constructor(delays: number[], repeatLast: boolean = false) {\r\n    if (delays.length === 0) {\r\n      throw new Error('Delays array cannot be empty');\r\n    }\r\n    this.delays = delays;\r\n    this.repeatLast = repeatLast;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n\r\n    if (this.repeatLast) {\r\n      return this.delays[this.delays.length - 1];\r\n    }\r\n\r\n    return null; // No more retries\r\n  }\r\n}\r\n","/**\r\n * SignalR JSON Protocol Implementation\r\n *\r\n * Implements the SignalR JSON protocol for message serialization.\r\n * Compatible with ASP.NET Core SignalR hubs.\r\n *\r\n * Protocol Spec: https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\n\r\nimport type {\r\n  Message,\r\n  InvocationMessage,\r\n  CompletionMessage,\r\n  PingMessage,\r\n  CloseMessage,\r\n  MessageType\r\n} from './types';\r\n\r\nexport class JsonProtocol {\r\n  /**\r\n   * Protocol name\r\n   */\r\n  static readonly protocolName = 'json';\r\n\r\n  /**\r\n   * Protocol version\r\n   */\r\n  static readonly protocolVersion = 1;\r\n\r\n  /**\r\n   * Write invocation message (client → server RPC call)\r\n   */\r\n  static writeInvocation(\r\n    invocationId: string,\r\n    target: string,\r\n    args: any[]\r\n  ): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      invocationId,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write message without response (fire-and-forget)\r\n   */\r\n  static writeMessage(target: string, args: any[]): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write ping message (keep-alive)\r\n   */\r\n  static writePing(): PingMessage {\r\n    return {\r\n      type: 6 as MessageType.Ping\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write close message\r\n   */\r\n  static writeClose(error?: string): CloseMessage {\r\n    return {\r\n      type: 7 as MessageType.Close,\r\n      error\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse incoming message\r\n   */\r\n  static parseMessage(data: string): Message {\r\n    try {\r\n      return JSON.parse(data) as Message;\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse message: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serialize message to JSON string\r\n   */\r\n  static serializeMessage(message: Message): string {\r\n    return JSON.stringify(message);\r\n  }\r\n\r\n  /**\r\n   * Check if message is invocation\r\n   */\r\n  static isInvocation(message: Message): message is InvocationMessage {\r\n    return message.type === 1;\r\n  }\r\n\r\n  /**\r\n   * Check if message is completion\r\n   */\r\n  static isCompletion(message: Message): message is CompletionMessage {\r\n    return message.type === 3;\r\n  }\r\n\r\n  /**\r\n   * Check if message is ping\r\n   */\r\n  static isPing(message: Message): message is PingMessage {\r\n    return message.type === 6;\r\n  }\r\n\r\n  /**\r\n   * Check if message is close\r\n   */\r\n  static isClose(message: Message): message is CloseMessage {\r\n    return message.type === 7;\r\n  }\r\n}\r\n","/**\r\n * Simple Event Emitter\r\n *\r\n * Lightweight event handling for SignalM connections\r\n */\r\n\r\nexport class EventEmitter {\r\n  private events = new Map<string, Function[]>();\r\n\r\n  /**\r\n   * Register an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event)!.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Unregister an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function to remove\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a one-time event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function (will be called once)\r\n   */\r\n  once(event: string, handler: Function): void {\r\n    const onceHandler = (...args: any[]) => {\r\n      handler(...args);\r\n      this.off(event, onceHandler);\r\n    };\r\n    this.on(event, onceHandler);\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   *\r\n   * @param event - Event name\r\n   * @param args - Event arguments\r\n   */\r\n  emit(event: string, ...args: any[]): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      // Create a copy to avoid issues if handlers are removed during iteration\r\n      const handlersCopy = [...handlers];\r\n      handlersCopy.forEach(handler => {\r\n        try {\r\n          handler(...args);\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in event handler for '${event}':`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all event handlers for a specific event\r\n   *\r\n   * @param event - Event name (if not provided, clears all events)\r\n   */\r\n  removeAllListeners(event?: string): void {\r\n    if (event) {\r\n      this.events.delete(event);\r\n    } else {\r\n      this.events.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of listeners for an event\r\n   *\r\n   * @param event - Event name\r\n   * @returns Number of listeners\r\n   */\r\n  listenerCount(event: string): number {\r\n    const handlers = this.events.get(event);\r\n    return handlers ? handlers.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Get all event names with listeners\r\n   *\r\n   * @returns Array of event names\r\n   */\r\n  eventNames(): string[] {\r\n    return Array.from(this.events.keys());\r\n  }\r\n}\r\n","/**\r\n * SignalM Connection\r\n *\r\n * Lightweight WebSocket-based connection compatible with SignalR hubs.\r\n * Supports method invocation, event handling, and automatic reconnection.\r\n */\r\n\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { JsonProtocol } from './JsonProtocol';\r\nimport { ExponentialBackoffRetryPolicy, type IRetryPolicy } from './RetryPolicy';\r\nimport {\r\n  ConnectionState,\r\n  type SignalMOptions,\r\n  type PendingInvocation\r\n} from './types';\r\n\r\nexport class SignalMConnection {\r\n  private ws: WebSocket | null = null;\r\n  private url: string;\r\n  private handlers = new Map<string, Function[]>();\r\n  private pendingInvocations = new Map<string, PendingInvocation>();\r\n  private invocationId = 0;\r\n  private reconnectPolicy: IRetryPolicy;\r\n  private state: ConnectionState = ConnectionState.Disconnected;\r\n  private reconnectAttempts = 0;\r\n  private eventEmitter: EventEmitter;\r\n  private debugLogging: boolean;\r\n  private connectionTimeout: number;\r\n  private invocationTimeout: number;\r\n  private reconnectTimeoutId: number | null = null;\r\n\r\n  constructor(url: string, options: SignalMOptions = {}) {\r\n    this.url = url;\r\n    this.reconnectPolicy = options.reconnectPolicy || new ExponentialBackoffRetryPolicy();\r\n    this.debugLogging = options.debug || false;\r\n    this.connectionTimeout = options.connectionTimeout || 30000;\r\n    this.invocationTimeout = options.invocationTimeout || 30000;\r\n    this.eventEmitter = new EventEmitter();\r\n  }\r\n\r\n  /**\r\n   * Start the connection\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.state !== ConnectionState.Disconnected) {\r\n      throw new Error('Connection is already started');\r\n    }\r\n\r\n    this.state = ConnectionState.Connecting;\r\n    this.log('Starting connection...');\r\n    return this.connect();\r\n  }\r\n\r\n  /**\r\n   * Stop the connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    this.log('Stopping connection...');\r\n\r\n    // Clear any pending reconnect\r\n    if (this.reconnectTimeoutId !== null) {\r\n      clearTimeout(this.reconnectTimeoutId);\r\n      this.reconnectTimeoutId = null;\r\n    }\r\n\r\n    if (this.ws) {\r\n      this.ws.close(1000, 'Normal closure');\r\n      this.ws = null;\r\n    }\r\n\r\n    this.state = ConnectionState.Disconnected;\r\n    this.eventEmitter.emit('disconnected');\r\n  }\r\n\r\n  /**\r\n   * Invoke a server method and wait for result\r\n   */\r\n  async invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const invocationId = this.generateInvocationId();\r\n    const message = JsonProtocol.writeInvocation(invocationId, methodName, args);\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        this.pendingInvocations.delete(invocationId);\r\n        reject(new Error(`Invocation '${methodName}' timed out after ${this.invocationTimeout}ms`));\r\n      }, this.invocationTimeout);\r\n\r\n      this.pendingInvocations.set(invocationId, {\r\n        resolve,\r\n        reject,\r\n        timeout: timeout as unknown as number\r\n      });\r\n\r\n      const serialized = JsonProtocol.serializeMessage(message);\r\n      this.log(`Invoking '${methodName}' (id: ${invocationId})`, args);\r\n      this.ws!.send(serialized);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a message without expecting a response (fire-and-forget)\r\n   */\r\n  send(methodName: string, ...args: any[]): void {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const message = JsonProtocol.writeMessage(methodName, args);\r\n    const serialized = JsonProtocol.serializeMessage(message);\r\n    this.log(`Sending '${methodName}' (fire-and-forget)`, args);\r\n    this.ws!.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Register a handler for server-to-client method calls\r\n   */\r\n  on(methodName: string, handler: (...args: any[]) => void): void {\r\n    if (!this.handlers.has(methodName)) {\r\n      this.handlers.set(methodName, []);\r\n    }\r\n    this.handlers.get(methodName)!.push(handler);\r\n    this.log(`Registered handler for '${methodName}'`);\r\n  }\r\n\r\n  /**\r\n   * Remove a handler\r\n   */\r\n  off(methodName: string, handler: (...args: any[]) => void): void {\r\n    const handlers = this.handlers.get(methodName);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n        this.log(`Removed handler for '${methodName}'`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register event listener for connection lifecycle events\r\n   */\r\n  onConnected(handler: () => void): void {\r\n    this.eventEmitter.on('connected', handler);\r\n  }\r\n\r\n  onDisconnected(handler: () => void): void {\r\n    this.eventEmitter.on('disconnected', handler);\r\n  }\r\n\r\n  onReconnecting(handler: () => void): void {\r\n    this.eventEmitter.on('reconnecting', handler);\r\n  }\r\n\r\n  onReconnected(handler: () => void): void {\r\n    this.eventEmitter.on('reconnected', handler);\r\n  }\r\n\r\n  onError(handler: (error: Error) => void): void {\r\n    this.eventEmitter.on('error', handler);\r\n  }\r\n\r\n  /**\r\n   * Get current connection state\r\n   */\r\n  get connectionState(): ConnectionState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Internal: Connect to WebSocket\r\n   */\r\n  private async connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const wsUrl = this.buildWebSocketUrl();\r\n      this.log(`Connecting to ${wsUrl}...`);\r\n\r\n      try {\r\n        this.ws = new WebSocket(wsUrl);\r\n      } catch (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n\r\n      // Connection timeout\r\n      const connectionTimeout = setTimeout(() => {\r\n        if (this.state === ConnectionState.Connecting) {\r\n          this.log('Connection timeout');\r\n          this.ws?.close();\r\n          reject(new Error(`Connection timeout after ${this.connectionTimeout}ms`));\r\n        }\r\n      }, this.connectionTimeout);\r\n\r\n      this.ws.onopen = () => {\r\n        clearTimeout(connectionTimeout);\r\n        this.state = ConnectionState.Connected;\r\n        this.reconnectAttempts = 0;\r\n        this.log('Connected ✓');\r\n        this.eventEmitter.emit('connected');\r\n        resolve();\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        this.handleMessage(event.data);\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        this.log('WebSocket error', error);\r\n        this.eventEmitter.emit('error', new Error('WebSocket error'));\r\n      };\r\n\r\n      this.ws.onclose = (event) => {\r\n        clearTimeout(connectionTimeout);\r\n        this.handleClose(event);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle incoming messages\r\n   */\r\n  private handleMessage(data: string): void {\r\n    try {\r\n      const message = JsonProtocol.parseMessage(data);\r\n      this.log(`Received message (type: ${message.type})`, message);\r\n\r\n      if (JsonProtocol.isInvocation(message)) {\r\n        // Server calling client method\r\n        this.handleInvocation(message);\r\n      } else if (JsonProtocol.isCompletion(message)) {\r\n        // Response to client invoke()\r\n        this.handleCompletion(message);\r\n      } else if (JsonProtocol.isPing(message)) {\r\n        // Server ping (respond with pong)\r\n        this.handlePing();\r\n      } else if (JsonProtocol.isClose(message)) {\r\n        // Server requested close\r\n        this.log('Server requested close', message.error);\r\n        this.ws?.close(1000, 'Server closed connection');\r\n      }\r\n    } catch (error) {\r\n      this.log('Error parsing message', error);\r\n      console.error('[SignalM] Error parsing message:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle server-to-client invocation\r\n   */\r\n  private handleInvocation(message: any): void {\r\n    const handlers = this.handlers.get(message.target);\r\n    if (handlers) {\r\n      this.log(`Calling ${handlers.length} handler(s) for '${message.target}'`);\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(...(message.arguments || []));\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in handler for '${message.target}':`, error);\r\n        }\r\n      });\r\n    } else {\r\n      this.log(`No handler registered for '${message.target}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle completion (response to invoke)\r\n   */\r\n  private handleCompletion(message: any): void {\r\n    const pending = this.pendingInvocations.get(message.invocationId);\r\n    if (pending) {\r\n      clearTimeout(pending.timeout);\r\n      this.pendingInvocations.delete(message.invocationId);\r\n\r\n      if (message.error) {\r\n        this.log(`Invocation ${message.invocationId} failed: ${message.error}`);\r\n        pending.reject(new Error(message.error));\r\n      } else {\r\n        this.log(`Invocation ${message.invocationId} completed`, message.result);\r\n        pending.resolve(message.result);\r\n      }\r\n    } else {\r\n      this.log(`Received completion for unknown invocation ${message.invocationId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle ping (send pong)\r\n   */\r\n  private handlePing(): void {\r\n    const pongMessage = JsonProtocol.writePing(); // Pong uses same message type\r\n    const serialized = JsonProtocol.serializeMessage(pongMessage);\r\n    this.log('Received ping, sending pong');\r\n    this.ws?.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle connection close\r\n   */\r\n  private handleClose(event: CloseEvent): void {\r\n    this.log(`Connection closed (code: ${event.code}, reason: ${event.reason})`);\r\n    this.state = ConnectionState.Disconnected;\r\n    this.ws = null;\r\n\r\n    // Reject all pending invocations\r\n    this.pendingInvocations.forEach((pending) => {\r\n      clearTimeout(pending.timeout);\r\n      pending.reject(new Error('Connection closed'));\r\n    });\r\n    this.pendingInvocations.clear();\r\n\r\n    // Attempt reconnection if not normal closure (1000) or going away (1001)\r\n    if (event.code !== 1000 && event.code !== 1001) {\r\n      this.attemptReconnect();\r\n    } else {\r\n      this.eventEmitter.emit('disconnected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Attempt to reconnect\r\n   */\r\n  private async attemptReconnect(): Promise<void> {\r\n    const delay = this.reconnectPolicy.nextRetryDelay(this.reconnectAttempts);\r\n\r\n    if (delay === null) {\r\n      // Max retries exceeded\r\n      this.log('Max reconnection attempts exceeded');\r\n      this.eventEmitter.emit('disconnected');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    this.state = ConnectionState.Reconnecting;\r\n    this.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})...`);\r\n    this.eventEmitter.emit('reconnecting');\r\n\r\n    this.reconnectTimeoutId = setTimeout(async () => {\r\n      this.reconnectTimeoutId = null;\r\n      try {\r\n        await this.connect();\r\n        this.log('Reconnected ✓');\r\n        this.eventEmitter.emit('reconnected');\r\n      } catch (error) {\r\n        this.log('Reconnection failed', error);\r\n        this.attemptReconnect();\r\n      }\r\n    }, delay) as unknown as number;\r\n  }\r\n\r\n  /**\r\n   * Internal: Build WebSocket URL\r\n   */\r\n  private buildWebSocketUrl(): string {\r\n    // If URL is absolute, use it as-is\r\n    if (this.url.startsWith('ws://') || this.url.startsWith('wss://')) {\r\n      return this.url;\r\n    }\r\n\r\n    // Otherwise, construct from current page location\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const baseUrl = this.url.startsWith('/')\r\n      ? `${protocol}//${window.location.host}${this.url}`\r\n      : `${protocol}//${window.location.host}/${this.url}`;\r\n\r\n    return baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Internal: Generate unique invocation ID\r\n   */\r\n  private generateInvocationId(): string {\r\n    return (++this.invocationId).toString();\r\n  }\r\n\r\n  /**\r\n   * Internal: Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      if (data !== undefined) {\r\n        console.log(`[SignalM] ${message}`, data);\r\n      } else {\r\n        console.log(`[SignalM] ${message}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SignalMConnection, ConnectionState } from './signalm/index';\r\nimport { Patch } from './types';\r\nimport { ArrayOperation } from './hooks';\r\n\r\n/**\r\n * Manages SignalM connection to the Minimact server hub\r\n *\r\n * Drop-in replacement for SignalRManager using lightweight SignalM\r\n * Bundle size: ~3 KB gzipped (vs 18 KB with SignalR)\r\n */\r\nexport class SignalMManager {\r\n  private connection: SignalMConnection;\r\n  private debugLogging: boolean;\r\n  private eventHandlers: Map<string, Set<Function>>;\r\n\r\n  constructor(hubUrl: string = '/minimact', options: { reconnectInterval?: number; debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.eventHandlers = new Map();\r\n\r\n    // SignalM uses built-in exponential backoff, reconnectInterval is ignored\r\n    this.connection = new SignalMConnection(hubUrl, {\r\n      debug: this.debugLogging\r\n    });\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup SignalM event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle component updates from server\r\n    this.connection.on('UpdateComponent', (componentId: string, html: string) => {\r\n      this.log('UpdateComponent', { componentId, html });\r\n      this.emit('updateComponent', { componentId, html });\r\n    });\r\n\r\n    // Handle patch updates from server\r\n    this.connection.on('ApplyPatches', (componentId: string, patches: Patch[]) => {\r\n      this.log('ApplyPatches', { componentId, patches });\r\n      this.emit('applyPatches', { componentId, patches });\r\n    });\r\n\r\n    // Handle predicted patches (sent immediately for instant feedback)\r\n    this.connection.on('ApplyPrediction', (data: { componentId: string, patches: Patch[], confidence: number }) => {\r\n      this.log(`ApplyPrediction (${(data.confidence * 100).toFixed(0)}% confident)`, { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyPrediction', { componentId: data.componentId, patches: data.patches, confidence: data.confidence });\r\n    });\r\n\r\n    // Handle correction if prediction was wrong\r\n    this.connection.on('ApplyCorrection', (data: { componentId: string, patches: Patch[] }) => {\r\n      this.log('ApplyCorrection (prediction was incorrect)', { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyCorrection', { componentId: data.componentId, patches: data.patches });\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.connection.on('QueueHint', (data: {\r\n      componentId: string,\r\n      hintId: string,\r\n      patches: Patch[],\r\n      confidence: number,\r\n      predictedState: Record<string, any>\r\n    }) => {\r\n      this.log(`QueueHint '${data.hintId}' (${(data.confidence * 100).toFixed(0)}% confident)`, {\r\n        componentId: data.componentId,\r\n        patches: data.patches\r\n      });\r\n      this.emit('queueHint', data);\r\n    });\r\n\r\n    // Handle errors from server\r\n    this.connection.on('Error', (message: string) => {\r\n      console.error('[Minimact] Server error:', message);\r\n      this.emit('error', { message });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.connection.onReconnecting(() => {\r\n      this.log('Reconnecting...');\r\n      this.emit('reconnecting', {});\r\n    });\r\n\r\n    this.connection.onReconnected(() => {\r\n      this.log('Reconnected');\r\n      this.emit('reconnected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n\r\n    this.connection.onDisconnected(() => {\r\n      this.log('Connection closed');\r\n      this.emit('closed', {});\r\n    });\r\n\r\n    this.connection.onConnected(() => {\r\n      this.log('Connected to Minimact hub');\r\n      this.emit('connected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the SignalM connection\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      await this.connection.start();\r\n      // Connected event already emitted by onConnected handler\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to connect:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the SignalM connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    await this.connection.stop();\r\n    this.log('Disconnected from Minimact hub');\r\n  }\r\n\r\n  /**\r\n   * Register a component with the server\r\n   */\r\n  async registerComponent(componentId: string): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('RegisterComponent', componentId);\r\n      this.log('Registered component', { componentId });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to register component:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke a component method on the server\r\n   */\r\n  async invokeComponentMethod(componentId: string, methodName: string, args: any = {}): Promise<void> {\r\n    try {\r\n      const argsJson = JSON.stringify(args);\r\n      await this.connection.invoke('InvokeComponentMethod', componentId, methodName, argsJson);\r\n      this.log('Invoked method', { componentId, methodName, args });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to invoke method:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update client state on the server (single key-value)\r\n   */\r\n  async updateClientState(componentId: string, key: string, value: any): Promise<void> {\r\n    try {\r\n      const valueJson = JSON.stringify(value);\r\n      await this.connection.invoke('UpdateClientState', componentId, key, valueJson);\r\n      this.log('Updated client state', { componentId, key, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client state:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update multiple client-computed state values on the server\r\n   * Used for external library computations (lodash, moment, etc.)\r\n   */\r\n  async updateClientComputedState(componentId: string, computedValues: Record<string, any>): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateClientComputedState', componentId, computedValues);\r\n      this.log('Updated client-computed state', { componentId, computedValues });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client-computed state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state on the server (from useState hook)\r\n   * This keeps server state in sync with client state changes\r\n   */\r\n  async updateComponentState(componentId: string, stateKey: string, value: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentState', componentId, stateKey, value);\r\n      this.log('Updated component state', { componentId, stateKey, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update DOM element state on the server (from useDomElementState hook)\r\n   * This keeps server aware of DOM changes for accurate rendering\r\n   */\r\n  async updateDomElementState(componentId: string, stateKey: string, snapshot: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateDomElementState', componentId, stateKey, snapshot);\r\n      this.log('Updated DOM element state', { componentId, stateKey, snapshot });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update DOM element state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state with array operation metadata\r\n   * This provides semantic intent for array mutations, enabling precise template extraction\r\n   */\r\n  async updateComponentStateWithOperation(\r\n    componentId: string,\r\n    stateKey: string,\r\n    newValue: any,\r\n    operation: ArrayOperation\r\n  ): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentStateWithOperation', componentId, stateKey, newValue, operation);\r\n      this.log('Updated component state with operation', { componentId, stateKey, operation, newValue });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state with operation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update query results on the server (from useDomQuery hook)\r\n   * This keeps server aware of query results for accurate rendering\r\n   */\r\n  async updateQueryResults(componentId: string, queryKey: string, results: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateQueryResults', componentId, queryKey, results);\r\n      this.log('Updated query results', { componentId, queryKey, resultCount: results.length });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update query results:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic invoke method for calling server hub methods\r\n   */\r\n  async invoke(methodName: string, ...args: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke(methodName, ...args);\r\n      this.log(`Invoked ${methodName}`, { args });\r\n    } catch (error) {\r\n      console.error(`[Minimact] Failed to invoke ${methodName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from events\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit event to subscribers\r\n   */\r\n  private emit(event: string, data: any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact SignalM] ${message}`, data || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection state\r\n   * Maps SignalM ConnectionState to SignalR HubConnectionState for compatibility\r\n   */\r\n  get state(): string {\r\n    return this.connection.connectionState;\r\n  }\r\n\r\n  /**\r\n   * Get connection ID\r\n   * SignalM doesn't expose connection IDs (always returns null)\r\n   */\r\n  get connectionId(): string | null {\r\n    return null;\r\n  }\r\n}\r\n","import { Patch, VNode, VElement, VText } from './types';\r\n\r\n/**\r\n * Applies DOM patches from the server to the actual DOM\r\n * Handles surgical updates for minimal DOM manipulation\r\n */\r\nexport class DOMPatcher {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Apply an array of patches to a root element\r\n   */\r\n  applyPatches(rootElement: HTMLElement, patches: Patch[]): void {\r\n    this.log('Applying patches', { count: patches.length, patches });\r\n\r\n    for (const patch of patches) {\r\n      try {\r\n        this.applyPatch(rootElement, patch);\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to apply patch:', patch, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a single patch to the DOM\r\n   */\r\n  private applyPatch(rootElement: HTMLElement, patch: Patch): void {\r\n    const targetElement = this.getElementByPath(rootElement, patch.path);\r\n\r\n    if (!targetElement && patch.type !== 'Create') {\r\n      console.warn('[Minimact] Target element not found for patch:', patch);\r\n      return;\r\n    }\r\n\r\n    switch (patch.type) {\r\n      case 'Create':\r\n        this.patchCreate(rootElement, patch.path, patch.node);\r\n        break;\r\n      case 'Remove':\r\n        this.patchRemove(targetElement!);\r\n        break;\r\n      case 'Replace':\r\n        this.patchReplace(targetElement!, patch.node);\r\n        break;\r\n      case 'UpdateText':\r\n        this.patchUpdateText(targetElement!, patch.content);\r\n        break;\r\n      case 'UpdateProps':\r\n        this.patchUpdateProps(targetElement as HTMLElement, patch.props);\r\n        break;\r\n      case 'ReorderChildren':\r\n        this.patchReorderChildren(targetElement as HTMLElement, patch.order);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and insert a new node\r\n   */\r\n  private patchCreate(rootElement: HTMLElement, path: number[], node: VNode): void {\r\n    const newElement = this.createElementFromVNode(node);\r\n\r\n    if (path.length === 0) {\r\n      // Replace root\r\n      rootElement.innerHTML = '';\r\n      rootElement.appendChild(newElement);\r\n    } else {\r\n      // Insert at path\r\n      const parentPath = path.slice(0, -1);\r\n      const index = path[path.length - 1];\r\n      const parent = this.getElementByPath(rootElement, parentPath) as HTMLElement;\r\n\r\n      if (parent) {\r\n        if (index >= parent.childNodes.length) {\r\n          parent.appendChild(newElement);\r\n        } else {\r\n          parent.insertBefore(newElement, parent.childNodes[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Created node', { path, node });\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the DOM\r\n   */\r\n  private patchRemove(element: Node): void {\r\n    if (element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n      this.log('Removed node', { element });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace a node with a new one\r\n   */\r\n  private patchReplace(oldElement: Node, newNode: VNode): void {\r\n    const newElement = this.createElementFromVNode(newNode);\r\n\r\n    if (oldElement.parentNode) {\r\n      oldElement.parentNode.replaceChild(newElement, oldElement);\r\n      this.log('Replaced node', { oldElement, newNode });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update text content of a text node\r\n   */\r\n  private patchUpdateText(element: Node, content: string): void {\r\n    if (element.nodeType === Node.TEXT_NODE) {\r\n      element.textContent = content;\r\n    } else {\r\n      // If it's an element, update its text content\r\n      element.textContent = content;\r\n    }\r\n    this.log('Updated text', { element, content });\r\n  }\r\n\r\n  /**\r\n   * Update element properties/attributes\r\n   */\r\n  private patchUpdateProps(element: HTMLElement, props: Record<string, string>): void {\r\n    // Remove old attributes not in new props\r\n    const oldAttrs = Array.from(element.attributes);\r\n    for (const attr of oldAttrs) {\r\n      if (!(attr.name in props) && !attr.name.startsWith('data-minimact-')) {\r\n        element.removeAttribute(attr.name);\r\n      }\r\n    }\r\n\r\n    // Set new attributes\r\n    for (const [key, value] of Object.entries(props)) {\r\n      if (key === 'style') {\r\n        element.setAttribute('style', value);\r\n      } else if (key === 'class' || key === 'className') {\r\n        element.className = value;\r\n      } else if (key.startsWith('on')) {\r\n        // Event handlers are managed separately\r\n        continue;\r\n      } else {\r\n        element.setAttribute(key, value);\r\n      }\r\n    }\r\n\r\n    this.log('Updated props', { element, props });\r\n  }\r\n\r\n  /**\r\n   * Reorder children based on keys\r\n   */\r\n  private patchReorderChildren(element: HTMLElement, order: string[]): void {\r\n    const keyedChildren = new Map<string, Node>();\r\n\r\n    // Build map of keyed children\r\n    for (const child of Array.from(element.childNodes)) {\r\n      if (child instanceof HTMLElement) {\r\n        const key = child.getAttribute('data-key') || child.getAttribute('key');\r\n        if (key) {\r\n          keyedChildren.set(key, child);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reorder based on order array\r\n    for (let i = 0; i < order.length; i++) {\r\n      const key = order[i];\r\n      const child = keyedChildren.get(key);\r\n\r\n      if (child) {\r\n        const currentChild = element.childNodes[i];\r\n        if (currentChild !== child) {\r\n          element.insertBefore(child, currentChild);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Reordered children', { element, order });\r\n  }\r\n\r\n  /**\r\n   * Get a DOM element by its path (array of indices)\r\n   */\r\n  private getElementByPath(rootElement: HTMLElement, path: number[]): Node | null {\r\n    let current: Node = rootElement;\r\n\r\n    for (const index of path) {\r\n      if (index >= current.childNodes.length) {\r\n        return null;\r\n      }\r\n      current = current.childNodes[index];\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Create a DOM element from a VNode\r\n   */\r\n  private createElementFromVNode(vnode: VNode): Node {\r\n    switch (vnode.type) {\r\n      case 'Text':\r\n        return document.createTextNode((vnode as VText).content);\r\n\r\n      case 'Element': {\r\n        const velem = vnode as VElement;\r\n        const element = document.createElement(velem.tag);\r\n\r\n        // Set attributes\r\n        for (const [key, value] of Object.entries(velem.props || {})) {\r\n          if (key === 'className' || key === 'class') {\r\n            element.className = value;\r\n          } else if (key.startsWith('on')) {\r\n            // Event handlers will be attached by event delegation\r\n            element.setAttribute(`data-${key.toLowerCase()}`, value);\r\n          } else {\r\n            element.setAttribute(key, value);\r\n          }\r\n        }\r\n\r\n        // Set key if present\r\n        if (velem.key) {\r\n          element.setAttribute('data-key', velem.key);\r\n        }\r\n\r\n        // Create children\r\n        for (const child of velem.children || []) {\r\n          element.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return element;\r\n      }\r\n\r\n      case 'Fragment': {\r\n        const fragment = document.createDocumentFragment();\r\n        const vfrag = vnode as any;\r\n\r\n        for (const child of vfrag.children || []) {\r\n          fragment.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return fragment;\r\n      }\r\n\r\n      case 'RawHtml': {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = (vnode as any).html;\r\n        return div;\r\n      }\r\n\r\n      default:\r\n        console.warn('[Minimact] Unknown VNode type:', vnode);\r\n        return document.createTextNode('');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace entire HTML (fallback when patches aren't available)\r\n   */\r\n  replaceHTML(rootElement: HTMLElement, html: string): void {\r\n    rootElement.innerHTML = html;\r\n    this.log('Replaced entire HTML', { html });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact DOMPatcher] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { ComponentState } from './types';\r\n\r\n/**\r\n * Manages client-side state (useClientState) with reactive updates\r\n * Handles local state that doesn't require server round-trips\r\n */\r\nexport class ClientStateManager {\r\n  private states: Map<string, ComponentState>;\r\n  private subscribers: Map<string, Map<string, Set<Function>>>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.states = new Map();\r\n    this.subscribers = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Initialize client state for a component\r\n   */\r\n  initializeComponent(componentId: string, initialState: ComponentState = {}): void {\r\n    this.states.set(componentId, { ...initialState });\r\n    this.subscribers.set(componentId, new Map());\r\n    this.log('Initialized component state', { componentId, initialState });\r\n  }\r\n\r\n  /**\r\n   * Get client state value\r\n   */\r\n  getState(componentId: string, key: string): any {\r\n    const componentState = this.states.get(componentId);\r\n    return componentState ? componentState[key] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Set client state value and trigger updates\r\n   */\r\n  setState(componentId: string, key: string, value: any): void {\r\n    const componentState = this.states.get(componentId);\r\n\r\n    if (!componentState) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return;\r\n    }\r\n\r\n    // Update state\r\n    const oldValue = componentState[key];\r\n    componentState[key] = value;\r\n\r\n    this.log('State updated', { componentId, key, oldValue, newValue: value });\r\n\r\n    // Notify subscribers\r\n    this.notifySubscribers(componentId, key, value, oldValue);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to state changes\r\n   */\r\n  subscribe(componentId: string, key: string, callback: (value: any, oldValue: any) => void): () => void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return () => {};\r\n    }\r\n\r\n    if (!componentSubscribers.has(key)) {\r\n      componentSubscribers.set(key, new Set());\r\n    }\r\n\r\n    componentSubscribers.get(key)!.add(callback);\r\n    this.log('Subscribed to state', { componentId, key });\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      componentSubscribers.get(key)?.delete(callback);\r\n      this.log('Unsubscribed from state', { componentId, key });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notify all subscribers of a state change\r\n   */\r\n  private notifySubscribers(componentId: string, key: string, value: any, oldValue: any): void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      return;\r\n    }\r\n\r\n    const keySubscribers = componentSubscribers.get(key);\r\n\r\n    if (keySubscribers) {\r\n      keySubscribers.forEach(callback => {\r\n        try {\r\n          callback(value, oldValue);\r\n        } catch (error) {\r\n          console.error('[Minimact] Error in state subscriber:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all state for a component\r\n   */\r\n  getComponentState(componentId: string): ComponentState | undefined {\r\n    return this.states.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update multiple state values at once\r\n   */\r\n  updateState(componentId: string, updates: ComponentState): void {\r\n    for (const [key, value] of Object.entries(updates)) {\r\n      this.setState(componentId, key, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear state for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    this.states.delete(componentId);\r\n    this.subscribers.delete(componentId);\r\n    this.log('Cleared component state', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Bind state to a DOM element's value/content\r\n   */\r\n  bindToElement(\r\n    componentId: string,\r\n    key: string,\r\n    element: HTMLElement,\r\n    property: 'value' | 'textContent' | 'innerHTML' = 'textContent'\r\n  ): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      this.updateElement(element, property, initialValue);\r\n    }\r\n\r\n    // Subscribe to changes\r\n    return this.subscribe(componentId, key, (value) => {\r\n      this.updateElement(element, property, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a DOM element based on property type\r\n   */\r\n  private updateElement(element: HTMLElement, property: string, value: any): void {\r\n    switch (property) {\r\n      case 'value':\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          element.value = String(value);\r\n        }\r\n        break;\r\n      case 'textContent':\r\n        element.textContent = String(value);\r\n        break;\r\n      case 'innerHTML':\r\n        element.innerHTML = String(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind input element to state (two-way binding)\r\n   */\r\n  bindInput(componentId: string, key: string, input: HTMLInputElement | HTMLTextAreaElement): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      input.value = String(initialValue);\r\n    }\r\n\r\n    // Listen to input changes\r\n    const inputHandler = (e: Event) => {\r\n      const target = e.target as HTMLInputElement | HTMLTextAreaElement;\r\n      this.setState(componentId, key, target.value);\r\n    };\r\n\r\n    input.addEventListener('input', inputHandler);\r\n\r\n    // Subscribe to state changes from other sources\r\n    const unsubscribe = this.subscribe(componentId, key, (value) => {\r\n      if (input.value !== String(value)) {\r\n        input.value = String(value);\r\n      }\r\n    });\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      input.removeEventListener('input', inputHandler);\r\n      unsubscribe();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact ClientState] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import type { HintQueue } from './hint-queue';\r\nimport type { DOMPatcher } from './dom-patcher';\r\nimport type { PlaygroundBridge } from './playground-bridge';\r\n\r\n/**\r\n * Event delegation system for handling component events\r\n * Uses a single root listener for performance\r\n */\r\nexport class EventDelegation {\r\n  private rootElement: HTMLElement;\r\n  private componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>;\r\n  private debugLogging: boolean;\r\n  private eventListeners: Map<string, EventListener>;\r\n  private hintQueue?: HintQueue;\r\n  private domPatcher?: DOMPatcher;\r\n  private playgroundBridge?: PlaygroundBridge;\r\n\r\n  constructor(\r\n    rootElement: HTMLElement,\r\n    componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>,\r\n    options: {\r\n      debugLogging?: boolean;\r\n      hintQueue?: HintQueue;\r\n      domPatcher?: DOMPatcher;\r\n      playgroundBridge?: PlaygroundBridge;\r\n    } = {}\r\n  ) {\r\n    this.rootElement = rootElement;\r\n    this.componentMethodInvoker = componentMethodInvoker;\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.hintQueue = options.hintQueue;\r\n    this.domPatcher = options.domPatcher;\r\n    this.playgroundBridge = options.playgroundBridge;\r\n    this.eventListeners = new Map();\r\n\r\n    this.setupEventDelegation();\r\n  }\r\n\r\n  /**\r\n   * Setup event delegation for common events\r\n   */\r\n  private setupEventDelegation(): void {\r\n    const eventTypes = [\r\n      'click',\r\n      'dblclick',\r\n      'input',\r\n      'change',\r\n      'submit',\r\n      'focus',\r\n      'blur',\r\n      'keydown',\r\n      'keyup',\r\n      'keypress',\r\n      'mouseenter',\r\n      'mouseleave',\r\n      'mouseover',\r\n      'mouseout'\r\n    ];\r\n\r\n    for (const eventType of eventTypes) {\r\n      const listener = this.createEventListener(eventType);\r\n      this.eventListeners.set(eventType, listener);\r\n      this.rootElement.addEventListener(eventType, listener, true); // Use capture phase\r\n    }\r\n\r\n    this.log('Event delegation setup complete', { eventTypes });\r\n  }\r\n\r\n  /**\r\n   * Create an event listener for a specific event type\r\n   */\r\n  private createEventListener(eventType: string): EventListener {\r\n    return async (event: Event) => {\r\n      const target = event.target as HTMLElement;\r\n\r\n      // Find the nearest element with an event handler\r\n      const handlerElement = this.findHandlerElement(target, eventType);\r\n\r\n      if (!handlerElement) {\r\n        return;\r\n      }\r\n\r\n      // Get handler information\r\n      const handler = this.getEventHandler(handlerElement, eventType);\r\n\r\n      if (!handler) {\r\n        return;\r\n      }\r\n\r\n      // Prevent default for submit events\r\n      if (eventType === 'submit') {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.log('Event triggered', { eventType, handler, target });\r\n\r\n      // Execute handler\r\n      await this.executeHandler(handler, event, handlerElement);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the nearest element with an event handler attribute\r\n   */\r\n  private findHandlerElement(element: HTMLElement | null, eventType: string): HTMLElement | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const attrName = `data-on${eventType}`;\r\n      const legacyAttrName = `on${eventType}`;\r\n\r\n      if (current.hasAttribute(attrName) || current.hasAttribute(legacyAttrName)) {\r\n        return current;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get event handler information from element\r\n   */\r\n  private getEventHandler(element: HTMLElement, eventType: string): EventHandler | null {\r\n    const attrName = `data-on${eventType}`;\r\n    const legacyAttrName = `on${eventType}`;\r\n\r\n    const handlerStr = element.getAttribute(attrName) || element.getAttribute(legacyAttrName);\r\n\r\n    if (!handlerStr) {\r\n      return null;\r\n    }\r\n\r\n    // Parse handler string\r\n    // Format: \"MethodName\" or \"MethodName:arg1:arg2\"\r\n    const parts = handlerStr.split(':');\r\n    const methodName = parts[0];\r\n    const args = parts.slice(1);\r\n\r\n    // Find component ID\r\n    const componentId = this.findComponentId(element);\r\n\r\n    if (!componentId) {\r\n      console.warn('[Minimact] No component ID found for event handler:', handlerStr);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      componentId,\r\n      methodName,\r\n      args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the component ID for an element\r\n   */\r\n  private findComponentId(element: HTMLElement | null): string | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const componentId = current.getAttribute('data-minimact-component-id');\r\n      if (componentId) {\r\n        return componentId;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    // Check root element\r\n    const rootComponentId = this.rootElement.getAttribute('data-minimact-component-id');\r\n    return rootComponentId;\r\n  }\r\n\r\n  /**\r\n   * Execute an event handler\r\n   */\r\n  private async executeHandler(handler: EventHandler, event: Event, element: HTMLElement): Promise<void> {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      // Build args object\r\n      const argsObj: any = {};\r\n\r\n      // Add parsed args from handler string\r\n      if (handler.args.length > 0) {\r\n        argsObj.args = handler.args;\r\n      }\r\n\r\n      // Add event data\r\n      if (event instanceof MouseEvent) {\r\n        argsObj.mouse = {\r\n          clientX: event.clientX,\r\n          clientY: event.clientY,\r\n          button: event.button\r\n        };\r\n      }\r\n\r\n      if (event instanceof KeyboardEvent) {\r\n        argsObj.keyboard = {\r\n          key: event.key,\r\n          code: event.code,\r\n          ctrlKey: event.ctrlKey,\r\n          shiftKey: event.shiftKey,\r\n          altKey: event.altKey\r\n        };\r\n      }\r\n\r\n      // Add target value for input events\r\n      if (event.type === 'input' || event.type === 'change') {\r\n        const target = event.target as HTMLInputElement;\r\n        argsObj.value = target.value;\r\n      }\r\n\r\n      // Check hint queue for cached prediction (CACHE HIT!)\r\n      if (this.hintQueue && this.domPatcher) {\r\n        // Build hint ID based on method name (simplified - in production would be more sophisticated)\r\n        const hintId = `${handler.methodName}`;\r\n\r\n        // Try to match hint based on the method being called\r\n        // This is a simplified version - in reality we'd need to know the state change\r\n        const matchedHint = this.tryMatchHint(handler.componentId, handler.methodName);\r\n\r\n        if (matchedHint) {\r\n          // 🟢 CACHE HIT! Apply patches instantly\r\n          const componentElement = this.findComponentElement(handler.componentId);\r\n          if (componentElement) {\r\n            this.domPatcher.applyPatches(componentElement, matchedHint.patches as any[]);\r\n\r\n            const latency = performance.now() - startTime;\r\n\r\n            // Notify playground of cache hit\r\n            if (this.playgroundBridge) {\r\n              this.playgroundBridge.cacheHit({\r\n                componentId: handler.componentId,\r\n                hintId: matchedHint.hintId,\r\n                latency,\r\n                confidence: matchedHint.confidence,\r\n                patchCount: matchedHint.patches.length\r\n              });\r\n            }\r\n\r\n            this.log(`🟢 CACHE HIT! Applied ${matchedHint.patches.length} patches in ${latency.toFixed(2)}ms`, {\r\n              handler,\r\n              confidence: (matchedHint.confidence * 100).toFixed(0) + '%'\r\n            });\r\n\r\n            // Still notify server in background for verification\r\n            this.componentMethodInvoker(handler.componentId, handler.methodName, argsObj).catch(err => {\r\n              console.error('[Minimact] Background server notification failed:', err);\r\n            });\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 🔴 CACHE MISS - No prediction found, send to server\r\n      await this.componentMethodInvoker(handler.componentId, handler.methodName, argsObj);\r\n\r\n      const latency = performance.now() - startTime;\r\n\r\n      // Notify playground of cache miss\r\n      if (this.playgroundBridge) {\r\n        this.playgroundBridge.cacheMiss({\r\n          componentId: handler.componentId,\r\n          methodName: handler.methodName,\r\n          latency,\r\n          patchCount: 0 // We don't know patch count in this flow\r\n        });\r\n      }\r\n\r\n      this.log(`🔴 CACHE MISS - Server latency: ${latency.toFixed(2)}ms`, { handler, argsObj });\r\n    } catch (error) {\r\n      console.error('[Minimact] Error executing handler:', handler, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to match a hint in the queue for this method invocation\r\n   * Simplified version - checks if there's a hint matching the method name\r\n   */\r\n  private tryMatchHint(componentId: string, methodName: string): { hintId: string; patches: any[]; confidence: number } | null {\r\n    if (!this.hintQueue) return null;\r\n\r\n    // In a real implementation, we'd need to build the predicted state change\r\n    // For now, we'll use a simplified heuristic based on method name\r\n    // The server sends hints with IDs like \"count_1\" for count going to 1\r\n\r\n    // Try to match by checking all hints for this component\r\n    // This is a placeholder - the actual matching logic would be more sophisticated\r\n    return null; // TODO: Implement proper hint matching\r\n  }\r\n\r\n  /**\r\n   * Find the component element by component ID\r\n   */\r\n  private findComponentElement(componentId: string): HTMLElement | null {\r\n    const element = this.rootElement.querySelector(`[data-minimact-component-id=\"${componentId}\"]`);\r\n    return element as HTMLElement;\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  destroy(): void {\r\n    for (const [eventType, listener] of this.eventListeners.entries()) {\r\n      this.rootElement.removeEventListener(eventType, listener, true);\r\n    }\r\n    this.eventListeners.clear();\r\n    this.log('Event delegation destroyed');\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact EventDelegation] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\ninterface EventHandler {\r\n  componentId: string;\r\n  methodName: string;\r\n  args: string[];\r\n}\r\n","import { ComponentMetadata } from './types';\r\nimport { ClientStateManager } from './client-state';\r\n\r\n/**\r\n * Handles hydration of server-rendered HTML with client interactivity\r\n * Identifies and manages client zones, server zones, and hybrid zones\r\n */\r\nexport class HydrationManager {\r\n  private clientState: ClientStateManager;\r\n  private components: Map<string, ComponentMetadata>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(clientState: ClientStateManager, options: { debugLogging?: boolean } = {}) {\r\n    this.clientState = clientState;\r\n    this.components = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Hydrate a component root element\r\n   */\r\n  hydrateComponent(componentId: string, rootElement: HTMLElement): void {\r\n    this.log('Hydrating component', { componentId });\r\n\r\n    // The actual component element is the first child of the container\r\n    // (rootElement is #minimact-root, first child is the actual component div)\r\n    const componentElement = rootElement.firstElementChild as HTMLElement;\r\n    if (!componentElement) {\r\n      console.error('[Minimact Hydration] No component element found in root');\r\n      return;\r\n    }\r\n\r\n    // Create component metadata\r\n    const metadata: ComponentMetadata = {\r\n      componentId,\r\n      element: componentElement,  // Use the actual component element, not the container\r\n      clientState: {},\r\n      serverState: {}\r\n    };\r\n\r\n    this.components.set(componentId, metadata);\r\n\r\n    // Set component ID on root element\r\n    rootElement.setAttribute('data-minimact-component-id', componentId);\r\n\r\n    // Initialize client state\r\n    this.clientState.initializeComponent(componentId);\r\n\r\n    // Find and hydrate client zones\r\n    this.hydrateClientZones(componentId, rootElement);\r\n\r\n    // Find and bind state to elements\r\n    this.bindStateElements(componentId, rootElement);\r\n\r\n    this.log('Component hydrated', { componentId, metadata });\r\n  }\r\n\r\n  /**\r\n   * Hydrate client-only zones (data-minimact-client-scope)\r\n   */\r\n  private hydrateClientZones(componentId: string, rootElement: HTMLElement): void {\r\n    const clientZones = rootElement.querySelectorAll('[data-minimact-client-scope]');\r\n\r\n    this.log('Found client zones', { count: clientZones.length });\r\n\r\n    clientZones.forEach((zone) => {\r\n      const element = zone as HTMLElement;\r\n\r\n      // Get state name if specified\r\n      const stateName = element.getAttribute('data-state');\r\n\r\n      if (stateName) {\r\n        // Initialize state from element\r\n        const initialValue = this.getInitialValue(element);\r\n        this.clientState.setState(componentId, stateName, initialValue);\r\n\r\n        // Bind element to state\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          this.clientState.bindInput(componentId, stateName, element);\r\n        }\r\n\r\n        this.log('Hydrated client zone', { element, stateName, initialValue });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Bind elements with data-bind attribute to state\r\n   */\r\n  private bindStateElements(componentId: string, rootElement: HTMLElement): void {\r\n    const boundElements = rootElement.querySelectorAll('[data-bind]');\r\n\r\n    this.log('Found bound elements', { count: boundElements.length });\r\n\r\n    boundElements.forEach((elem) => {\r\n      const element = elem as HTMLElement;\r\n      const bindKey = element.getAttribute('data-bind');\r\n\r\n      if (!bindKey) {\r\n        return;\r\n      }\r\n\r\n      // Determine binding type\r\n      const isClientScope = this.isInClientScope(element);\r\n      const bindProperty = this.determineBindProperty(element);\r\n\r\n      if (isClientScope) {\r\n        // Client-side binding\r\n        this.clientState.bindToElement(componentId, bindKey, element, bindProperty);\r\n        this.log('Bound to client state', { element, bindKey, bindProperty });\r\n      } else {\r\n        // Server-side binding - will be updated via patches\r\n        this.log('Server-bound element (patch-controlled)', { element, bindKey });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if an element is within a client scope\r\n   */\r\n  private isInClientScope(element: HTMLElement): boolean {\r\n    let current: HTMLElement | null = element;\r\n\r\n    while (current) {\r\n      if (current.hasAttribute('data-minimact-client-scope')) {\r\n        return true;\r\n      }\r\n      if (current.hasAttribute('data-minimact-server-scope')) {\r\n        return false;\r\n      }\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determine which property to bind (value, textContent, innerHTML)\r\n   */\r\n  private determineBindProperty(element: HTMLElement): 'value' | 'textContent' | 'innerHTML' {\r\n    if (element instanceof HTMLInputElement ||\r\n        element instanceof HTMLTextAreaElement ||\r\n        element instanceof HTMLSelectElement) {\r\n      return 'value';\r\n    }\r\n\r\n    if (element.hasAttribute('data-bind-html')) {\r\n      return 'innerHTML';\r\n    }\r\n\r\n    return 'textContent';\r\n  }\r\n\r\n  /**\r\n   * Get initial value from an element\r\n   */\r\n  private getInitialValue(element: HTMLElement): any {\r\n    if (element instanceof HTMLInputElement) {\r\n      if (element.type === 'checkbox') {\r\n        return element.checked;\r\n      } else if (element.type === 'number') {\r\n        return element.valueAsNumber || 0;\r\n      } else {\r\n        return element.value;\r\n      }\r\n    }\r\n\r\n    if (element instanceof HTMLTextAreaElement) {\r\n      return element.value;\r\n    }\r\n\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element.value;\r\n    }\r\n\r\n    return element.textContent || '';\r\n  }\r\n\r\n  /**\r\n   * Dehydrate (cleanup) a component\r\n   */\r\n  dehydrateComponent(componentId: string): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (!metadata) {\r\n      return;\r\n    }\r\n\r\n    // Clear client state\r\n    this.clientState.clearComponent(componentId);\r\n\r\n    // Remove from registry\r\n    this.components.delete(componentId);\r\n\r\n    this.log('Component dehydrated', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Get component metadata\r\n   */\r\n  getComponent(componentId: string): ComponentMetadata | undefined {\r\n    return this.components.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update server state for a component\r\n   */\r\n  updateServerState(componentId: string, key: string, value: any): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (metadata) {\r\n      metadata.serverState[key] = value;\r\n      this.log('Updated server state', { componentId, key, value });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hydrate all components on the page\r\n   */\r\n  hydrateAll(): void {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    this.log('Hydrating all components', { count: components.length });\r\n\r\n    components.forEach((element) => {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        this.hydrateComponent(componentId, element as HTMLElement);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact Hydration] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { TemplatePatch, Patch, LoopTemplate, ItemTemplate, VNode, VElement, VText, Binding } from './types';\r\n\r\n/**\r\n * Template Renderer\r\n *\r\n * Renders template patches with parameter values for runtime predictions.\r\n * Enables 98% memory reduction by storing patterns instead of concrete values.\r\n *\r\n * Example:\r\n *   template: \"Count: {0}\"\r\n *   params: [42]\r\n *   result: \"Count: 42\"\r\n */\r\nexport class TemplateRenderer {\r\n  /**\r\n   * Render a template string with parameters\r\n   *\r\n   * @param template - Template string with {0}, {1}, etc. placeholders\r\n   * @param params - Parameter values to substitute\r\n   * @returns Rendered string with parameters substituted\r\n   *\r\n   * @example\r\n   * renderTemplate(\"Count: {0}\", [42]) → \"Count: 42\"\r\n   * renderTemplate(\"Hello, {0} {1}!\", [\"John\", \"Doe\"]) → \"Hello, John Doe!\"\r\n   */\r\n  static renderTemplate(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace each placeholder {0}, {1}, etc. with corresponding parameter\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = this.formatValue(param);\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render a template patch with current state values\r\n   *\r\n   * @param templatePatch - Template patch data\r\n   * @param stateValues - Current state values (key-value pairs)\r\n   * @returns Rendered string\r\n   *\r\n   * @example\r\n   * const tp = { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] };\r\n   * renderTemplatePatch(tp, { count: 42 }) → \"Count: 42\"\r\n   *\r\n   * @example Conditional\r\n   * const tp = {\r\n   *   template: \"{0}\",\r\n   *   bindings: [\"isActive\"],\r\n   *   conditionalTemplates: { \"true\": \"Active\", \"false\": \"Inactive\" },\r\n   *   conditionalBindingIndex: 0\r\n   * };\r\n   * renderTemplatePatch(tp, { isActive: true }) → \"Active\"\r\n   */\r\n  static renderTemplatePatch(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string {\r\n    // Check for conditional templates\r\n    if (templatePatch.conditionalTemplates && templatePatch.conditionalBindingIndex !== undefined) {\r\n      const bindingIndex = templatePatch.conditionalBindingIndex;\r\n      const conditionBinding = templatePatch.bindings[bindingIndex];\r\n\r\n      // Get condition value (handle both string and Binding object)\r\n      const conditionKey = typeof conditionBinding === 'object' && 'stateKey' in conditionBinding\r\n        ? conditionBinding.stateKey\r\n        : conditionBinding as string;\r\n      const conditionValue = stateValues[conditionKey];\r\n\r\n      // Lookup the template for this condition value\r\n      const conditionalTemplate = templatePatch.conditionalTemplates[String(conditionValue)];\r\n\r\n      if (conditionalTemplate !== undefined) {\r\n        // If it's a simple conditional (just maps to string), return it\r\n        if (!conditionalTemplate.includes('{')) {\r\n          return conditionalTemplate;\r\n        }\r\n\r\n        // Otherwise, it's a conditional template with other bindings\r\n        // Apply transforms if present\r\n        const params = templatePatch.bindings.map(binding => {\r\n          if (typeof binding === 'object' && 'stateKey' in binding) {\r\n            const value = stateValues[binding.stateKey];\r\n            return binding.transform ? this.applyTransform(value, binding.transform) : value;\r\n          }\r\n          return stateValues[binding as string];\r\n        });\r\n        return this.renderTemplate(conditionalTemplate, params);\r\n      }\r\n    }\r\n\r\n    // Standard template rendering\r\n    const params = templatePatch.bindings.map((binding, index) => {\r\n      // Phase 6: Support Binding objects with transforms\r\n      if (typeof binding === 'object' && 'stateKey' in binding) {\r\n        const value = stateValues[binding.stateKey];\r\n\r\n        // Apply transform if present\r\n        if (binding.transform) {\r\n          return this.applyTransform(value, binding.transform);\r\n        }\r\n\r\n        return value;\r\n      }\r\n\r\n      // Backward compatibility: Simple string binding\r\n      return stateValues[binding as string];\r\n    });\r\n\r\n    return this.renderTemplate(templatePatch.template, params);\r\n  }\r\n\r\n  /**\r\n   * Convert a template patch to concrete patch(es) with current state\r\n   *\r\n   * @param patch - Template patch (UpdateTextTemplate, UpdatePropsTemplate, or UpdateListTemplate)\r\n   * @param stateValues - Current state values\r\n   * @returns Concrete patch or array of patches\r\n   *\r\n   * @example\r\n   * const patch = {\r\n   *   type: 'UpdateTextTemplate',\r\n   *   path: [0, 0],\r\n   *   templatePatch: { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] }\r\n   * };\r\n   * materializePatch(patch, { count: 42 })\r\n   * → { type: 'UpdateText', path: [0, 0], content: \"Count: 42\" }\r\n   */\r\n  static materializePatch(\r\n    patch: Patch,\r\n    stateValues: Record<string, any>\r\n  ): Patch | Patch[] {\r\n    switch (patch.type) {\r\n      case 'UpdateTextTemplate': {\r\n        const content = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateText',\r\n          path: patch.path,\r\n          content\r\n        };\r\n      }\r\n\r\n      case 'UpdatePropsTemplate': {\r\n        const value = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateProps',\r\n          path: patch.path,\r\n          props: { [patch.propName]: value }\r\n        };\r\n      }\r\n\r\n      case 'UpdateListTemplate': {\r\n        // Render loop template to VNodes\r\n        const vnodes = this.renderLoopTemplate(patch.loopTemplate, stateValues);\r\n\r\n        // Convert to concrete patches\r\n        return this.convertLoopToPatches(patch.path, vnodes);\r\n      }\r\n\r\n      default:\r\n        // Not a template patch, return as-is\r\n        return patch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Materialize multiple template patches\r\n   *\r\n   * @param patches - Array of patches (template or concrete)\r\n   * @param stateValues - Current state values\r\n   * @returns Array of concrete patches\r\n   */\r\n  static materializePatches(\r\n    patches: Patch[],\r\n    stateValues: Record<string, any>\r\n  ): Patch[] {\r\n    const materialized: Patch[] = [];\r\n\r\n    for (const patch of patches) {\r\n      const result = this.materializePatch(patch, stateValues);\r\n\r\n      if (Array.isArray(result)) {\r\n        // UpdateListTemplate returns multiple patches\r\n        materialized.push(...result);\r\n      } else {\r\n        materialized.push(result);\r\n      }\r\n    }\r\n\r\n    return materialized;\r\n  }\r\n\r\n  /**\r\n   * Apply transform to a value (Phase 6: Expression Templates)\r\n   * Security: Only whitelisted transforms are allowed\r\n   *\r\n   * @param value - Raw value from state\r\n   * @param transform - Transform string (e.g., \"toFixed(2)\", \"* 100\", \"toUpperCase()\")\r\n   * @returns Transformed value\r\n   *\r\n   * @example\r\n   * applyTransform(99.95, \"toFixed(2)\") → \"99.95\"\r\n   * applyTransform(0.847, \"* 100\") → 84.7\r\n   * applyTransform(\"hello\", \"toUpperCase()\") → \"HELLO\"\r\n   */\r\n  static applyTransform(value: any, transform: string): any {\r\n    // Security: Whitelist-only approach for safe transforms\r\n\r\n    // toFixed(n) - Format number to n decimal places\r\n    if (transform.startsWith('toFixed(')) {\r\n      const decimals = parseInt(transform.match(/\\d+/)?.[0] || '0');\r\n      return Number(value).toFixed(decimals);\r\n    }\r\n\r\n    // Arithmetic: * N (multiplication)\r\n    if (transform.startsWith('* ')) {\r\n      const multiplier = parseFloat(transform.substring(2));\r\n      return Number(value) * multiplier;\r\n    }\r\n\r\n    // Arithmetic: / N (division)\r\n    if (transform.startsWith('/ ')) {\r\n      const divisor = parseFloat(transform.substring(2));\r\n      return Number(value) / divisor;\r\n    }\r\n\r\n    // Arithmetic: + N (addition)\r\n    if (transform.startsWith('+ ')) {\r\n      const addend = parseFloat(transform.substring(2));\r\n      return Number(value) + addend;\r\n    }\r\n\r\n    // Arithmetic: - N (subtraction)\r\n    if (transform.startsWith('- ')) {\r\n      const subtrahend = parseFloat(transform.substring(2));\r\n      return Number(value) - subtrahend;\r\n    }\r\n\r\n    // String: toUpperCase()\r\n    if (transform === 'toUpperCase()' || transform === 'toUpperCase') {\r\n      return String(value).toUpperCase();\r\n    }\r\n\r\n    // String: toLowerCase()\r\n    if (transform === 'toLowerCase()' || transform === 'toLowerCase') {\r\n      return String(value).toLowerCase();\r\n    }\r\n\r\n    // String: trim()\r\n    if (transform === 'trim()' || transform === 'trim') {\r\n      return String(value).trim();\r\n    }\r\n\r\n    // Boolean: ! (negation)\r\n    if (transform === '!') {\r\n      return !value;\r\n    }\r\n\r\n    // Default: Unknown transform, log warning and return value as-is\r\n    console.warn(`[TemplateRenderer] Unknown transform: ${transform}`);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format a value for template substitution\r\n   *\r\n   * @param value - Value to format\r\n   * @returns String representation of value\r\n   */\r\n  private static formatValue(value: any): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === 'number' || typeof value === 'boolean') {\r\n      return String(value);\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      return value.map(v => this.formatValue(v)).join(', ');\r\n    }\r\n\r\n    if (typeof value === 'object') {\r\n      // For objects, use JSON.stringify (could be customized)\r\n      return JSON.stringify(value);\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Check if a patch is a template patch\r\n   *\r\n   * @param patch - Patch to check\r\n   * @returns True if patch is a template patch\r\n   */\r\n  static isTemplatePatch(patch: Patch): boolean {\r\n    return patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate';\r\n  }\r\n\r\n  /**\r\n   * Extract bindings from a template patch\r\n   *\r\n   * @param patch - Template patch\r\n   * @returns Array of state variable names, or empty array if not a template patch\r\n   */\r\n  static extractBindings(patch: Patch): string[] {\r\n    if (patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate') {\r\n      // Handle both string bindings and Binding objects\r\n      return patch.templatePatch.bindings.map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Validate that all required bindings are present in state\r\n   *\r\n   * @param templatePatch - Template patch to validate\r\n   * @param stateValues - Available state values\r\n   * @returns True if all bindings are present\r\n   */\r\n  static validateBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): boolean {\r\n    return templatePatch.bindings.every(binding => {\r\n      const key = typeof binding === 'object' && 'stateKey' in binding\r\n        ? binding.stateKey\r\n        : binding as string;\r\n      return key in stateValues;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get missing bindings from state\r\n   *\r\n   * @param templatePatch - Template patch to check\r\n   * @param stateValues - Available state values\r\n   * @returns Array of missing binding names\r\n   */\r\n  static getMissingBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string[] {\r\n    return templatePatch.bindings\r\n      .filter(binding => {\r\n        const key = typeof binding === 'object' && 'stateKey' in binding\r\n          ? binding.stateKey\r\n          : binding as string;\r\n        return !(key in stateValues);\r\n      })\r\n      .map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Render loop template with current array state\r\n   *\r\n   * @param loopTemplate - Loop template data\r\n   * @param stateValues - Current state values (must include array binding)\r\n   * @returns Array of rendered VNodes\r\n   *\r\n   * @example\r\n   * const template = {\r\n   *   array_binding: \"todos\",\r\n   *   item_template: {\r\n   *     type: \"Element\",\r\n   *     tag: \"li\",\r\n   *     children_templates: [{\r\n   *       type: \"Text\",\r\n   *       template_patch: { template: \"{0}\", bindings: [\"item.text\"], slots: [0] }\r\n   *     }]\r\n   *   }\r\n   * };\r\n   * renderLoopTemplate(template, { todos: [{ text: \"A\" }, { text: \"B\" }] })\r\n   * → [<li>A</li>, <li>B</li>]\r\n   */\r\n  static renderLoopTemplate(\r\n    loopTemplate: LoopTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode[] {\r\n    const array = stateValues[loopTemplate.array_binding];\r\n\r\n    if (!Array.isArray(array)) {\r\n      console.warn(\r\n        `[TemplateRenderer] Expected array for '${loopTemplate.array_binding}', got:`,\r\n        array\r\n      );\r\n      return [];\r\n    }\r\n\r\n    return array.map((item, index) => {\r\n      // Build item state with nested object access\r\n      const itemState = {\r\n        ...stateValues,\r\n        item,\r\n        index,\r\n        ...(loopTemplate.index_var ? { [loopTemplate.index_var]: index } : {})\r\n      };\r\n\r\n      // Flatten item object for binding access (item.text → \"item.text\": value)\r\n      const flattenedState = this.flattenItemState(itemState, item);\r\n\r\n      // Render item template\r\n      return this.renderItemTemplate(loopTemplate.item_template, flattenedState);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten item object for template binding access\r\n   *\r\n   * @param itemState - Current state including item\r\n   * @param item - The array item to flatten\r\n   * @returns Flattened state with \"item.property\" keys\r\n   *\r\n   * @example\r\n   * flattenItemState({ item: { id: 1, text: \"A\" } }, { id: 1, text: \"A\" })\r\n   * → { \"item.id\": 1, \"item.text\": \"A\", item: {...}, ... }\r\n   */\r\n  private static flattenItemState(\r\n    itemState: Record<string, any>,\r\n    item: any\r\n  ): Record<string, any> {\r\n    const flattened = { ...itemState };\r\n\r\n    if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\r\n      // Flatten object properties with \"item.\" prefix\r\n      for (const key in item) {\r\n        flattened[`item.${key}`] = item[key];\r\n      }\r\n    }\r\n\r\n    return flattened;\r\n  }\r\n\r\n  /**\r\n   * Render item template to VNode\r\n   *\r\n   * @param itemTemplate - Template for individual list item\r\n   * @param stateValues - State values with flattened item properties\r\n   * @returns Rendered VNode\r\n   */\r\n  private static renderItemTemplate(\r\n    itemTemplate: ItemTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode {\r\n    switch (itemTemplate.type) {\r\n      case 'Text': {\r\n        const content = this.renderTemplatePatch(itemTemplate.template_patch, stateValues);\r\n        return {\r\n          type: 'Text',\r\n          content\r\n        } as VText;\r\n      }\r\n\r\n      case 'Element': {\r\n        // Render props\r\n        const props: Record<string, string> = {};\r\n        if (itemTemplate.props_templates) {\r\n          for (const [propName, propTemplate] of Object.entries(itemTemplate.props_templates)) {\r\n            props[propName] = this.renderTemplatePatch(propTemplate, stateValues);\r\n          }\r\n        }\r\n\r\n        // Render children\r\n        const children = (itemTemplate.children_templates || []).map(childTemplate =>\r\n          this.renderItemTemplate(childTemplate, stateValues)\r\n        );\r\n\r\n        // Render key\r\n        const key = itemTemplate.key_binding\r\n          ? String(stateValues[itemTemplate.key_binding])\r\n          : undefined;\r\n\r\n        return {\r\n          type: 'Element',\r\n          tag: itemTemplate.tag,\r\n          props,\r\n          children,\r\n          key\r\n        } as VElement;\r\n      }\r\n\r\n      default:\r\n        throw new Error(`Unknown item template type: ${(itemTemplate as any).type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert rendered loop VNodes to concrete patches\r\n   * Generates Create/Replace patches for list update\r\n   *\r\n   * @param parentPath - Path to parent element containing the list\r\n   * @param vnodes - Rendered VNodes for list items\r\n   * @returns Array of patches to update the list\r\n   */\r\n  private static convertLoopToPatches(\r\n    parentPath: number[],\r\n    vnodes: VNode[]\r\n  ): Patch[] {\r\n    // For Phase 4A simplicity: Replace entire list with Create patches\r\n    // TODO Phase 4C: Optimize with incremental diffing\r\n\r\n    return vnodes.map((node, index) => ({\r\n      type: 'Create',\r\n      path: [...parentPath, index],\r\n      node\r\n    } as Patch));\r\n  }\r\n}\r\n","import { Patch } from './types';\r\nimport { TemplateRenderer } from './template-renderer';\r\n\r\n/**\r\n * Queued hint with pre-computed patches\r\n */\r\ninterface QueuedHint {\r\n  hintId: string;\r\n  componentId: string;\r\n  patches: Patch[];\r\n  confidence: number;\r\n  predictedState: Record<string, any>;\r\n  queuedAt: number;\r\n  /** True if this hint contains template patches (for statistics) */\r\n  isTemplate?: boolean;\r\n}\r\n\r\n/**\r\n * Manages hint queue for usePredictHint\r\n * Stores pre-computed patches and applies them when state changes match\r\n */\r\nexport class HintQueue {\r\n  private hints: Map<string, QueuedHint> = new Map();\r\n  private debugLogging: boolean;\r\n  private maxHintAge: number = 5000; // 5 seconds TTL\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Queue a hint from the server\r\n   */\r\n  queueHint(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n    predictedState: Record<string, any>;\r\n  }): void {\r\n    const key = `${data.componentId}:${data.hintId}`;\r\n\r\n    // Check if this hint contains template patches\r\n    const isTemplate = data.patches.some(patch => TemplateRenderer.isTemplatePatch(patch));\r\n\r\n    this.hints.set(key, {\r\n      ...data,\r\n      queuedAt: Date.now(),\r\n      isTemplate\r\n    });\r\n\r\n    const patchType = isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n    this.log(`${patchType} hint '${data.hintId}' queued for ${data.componentId}`, data);\r\n\r\n    // Auto-expire old hints\r\n    this.cleanupStaleHints();\r\n  }\r\n\r\n  /**\r\n   * Check if a state change matches any queued hint\r\n   * Returns patches if match found, null otherwise\r\n   */\r\n  matchHint(componentId: string, stateChanges: Record<string, any>): {\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n  } | null {\r\n    // Find hints for this component\r\n    const componentHints = Array.from(this.hints.entries())\r\n      .filter(([key]) => key.startsWith(`${componentId}:`))\r\n      .map(([, hint]) => hint);\r\n\r\n    // Check each hint to see if it matches the state change\r\n    for (const hint of componentHints) {\r\n      if (this.stateMatches(hint.predictedState, stateChanges)) {\r\n        const patchType = hint.isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n        this.log(`${patchType} hint '${hint.hintId}' matched!`, { hint, stateChanges });\r\n\r\n        // Remove from queue\r\n        const key = `${componentId}:${hint.hintId}`;\r\n        this.hints.delete(key);\r\n\r\n        // Materialize template patches with current state values\r\n        const materializedPatches = TemplateRenderer.materializePatches(\r\n          hint.patches,\r\n          stateChanges\r\n        );\r\n\r\n        return {\r\n          hintId: hint.hintId,\r\n          patches: materializedPatches,\r\n          confidence: hint.confidence\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if predicted state matches actual state change\r\n   */\r\n  private stateMatches(predicted: Record<string, any>, actual: Record<string, any>): boolean {\r\n    // Check if all predicted keys match actual values\r\n    for (const [key, predictedValue] of Object.entries(predicted)) {\r\n      if (!(key in actual)) {\r\n        return false; // Key not in actual change\r\n      }\r\n\r\n      // Deep equality check (simplified - could use lodash.isEqual in production)\r\n      if (JSON.stringify(actual[key]) !== JSON.stringify(predictedValue)) {\r\n        return false; // Value doesn't match\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove hints older than maxHintAge\r\n   */\r\n  private cleanupStaleHints(): void {\r\n    const now = Date.now();\r\n    const staleKeys: string[] = [];\r\n\r\n    for (const [key, hint] of this.hints.entries()) {\r\n      if (now - hint.queuedAt > this.maxHintAge) {\r\n        staleKeys.push(key);\r\n      }\r\n    }\r\n\r\n    if (staleKeys.length > 0) {\r\n      this.log(`Removing ${staleKeys.length} stale hint(s)`, staleKeys);\r\n      for (const key of staleKeys) {\r\n        this.hints.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToRemove = Array.from(this.hints.keys())\r\n      .filter(key => key.startsWith(`${componentId}:`));\r\n\r\n    for (const key of keysToRemove) {\r\n      this.hints.delete(key);\r\n    }\r\n\r\n    if (keysToRemove.length > 0) {\r\n      this.log(`Cleared ${keysToRemove.length} hint(s) for component ${componentId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints\r\n   */\r\n  clearAll(): void {\r\n    this.hints.clear();\r\n    this.log('Cleared all hints');\r\n  }\r\n\r\n  /**\r\n   * Get stats about queued hints\r\n   */\r\n  getStats() {\r\n    const allHints = Array.from(this.hints.values());\r\n    const templateHints = allHints.filter(h => h.isTemplate);\r\n    const concreteHints = allHints.filter(h => !h.isTemplate);\r\n\r\n    return {\r\n      totalHints: this.hints.size,\r\n      templateHints: templateHints.length,\r\n      concreteHints: concreteHints.length,\r\n      templatePercentage: this.hints.size > 0\r\n        ? Math.round((templateHints.length / this.hints.size) * 100)\r\n        : 0,\r\n      hintsByComponent: allHints.reduce((acc, hint) => {\r\n        acc[hint.componentId] = (acc[hint.componentId] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>)\r\n    };\r\n  }\r\n\r\n  private log(message: string, ...args: any[]): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact HintQueue] ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Bridge for communicating prediction events to playground parent window\r\n * Emits postMessage events that the React playground can listen to\r\n */\r\nexport class PlaygroundBridge {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Notify that a prediction was received from server\r\n   */\r\n  predictionReceived(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patchCount: number;\r\n    confidence: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:prediction-received',\r\n      data\r\n    });\r\n\r\n    this.log('Prediction received', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache hit occurred (instant patch application)\r\n   */\r\n  cacheHit(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    latency: number;\r\n    confidence: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-hit',\r\n      data: {\r\n        ...data,\r\n        cacheHit: true,\r\n        elapsedMs: data.latency\r\n      }\r\n    });\r\n\r\n    this.log('🟢 CACHE HIT', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache miss occurred (had to compute on server)\r\n   */\r\n  cacheMiss(data: {\r\n    componentId: string;\r\n    methodName: string;\r\n    latency: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-miss',\r\n      data: {\r\n        ...data,\r\n        cacheHit: false,\r\n        elapsedMs: data.latency,\r\n        predictionConfidence: 0\r\n      }\r\n    });\r\n\r\n    this.log('🔴 CACHE MISS', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a correction was applied (prediction was wrong)\r\n   */\r\n  correctionApplied(data: {\r\n    componentId: string;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:correction',\r\n      data\r\n    });\r\n\r\n    this.log('Correction applied (prediction was incorrect)', data);\r\n  }\r\n\r\n  /**\r\n   * Post message to parent window (for iframe communication)\r\n   */\r\n  private postMessage(message: any): void {\r\n    // Check if we're in an iframe\r\n    if (window.parent && window.parent !== window) {\r\n      window.parent.postMessage(message, '*');\r\n    }\r\n\r\n    // Also dispatch as custom event for same-window listeners\r\n    window.dispatchEvent(new CustomEvent(message.type, { detail: message.data }));\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PlaygroundBridge] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Client-Computed State Manager\r\n *\r\n * Manages variables that are computed on the client using external libraries\r\n * (lodash, moment, etc.) and syncs them to the server for SSR.\r\n *\r\n * This enables Option 1 auto-detection: developers use external libraries\r\n * naturally, and the system automatically handles client-server sync.\r\n */\r\n\r\n/**\r\n * A function that computes a value based on component state\r\n */\r\nexport type ComputeFunction = () => any;\r\n\r\n/**\r\n * Registry entry for a single client-computed variable\r\n */\r\ninterface ClientComputedVariable {\r\n  varName: string;\r\n  computeFn: ComputeFunction;\r\n  lastValue?: any;\r\n  dependencies?: string[]; // State keys this variable depends on\r\n}\r\n\r\n/**\r\n * Registry of client-computed variables per component\r\n */\r\ninterface ClientComputedRegistry {\r\n  [componentId: string]: {\r\n    [varName: string]: ClientComputedVariable;\r\n  };\r\n}\r\n\r\nconst computedRegistry: ClientComputedRegistry = {};\r\n\r\n/**\r\n * Debug logging\r\n */\r\nlet debugLogging = false;\r\n\r\nexport function setDebugLogging(enabled: boolean): void {\r\n  debugLogging = enabled;\r\n}\r\n\r\nfunction log(message: string, data?: any): void {\r\n  if (debugLogging) {\r\n    console.log(`[ClientComputed] ${message}`, data || '');\r\n  }\r\n}\r\n\r\n/**\r\n * Register a client-computed variable for a component\r\n *\r\n * @param componentId - Unique identifier for the component\r\n * @param varName - Name of the variable being computed\r\n * @param computeFn - Function that computes the value\r\n * @param dependencies - Optional list of state keys this variable depends on\r\n */\r\nexport function registerClientComputed(\r\n  componentId: string,\r\n  varName: string,\r\n  computeFn: ComputeFunction,\r\n  dependencies?: string[]\r\n): void {\r\n  if (!computedRegistry[componentId]) {\r\n    computedRegistry[componentId] = {};\r\n  }\r\n\r\n  computedRegistry[componentId][varName] = {\r\n    varName,\r\n    computeFn,\r\n    dependencies\r\n  };\r\n\r\n  log(`Registered client-computed variable`, { componentId, varName, dependencies });\r\n}\r\n\r\n/**\r\n * Compute a single variable's value\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The computed value or undefined if not found\r\n */\r\nexport function computeVariable(componentId: string, varName: string): any {\r\n  const computed = computedRegistry[componentId]?.[varName];\r\n\r\n  if (!computed) {\r\n    console.warn(`[ClientComputed] Variable '${varName}' not registered for component '${componentId}'`);\r\n    return undefined;\r\n  }\r\n\r\n  try {\r\n    const value = computed.computeFn();\r\n    computed.lastValue = value;\r\n    log(`Computed variable`, { componentId, varName, value });\r\n    return value;\r\n  } catch (error) {\r\n    console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute all client-computed variables for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all computed values\r\n */\r\nexport function computeAllForComponent(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    log(`No computed variables for component`, { componentId });\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    try {\r\n      const value = variable.computeFn();\r\n      variable.lastValue = value;\r\n      result[varName] = value;\r\n    } catch (error) {\r\n      console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n      result[varName] = undefined;\r\n    }\r\n  }\r\n\r\n  log(`Computed all variables`, { componentId, result });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute only variables that depend on a specific state key\r\n *\r\n * @param componentId - Component identifier\r\n * @param changedStateKey - State key that changed\r\n * @returns Object with affected computed values\r\n */\r\nexport function computeDependentVariables(\r\n  componentId: string,\r\n  changedStateKey: string\r\n): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    // If no dependencies specified, assume it depends on everything\r\n    const shouldRecompute = !variable.dependencies ||\r\n                           variable.dependencies.includes(changedStateKey);\r\n\r\n    if (shouldRecompute) {\r\n      try {\r\n        const value = variable.computeFn();\r\n        variable.lastValue = value;\r\n        result[varName] = value;\r\n        log(`Recomputed dependent variable`, { componentId, varName, changedStateKey, value });\r\n      } catch (error) {\r\n        console.error(`[ClientComputed] Error recomputing '${varName}':`, error);\r\n        result[varName] = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Get the last computed value without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The last computed value or undefined\r\n */\r\nexport function getLastValue(componentId: string, varName: string): any {\r\n  return computedRegistry[componentId]?.[varName]?.lastValue;\r\n}\r\n\r\n/**\r\n * Get all last computed values without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all last computed values\r\n */\r\nexport function getAllLastValues(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    result[varName] = variable.lastValue;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Check if a component has any client-computed variables\r\n *\r\n * @param componentId - Component identifier\r\n * @returns True if component has computed variables\r\n */\r\nexport function hasClientComputed(componentId: string): boolean {\r\n  return !!computedRegistry[componentId] &&\r\n         Object.keys(computedRegistry[componentId]).length > 0;\r\n}\r\n\r\n/**\r\n * Get list of all computed variable names for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Array of variable names\r\n */\r\nexport function getComputedVariableNames(componentId: string): string[] {\r\n  const computed = computedRegistry[componentId];\r\n  return computed ? Object.keys(computed) : [];\r\n}\r\n\r\n/**\r\n * Clear all computed variables for a component\r\n * Used when component is unmounted\r\n *\r\n * @param componentId - Component identifier\r\n */\r\nexport function clearComponent(componentId: string): void {\r\n  delete computedRegistry[componentId];\r\n  log(`Cleared component`, { componentId });\r\n}\r\n\r\n/**\r\n * Clear all computed variables (for testing/cleanup)\r\n */\r\nexport function clearAll(): void {\r\n  Object.keys(computedRegistry).forEach(key => delete computedRegistry[key]);\r\n  log('Cleared all computed variables');\r\n}\r\n\r\n/**\r\n * Get debug info about registered computations\r\n * Useful for dev tools / debugging\r\n */\r\nexport function getDebugInfo(): {\r\n  componentCount: number;\r\n  components: Record<string, { variableCount: number; variables: string[] }>;\r\n} {\r\n  const components: Record<string, { variableCount: number; variables: string[] }> = {};\r\n\r\n  for (const [componentId, computed] of Object.entries(computedRegistry)) {\r\n    const variables = Object.keys(computed);\r\n    components[componentId] = {\r\n      variableCount: variables.length,\r\n      variables\r\n    };\r\n  }\r\n\r\n  return {\r\n    componentCount: Object.keys(computedRegistry).length,\r\n    components\r\n  };\r\n}\r\n","/**\r\n * Template State Manager - Client-Side Template Rendering\r\n *\r\n * Manages \"virtual state\" for text nodes using parameterized templates.\r\n * This enables instant hot reload with 100% coverage and minimal memory.\r\n *\r\n * Architecture:\r\n * - Templates loaded from .templates.json at component init\r\n * - State changes trigger template re-rendering\r\n * - Hot reload updates templates without server round-trip\r\n *\r\n * Memory: ~2KB per component (vs 100KB with prediction-based approach)\r\n * Coverage: 100% (works with any value)\r\n * Latency: <5ms for template updates\r\n */\r\n\r\nexport interface Template {\r\n  /** Template string with {0}, {1}, etc. placeholders */\r\n  template: string;\r\n  /** State bindings that fill the template slots */\r\n  bindings: string[];\r\n  /** Character positions where params are inserted */\r\n  slots: number[];\r\n  /** DOM path to the text node */\r\n  path: number[];\r\n  /** Template type: static | dynamic | attribute */\r\n  type: 'static' | 'dynamic' | 'attribute';\r\n  /** Attribute name (only for attribute templates) */\r\n  attribute?: string;\r\n}\r\n\r\nexport interface TemplateMap {\r\n  component: string;\r\n  version: string;\r\n  generatedAt: number;\r\n  templates: Record<string, Template>;\r\n}\r\n\r\nexport interface TemplatePatch {\r\n  type: 'UpdateTextTemplate' | 'UpdatePropTemplate';\r\n  componentId: string;\r\n  path: number[];\r\n  template: string;\r\n  params: any[];\r\n  bindings: string[];\r\n  slots: number[];\r\n  attribute?: string;\r\n}\r\n\r\n/**\r\n * Template State Manager\r\n */\r\nexport class TemplateStateManager {\r\n  private templates: Map<string, Template> = new Map();\r\n  private componentStates: Map<string, Map<string, any>> = new Map();\r\n\r\n  /**\r\n   * Initialize templates from .templates.json file\r\n   */\r\n  loadTemplateMap(componentId: string, templateMap: TemplateMap): void {\r\n    console.log(`[TemplateState] Loading ${Object.keys(templateMap.templates).length} templates for ${componentId}`);\r\n\r\n    for (const [nodePath, template] of Object.entries(templateMap.templates)) {\r\n      const key = `${componentId}:${nodePath}`;\r\n      this.templates.set(key, template);\r\n    }\r\n\r\n    // Initialize component state tracking\r\n    if (!this.componentStates.has(componentId)) {\r\n      this.componentStates.set(componentId, new Map());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a template for a specific node path\r\n   */\r\n  registerTemplate(\r\n    componentId: string,\r\n    nodePath: string,\r\n    template: Template\r\n  ): void {\r\n    const key = `${componentId}:${nodePath}`;\r\n    this.templates.set(key, template);\r\n  }\r\n\r\n  /**\r\n   * Get template by component ID and node path\r\n   */\r\n  getTemplate(componentId: string, nodePath: string): Template | undefined {\r\n    const key = `${componentId}:${nodePath}`;\r\n    return this.templates.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all templates for a component\r\n   */\r\n  getComponentTemplates(componentId: string): Map<string, Template> {\r\n    const result = new Map<string, Template>();\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        const nodePath = key.substring(componentId.length + 1);\r\n        result.set(nodePath, template);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get templates bound to a specific state variable\r\n   */\r\n  getTemplatesBoundTo(componentId: string, stateKey: string): Template[] {\r\n    const templates: Template[] = [];\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`) && template.bindings.includes(stateKey)) {\r\n        templates.push(template);\r\n      }\r\n    }\r\n\r\n    return templates;\r\n  }\r\n\r\n  /**\r\n   * Update component state (from useState)\r\n   */\r\n  updateState(componentId: string, stateKey: string, value: any): void {\r\n    let state = this.componentStates.get(componentId);\r\n    if (!state) {\r\n      state = new Map();\r\n      this.componentStates.set(componentId, state);\r\n    }\r\n    state.set(stateKey, value);\r\n  }\r\n\r\n  /**\r\n   * Get component state value\r\n   */\r\n  getStateValue(componentId: string, stateKey: string): any {\r\n    return this.componentStates.get(componentId)?.get(stateKey);\r\n  }\r\n\r\n  /**\r\n   * Render template with current state values\r\n   */\r\n  render(componentId: string, nodePath: string): string | null {\r\n    const template = this.getTemplate(componentId, nodePath);\r\n    if (!template) return null;\r\n\r\n    // Get state values for bindings\r\n    const params = template.bindings.map(binding =>\r\n      this.getStateValue(componentId, binding)\r\n    );\r\n\r\n    return this.renderWithParams(template.template, params);\r\n  }\r\n\r\n  /**\r\n   * Render template with specific parameter values\r\n   */\r\n  renderWithParams(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace {0}, {1}, etc. with parameter values\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = param !== undefined && param !== null ? String(param) : '';\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Apply template patch from hot reload\r\n   */\r\n  applyTemplatePatch(patch: TemplatePatch): { text: string; path: number[] } | null {\r\n    const { componentId, path, template, params, bindings, slots, attribute } = patch;\r\n\r\n    // Render template with params\r\n    const text = this.renderWithParams(template, params);\r\n\r\n    // Build node path key\r\n    const nodePath = this.buildNodePathKey(path);\r\n    const key = `${componentId}:${nodePath}`;\r\n\r\n    // Update stored template\r\n    const existingTemplate = this.templates.get(key);\r\n    if (existingTemplate) {\r\n      existingTemplate.template = template;\r\n      existingTemplate.bindings = bindings;\r\n      existingTemplate.slots = slots;\r\n      if (attribute) {\r\n        existingTemplate.attribute = attribute;\r\n      }\r\n    } else {\r\n      // Register new template\r\n      this.templates.set(key, {\r\n        template,\r\n        bindings,\r\n        slots,\r\n        path,\r\n        type: attribute ? 'attribute' : 'dynamic',\r\n        attribute\r\n      });\r\n    }\r\n\r\n    console.log(`[TemplateState] Applied template patch: \"${template}\" → \"${text}\"`);\r\n\r\n    return { text, path };\r\n  }\r\n\r\n  /**\r\n   * Build node path key from path array\r\n   * Example: [0, 1, 0] → \"0_1_0\"\r\n   */\r\n  private buildNodePathKey(path: number[]): string {\r\n    return path.join('_');\r\n  }\r\n\r\n  /**\r\n   * Clear all templates for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToDelete: string[] = [];\r\n\r\n    for (const key of this.templates.keys()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    for (const key of keysToDelete) {\r\n      this.templates.delete(key);\r\n    }\r\n\r\n    this.componentStates.delete(componentId);\r\n  }\r\n\r\n  /**\r\n   * Clear all templates\r\n   */\r\n  clear(): void {\r\n    this.templates.clear();\r\n    this.componentStates.clear();\r\n  }\r\n\r\n  /**\r\n   * Get statistics\r\n   */\r\n  getStats() {\r\n    const componentCount = this.componentStates.size;\r\n    const templateCount = this.templates.size;\r\n\r\n    // Estimate memory usage (rough estimate)\r\n    let memoryBytes = 0;\r\n    for (const template of this.templates.values()) {\r\n      memoryBytes += template.template.length * 2; // UTF-16\r\n      memoryBytes += template.bindings.length * 20; // Rough estimate\r\n      memoryBytes += template.slots.length * 4; // 4 bytes per number\r\n      memoryBytes += template.path.length * 4;\r\n    }\r\n\r\n    return {\r\n      componentCount,\r\n      templateCount,\r\n      memoryKB: Math.round(memoryBytes / 1024),\r\n      avgTemplatesPerComponent: templateCount / Math.max(componentCount, 1)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Global template state manager instance\r\n */\r\nexport const templateState = new TemplateStateManager();\r\n","/**\r\n * Server Task - Client-side representation of a long-running server task\r\n *\r\n * Provides reactive state management for async operations that execute on the server.\r\n * Automatically syncs state changes from server and triggers component re-renders.\r\n */\r\n\r\nexport type ServerTaskStatus = 'idle' | 'running' | 'complete' | 'error' | 'cancelled';\r\n\r\n/**\r\n * Options for configuring a server task\r\n */\r\nexport interface ServerTaskOptions {\r\n  /** Enable streaming mode (for async generators) */\r\n  stream?: boolean;\r\n  /** Estimated number of chunks (for progress calculation in streaming mode) */\r\n  estimatedChunks?: number;\r\n  /** Callback invoked for each chunk in streaming mode */\r\n  onChunk?: (chunk: any, index: number) => void;\r\n  /** Maximum number of chunks to keep in memory (for memory management) */\r\n  maxChunksInMemory?: number;\r\n}\r\n\r\n/**\r\n * Server task interface - Represents a long-running operation on the server\r\n */\r\nexport interface ServerTask<T> {\r\n  // Status\r\n  status: ServerTaskStatus;\r\n  progress: number; // 0.0 to 1.0\r\n\r\n  // Result\r\n  result?: T;\r\n  error?: Error;\r\n\r\n  // Streaming-specific\r\n  streaming: boolean;\r\n  partial?: T; // Latest partial result (accumulated)\r\n  chunks: T[]; // All chunks received so far\r\n  chunkCount: number; // Number of chunks received\r\n\r\n  // Control methods\r\n  start(...args: any[]): void;\r\n  retry(...args: any[]): void;\r\n  cancel(): void;\r\n\r\n  // Promise interface (for await)\r\n  promise: Promise<T>;\r\n\r\n  // Metadata\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number; // milliseconds\r\n\r\n  // Computed properties\r\n  readonly idle: boolean;\r\n  readonly running: boolean;\r\n  readonly complete: boolean;\r\n  readonly failed: boolean;\r\n  readonly cancelled: boolean;\r\n}\r\n\r\n/**\r\n * Server task implementation\r\n */\r\nexport class ServerTaskImpl<T> implements ServerTask<T> {\r\n  status: ServerTaskStatus = 'idle';\r\n  progress: number = 0;\r\n  result?: T;\r\n  error?: Error;\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number;\r\n\r\n  // Streaming props\r\n  streaming: boolean;\r\n  partial?: T;\r\n  chunks: T[] = [];\r\n  chunkCount: number = 0;\r\n\r\n  private _promise?: Promise<T>;\r\n  private _resolve?: (value: T) => void;\r\n  private _reject?: (error: Error) => void;\r\n  private _options: ServerTaskOptions;\r\n\r\n  constructor(\r\n    private taskId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    options: ServerTaskOptions = {}\r\n  ) {\r\n    this._options = options;\r\n    this.streaming = options.stream || false;\r\n    this._createPromise();\r\n  }\r\n\r\n  private _createPromise(): void {\r\n    this._promise = new Promise<T>((resolve, reject) => {\r\n      this._resolve = resolve;\r\n      this._reject = reject;\r\n    });\r\n  }\r\n\r\n  get promise(): Promise<T> {\r\n    return this._promise!;\r\n  }\r\n\r\n  get idle(): boolean {\r\n    return this.status === 'idle';\r\n  }\r\n\r\n  get running(): boolean {\r\n    return this.status === 'running';\r\n  }\r\n\r\n  get complete(): boolean {\r\n    return this.status === 'complete';\r\n  }\r\n\r\n  get failed(): boolean {\r\n    return this.status === 'error';\r\n  }\r\n\r\n  get cancelled(): boolean {\r\n    return this.status === 'cancelled';\r\n  }\r\n\r\n  /**\r\n   * Start the server task with optional arguments\r\n   */\r\n  start(...args: any[]): void {\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    // Clear previous results\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    // Trigger re-render to show \"running\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server task via SignalR\r\n    this.signalR.invoke('StartServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to start task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retry a failed or cancelled task\r\n   */\r\n  retry(...args: any[]): void {\r\n    if (this.status !== 'error' && this.status !== 'cancelled') {\r\n      console.warn('[Minimact] Can only retry failed or cancelled tasks');\r\n      return;\r\n    }\r\n\r\n    // Reset promise for new attempt\r\n    this._createPromise();\r\n\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    this._triggerRerender();\r\n\r\n    this.signalR.invoke('RetryServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to retry task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Cancel a running task\r\n   */\r\n  cancel(): void {\r\n    if (this.status !== 'running') {\r\n      console.warn('[Minimact] Can only cancel running tasks');\r\n      return;\r\n    }\r\n\r\n    this.signalR.invoke('CancelServerTask', this.componentId, this.taskId)\r\n      .then(() => {\r\n        this.status = 'cancelled';\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(new Error('Task cancelled by user'));\r\n        this._triggerRerender();\r\n      })\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to cancel task ${this.taskId}:`, err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update task state from server\r\n   * Called by Minimact when server sends task state updates via SignalR\r\n   */\r\n  _updateFromServer(state: any): void {\r\n    const previousStatus = this.status;\r\n\r\n    this.status = state.status;\r\n    this.progress = state.progress || 0;\r\n    this.result = state.result;\r\n\r\n    if (state.error) {\r\n      this.error = new Error(state.error);\r\n    }\r\n\r\n    if (state.startedAt) {\r\n      this.startedAt = new Date(state.startedAt);\r\n    }\r\n\r\n    if (state.completedAt) {\r\n      this.completedAt = new Date(state.completedAt);\r\n    }\r\n\r\n    if (state.duration) {\r\n      this.duration = state.duration;\r\n    }\r\n\r\n    // Resolve/reject promise based on status change\r\n    if (this.status === 'complete' && previousStatus !== 'complete') {\r\n      if (this._resolve) {\r\n        this._resolve(this.result!);\r\n      }\r\n    } else if (this.status === 'error' && previousStatus !== 'error') {\r\n      if (this._reject) {\r\n        this._reject(this.error!);\r\n      }\r\n    } else if (this.status === 'cancelled' && previousStatus !== 'cancelled') {\r\n      if (this._reject) {\r\n        this._reject(new Error('Task cancelled'));\r\n      }\r\n    }\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousStatus !== this.status || this.progress !== state.progress) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.taskId]: {\r\n        status: this.status,\r\n        progress: this.progress,\r\n        chunkCount: this.chunkCount\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Task state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Task state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Server Reducer - Client-side representation of a reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n */\r\n\r\n/**\r\n * Server reducer interface - Represents a reducer executing on the server\r\n */\r\nexport interface ServerReducer<TState, TAction> {\r\n  // Current state\r\n  state: TState;\r\n\r\n  // Dispatch an action to the server\r\n  dispatch(action: TAction): void;\r\n\r\n  // Async dispatch with Promise interface (for await)\r\n  dispatchAsync(action: TAction): Promise<TState>;\r\n\r\n  // Status flags\r\n  readonly dispatching: boolean;\r\n  readonly error?: Error;\r\n\r\n  // Metadata\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n}\r\n\r\n/**\r\n * Server reducer implementation\r\n */\r\nexport class ServerReducerImpl<TState, TAction> implements ServerReducer<TState, TAction> {\r\n  state: TState;\r\n  dispatching: boolean = false;\r\n  error?: Error;\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n\r\n  private _pendingPromise?: Promise<TState>;\r\n  private _pendingResolve?: (value: TState) => void;\r\n  private _pendingReject?: (error: Error) => void;\r\n\r\n  constructor(\r\n    private reducerId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    initialState: TState\r\n  ) {\r\n    this.state = initialState;\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server (fire-and-forget)\r\n   */\r\n  dispatch(action: TAction): void {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging (if action has a 'type' field)\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server and wait for the result\r\n   */\r\n  dispatchAsync(action: TAction): Promise<TState> {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Create promise for this dispatch\r\n    this._pendingPromise = new Promise<TState>((resolve, reject) => {\r\n      this._pendingResolve = resolve;\r\n      this._pendingReject = reject;\r\n    });\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._pendingReject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n\r\n    return this._pendingPromise;\r\n  }\r\n\r\n  /**\r\n   * Update reducer state from server\r\n   * Called by Minimact when server sends reducer state updates via SignalR\r\n   */\r\n  _updateFromServer(newState: TState, error?: string): void {\r\n    const previousState = this.state;\r\n\r\n    this.state = newState;\r\n    this.dispatching = false;\r\n\r\n    if (error) {\r\n      this.error = new Error(error);\r\n      this._pendingReject?.(this.error);\r\n    } else {\r\n      this.error = undefined;\r\n      this._pendingResolve?.(newState);\r\n    }\r\n\r\n    // Clear pending promise handlers\r\n    this._pendingPromise = undefined;\r\n    this._pendingResolve = undefined;\r\n    this._pendingReject = undefined;\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousState !== newState) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.reducerId]: {\r\n        state: this.state,\r\n        dispatching: this.dispatching,\r\n        error: this.error?.message\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Reducer state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Reducer state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * useComputed Hook\r\n *\r\n * Compute values on the client using browser-only APIs or external libraries,\r\n * then sync to the server for rendering.\r\n *\r\n * This replaces the conceptually flawed \"useClientState\" with a sound approach:\r\n * - Client computes values using browser APIs (lodash, moment, geolocation, crypto)\r\n * - Results are synced to server via UpdateClientComputedState\r\n * - Server accesses values via GetClientState<T>(key) for rendering\r\n * - Server still does ALL rendering (dehydrationist architecture)\r\n */\r\n\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface UseComputedOptions<T = any> {\r\n  /** Enable memoization (default: true) */\r\n  memoize?: boolean;\r\n  /** Cache expiry in milliseconds (e.g., 5000 = 5 seconds) */\r\n  expiry?: number;\r\n  /** Debounce sync to server (milliseconds) */\r\n  debounce?: number;\r\n  /** Throttle sync to server (milliseconds) */\r\n  throttle?: number;\r\n  /** Initial value before first computation */\r\n  initialValue?: T;\r\n}\r\n\r\ninterface ComputedCache<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  deps: any[];\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\nlet computedIndex = 0;\r\n\r\n/**\r\n * Set the current component context for useComputed\r\n * Called by setComponentContext in hooks.ts\r\n */\r\nexport function setComputedContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * Clear the current component context\r\n */\r\nexport function clearComputedContext(): void {\r\n  currentContext = null;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * useComputed Hook\r\n *\r\n * @param key - Unique identifier for server-side access via GetClientState<T>(key)\r\n * @param computeFn - Function that computes the value (runs on client)\r\n * @param deps - Dependency array (like useEffect)\r\n * @param options - Configuration options\r\n * @returns The computed value\r\n *\r\n * @example\r\n * // With lodash\r\n * const sortedUsers = useComputed('sortedUsers', () => {\r\n *   return _.sortBy(users, 'name');\r\n * }, [users]);\r\n *\r\n * @example\r\n * // With geolocation\r\n * const location = useComputed('location', async () => {\r\n *   const pos = await new Promise((resolve) => {\r\n *     navigator.geolocation.getCurrentPosition(resolve);\r\n *   });\r\n *   return { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n * }, []);\r\n *\r\n * @example\r\n * // With memoization and expiry\r\n * const result = useComputed('result', () => compute(data), [data], {\r\n *   memoize: true,\r\n *   expiry: 5000  // Cache for 5 seconds\r\n * });\r\n */\r\nexport function useComputed<T>(\r\n  key: string,\r\n  computeFn: () => T,\r\n  deps: any[] = [],\r\n  options: UseComputedOptions<T> = {}\r\n): T {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useComputed must be called within a component render');\r\n  }\r\n\r\n  const {\r\n    memoize = true,  // Default to true for performance\r\n    expiry,\r\n    debounce,\r\n    throttle,\r\n    initialValue\r\n  } = options;\r\n\r\n  const context = currentContext;\r\n  const index = computedIndex++;\r\n  const computedKey = `computed_${index}_${key}`;\r\n\r\n  // Store computed value in state\r\n  const [value, setValue] = useState<T>(\r\n    initialValue !== undefined ? initialValue : null as T\r\n  );\r\n\r\n  // Cache for memoization\r\n  const cache = useRef<ComputedCache<T> | null>(null);\r\n\r\n  // Debounce timer ref\r\n  const debounceTimer = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if we should use cached value\r\n    if (memoize && cache.current) {\r\n      // Check if deps changed\r\n      const depsChanged = deps.length !== cache.current.deps.length ||\r\n        deps.some((dep, i) => !Object.is(dep, cache.current!.deps[i]));\r\n\r\n      if (!depsChanged) {\r\n        // Deps haven't changed\r\n        if (expiry) {\r\n          // Check if cache expired\r\n          const age = Date.now() - cache.current.timestamp;\r\n          if (age < expiry) {\r\n            // Cache is still valid, use cached value\r\n            return;\r\n          }\r\n          // Cache expired, continue to recompute\r\n        } else {\r\n          // No expiry, use cached value indefinitely\r\n          return;\r\n        }\r\n      }\r\n      // Deps changed, continue to recompute\r\n    }\r\n\r\n    // Compute new value\r\n    let computed: T;\r\n    try {\r\n      computed = computeFn();\r\n    } catch (error) {\r\n      console.error(`[Minimact] Error in useComputed('${key}'):`, error);\r\n      throw error;\r\n    }\r\n\r\n    // Handle async computations\r\n    if (computed instanceof Promise) {\r\n      computed.then((resolvedValue) => {\r\n        // Update cache if memoization enabled\r\n        if (memoize) {\r\n          cache.current = {\r\n            value: resolvedValue,\r\n            timestamp: Date.now(),\r\n            deps: [...deps]\r\n          };\r\n        }\r\n\r\n        // Update local state\r\n        setValue(resolvedValue);\r\n\r\n        // Sync to server\r\n        syncToServer(resolvedValue);\r\n      }).catch((error) => {\r\n        console.error(`[Minimact] Async error in useComputed('${key}'):`, error);\r\n      });\r\n\r\n      return; // Don't sync yet, wait for promise to resolve\r\n    }\r\n\r\n    // Update cache if memoization enabled\r\n    if (memoize) {\r\n      cache.current = {\r\n        value: computed,\r\n        timestamp: Date.now(),\r\n        deps: [...deps]\r\n      };\r\n    }\r\n\r\n    // Update local state\r\n    setValue(computed);\r\n\r\n    // Sync to server\r\n    syncToServer(computed);\r\n\r\n  }, deps);\r\n\r\n  /**\r\n   * Sync computed value to server via SignalR\r\n   */\r\n  function syncToServer(computedValue: T): void {\r\n    const doSync = () => {\r\n      if (!context.signalR) {\r\n        console.warn(`[Minimact] SignalR not available, cannot sync useComputed('${key}')`);\r\n        return;\r\n      }\r\n\r\n      context.signalR.updateClientComputedState(context.componentId, { [key]: computedValue })\r\n        .catch(err => {\r\n          console.error(`[Minimact] Failed to sync computed state '${key}':`, err);\r\n        });\r\n    };\r\n\r\n    // Apply debounce if specified\r\n    if (debounce) {\r\n      if (debounceTimer.current !== null) {\r\n        clearTimeout(debounceTimer.current);\r\n      }\r\n      debounceTimer.current = window.setTimeout(() => {\r\n        doSync();\r\n        debounceTimer.current = null;\r\n      }, debounce);\r\n      return;\r\n    }\r\n\r\n    // TODO: Implement throttle\r\n    if (throttle) {\r\n      // For now, just sync immediately\r\n      // Proper throttle implementation would track last sync time\r\n      doSync();\r\n      return;\r\n    }\r\n\r\n    // No debounce/throttle, sync immediately\r\n    doSync();\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { HintQueue } from './hint-queue';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { IConnectionManager } from './connection-manager';\r\nimport { templateState } from './template-state';\r\nimport { ServerTask, ServerTaskImpl, ServerTaskOptions } from './server-task';\r\nimport { ServerReducer, ServerReducerImpl } from './server-reducer';\r\nimport { setComputedContext } from './useComputed';\r\n\r\n/**\r\n * Component instance context for hooks\r\n */\r\nexport interface ComponentContext {\r\n  componentId: string;\r\n  element: HTMLElement;\r\n  state: Map<string, any>;\r\n  effects: Array<{ callback: () => void | (() => void), deps: any[] | undefined, cleanup?: () => void }>;\r\n  refs: Map<string, { current: any }>;\r\n  serverTasks?: Map<string, ServerTaskImpl<any>>; // For useServerTask integration\r\n  serverReducers?: Map<string, ServerReducerImpl<any, any>>; // For useServerReducer integration\r\n  computedValues?: Map<string, any>; // For useComputed integration\r\n  hintQueue: HintQueue;\r\n  domPatcher: DOMPatcher;\r\n  playgroundBridge?: PlaygroundBridge;\r\n  signalR: IConnectionManager; // For syncing state to server (works with SignalR or SignalM)\r\n  // Note: domElementStates and confidenceWorker are added via module augmentation by minimact-punch\r\n}\r\n\r\n// Global context tracking\r\nlet currentContext: ComponentContext | null = null;\r\nlet stateIndex = 0;\r\nlet effectIndex = 0;\r\nlet refIndex = 0;\r\nlet serverTaskIndex = 0;\r\nlet serverReducerIndex = 0;\r\n\r\n/**\r\n * Set the current component context (called before render)\r\n */\r\nexport function setComponentContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  stateIndex = 0;\r\n  effectIndex = 0;\r\n  refIndex = 0;\r\n  serverTaskIndex = 0;\r\n  serverReducerIndex = 0;\r\n\r\n  // Reset computed index for useComputed hook\r\n  setComputedContext(context);\r\n}\r\n\r\n/**\r\n * Clear the current component context (called after render)\r\n */\r\nexport function clearComponentContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Find DOM element by path array\r\n * Example: [0, 1, 0] → first child, second child, first child\r\n */\r\nfunction findElementByPath(root: HTMLElement, path: number[]): Node | null {\r\n  let current: Node | null = root;\r\n\r\n  for (const index of path) {\r\n    if (!current || !current.childNodes) return null;\r\n    current = current.childNodes[index] || null;\r\n  }\r\n\r\n  return current;\r\n}\r\n\r\n/**\r\n * useState hook - manages component state with hint queue integration\r\n */\r\nexport function useState<T>(initialValue: T): [T, (newValue: T | ((prev: T) => T)) => void] {\r\n  if (!currentContext) {\r\n    throw new Error('useState must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = stateIndex++;\r\n  const stateKey = `state_${index}`;\r\n\r\n  // Initialize state if not exists\r\n  if (!context.state.has(stateKey)) {\r\n    context.state.set(stateKey, initialValue);\r\n  }\r\n\r\n  const currentValue = context.state.get(stateKey) as T;\r\n\r\n  const setState = (newValue: T | ((prev: T) => T)) => {\r\n    const startTime = performance.now();\r\n\r\n    const actualNewValue = typeof newValue === 'function'\r\n      ? (newValue as (prev: T) => T)(context.state.get(stateKey) as T)\r\n      : newValue;\r\n\r\n    // Build state change object for hint matching\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: actualNewValue\r\n    };\r\n\r\n    // Check hint queue for match\r\n    const hint = context.hintQueue.matchHint(context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // 🟢 CACHE HIT! Apply queued patches immediately\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🟢 CACHE HIT! Hint '${hint.hintId}' matched - applying ${hint.patches.length} patches in ${latency.toFixed(2)}ms`);\r\n\r\n      context.domPatcher.applyPatches(context.element, hint.patches);\r\n\r\n      // Notify playground of cache hit\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheHit({\r\n          componentId: context.componentId,\r\n          hintId: hint.hintId,\r\n          latency,\r\n          confidence: hint.confidence,\r\n          patchCount: hint.patches.length\r\n        });\r\n      }\r\n    } else {\r\n      // 🔴 CACHE MISS - No prediction found\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🔴 CACHE MISS - No prediction for state change:`, stateChanges);\r\n\r\n      // Notify playground of cache miss\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheMiss({\r\n          componentId: context.componentId,\r\n          methodName: `setState(${stateKey})`,\r\n          latency,\r\n          patchCount: 0\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update state\r\n    context.state.set(stateKey, actualNewValue);\r\n\r\n    // Update template state for template rendering\r\n    templateState.updateState(context.componentId, stateKey, actualNewValue);\r\n\r\n    // Re-render templates bound to this state\r\n    const boundTemplates = templateState.getTemplatesBoundTo(context.componentId, stateKey);\r\n    for (const template of boundTemplates) {\r\n      // Build node path from template path array\r\n      const nodePath = template.path.join('_');\r\n\r\n      // Render template with new value\r\n      const newText = templateState.render(context.componentId, nodePath);\r\n\r\n      if (newText !== null) {\r\n        // Find DOM element by path and update it\r\n        const element = findElementByPath(context.element, template.path);\r\n        if (element) {\r\n          if (element.nodeType === Node.TEXT_NODE) {\r\n            element.textContent = newText;\r\n          } else if (element instanceof HTMLElement) {\r\n            // For attribute templates\r\n            if (template.attribute) {\r\n              element.setAttribute(template.attribute, newText);\r\n            } else {\r\n              element.textContent = newText;\r\n            }\r\n          }\r\n\r\n          console.log(`[Minimact] 📋 Template updated: \"${newText}\" (${stateKey} changed)`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sync state to server to prevent stale data\r\n    context.signalR.updateComponentState(context.componentId, stateKey, actualNewValue)\r\n      .catch(err => {\r\n        console.error('[Minimact] Failed to sync state to server:', err);\r\n      });\r\n  };\r\n\r\n  // If value is an array, add array helpers\r\n  if (Array.isArray(currentValue)) {\r\n    return [currentValue, createArrayStateSetter(setState, currentValue, stateKey, context)] as any;\r\n  }\r\n\r\n  return [currentValue, setState];\r\n}\r\n\r\n/**\r\n * useEffect hook - runs side effects after render\r\n */\r\nexport function useEffect(callback: () => void | (() => void), deps?: any[]): void {\r\n  if (!currentContext) {\r\n    throw new Error('useEffect must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = effectIndex++;\r\n\r\n  // Get or create effect entry\r\n  if (!context.effects[index]) {\r\n    context.effects[index] = {\r\n      callback,\r\n      deps,\r\n      cleanup: undefined\r\n    };\r\n\r\n    // Run effect after render\r\n    queueMicrotask(() => {\r\n      const cleanup = callback();\r\n      if (typeof cleanup === 'function') {\r\n        context.effects[index].cleanup = cleanup;\r\n      }\r\n    });\r\n  } else {\r\n    const effect = context.effects[index];\r\n\r\n    // Check if deps changed\r\n    const depsChanged = !deps || !effect.deps ||\r\n      deps.length !== effect.deps.length ||\r\n      deps.some((dep, i) => dep !== effect.deps![i]);\r\n\r\n    if (depsChanged) {\r\n      // Run cleanup if exists\r\n      if (effect.cleanup) {\r\n        effect.cleanup();\r\n      }\r\n\r\n      // Update effect\r\n      effect.callback = callback;\r\n      effect.deps = deps;\r\n\r\n      // Run new effect\r\n      queueMicrotask(() => {\r\n        const cleanup = callback();\r\n        if (typeof cleanup === 'function') {\r\n          effect.cleanup = cleanup;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * useRef hook - creates a mutable ref object\r\n */\r\nexport function useRef<T>(initialValue: T): { current: T } {\r\n  if (!currentContext) {\r\n    throw new Error('useRef must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = refIndex++;\r\n  const refKey = `ref_${index}`;\r\n\r\n  // Initialize ref if not exists\r\n  if (!context.refs.has(refKey)) {\r\n    context.refs.set(refKey, { current: initialValue });\r\n  }\r\n\r\n  return context.refs.get(refKey)!;\r\n}\r\n\r\n/**\r\n * Cleanup all effects for a component\r\n */\r\nexport function cleanupEffects(context: ComponentContext): void {\r\n  for (const effect of context.effects) {\r\n    if (effect.cleanup) {\r\n      effect.cleanup();\r\n    }\r\n  }\r\n  context.effects = [];\r\n}\r\n\r\n/**\r\n * Array operation metadata for semantic state updates\r\n * @public\r\n */\r\nexport interface ArrayOperation {\r\n  type: 'Append' | 'Prepend' | 'InsertAt' | 'RemoveAt' | 'UpdateAt';\r\n  index?: number;\r\n  item?: any;\r\n}\r\n\r\n/**\r\n * Enhanced state setter with array helper methods\r\n */\r\nexport interface ArrayStateSetter<T> {\r\n  // Standard setter (for compatibility)\r\n  (newValue: T[] | ((prev: T[]) => T[])): void;\r\n\r\n  // Array operation helpers\r\n  append(item: T): void;\r\n  prepend(item: T): void;\r\n  insertAt(index: number, item: T): void;\r\n  removeAt(index: number): void;\r\n  updateAt(index: number, updates: Partial<T> | ((prev: T) => T)): void;\r\n  clear(): void;\r\n\r\n  // Batch operations\r\n  appendMany(items: T[]): void;\r\n  removeMany(indices: number[]): void;\r\n\r\n  // Conditional operations\r\n  removeWhere(predicate: (item: T) => boolean): void;\r\n  updateWhere(predicate: (item: T) => boolean, updates: Partial<T>): void;\r\n}\r\n\r\n/**\r\n * Create array state setter with semantic helper methods\r\n */\r\nfunction createArrayStateSetter<T>(\r\n  baseSetState: (value: T[]) => void,\r\n  currentArray: T[],\r\n  stateKey: string,\r\n  context: ComponentContext\r\n): ArrayStateSetter<T> {\r\n  // Base setter function\r\n  const setter: any = baseSetState;\r\n\r\n  // Append helper\r\n  setter.append = (item: T) => {\r\n    const newArray = [...currentArray, item];\r\n\r\n    // Update local state\r\n    context.state.set(stateKey, newArray);\r\n\r\n    // Update template state\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    // Notify server of APPEND operation (not just new array)\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Append', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array append to server:', err);\r\n    });\r\n\r\n    // TODO: Try to predict patch using loop template\r\n    console.log(`[Minimact] 🔵 Array append: ${stateKey}`, item);\r\n  };\r\n\r\n  // Prepend helper\r\n  setter.prepend = (item: T) => {\r\n    const newArray = [item, ...currentArray];\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Prepend', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array prepend to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array prepend: ${stateKey}`, item);\r\n  };\r\n\r\n  // InsertAt helper\r\n  setter.insertAt = (index: number, item: T) => {\r\n    const newArray = [...currentArray];\r\n    newArray.splice(index, 0, item);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'InsertAt', index, item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array insert to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array insertAt(${index}): ${stateKey}`, item);\r\n  };\r\n\r\n  // RemoveAt helper\r\n  setter.removeAt = (index: number) => {\r\n    const newArray = currentArray.filter((_, i) => i !== index);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'RemoveAt', index }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array remove to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array removeAt(${index}): ${stateKey}`);\r\n  };\r\n\r\n  // UpdateAt helper\r\n  setter.updateAt = (index: number, updates: Partial<T> | ((prev: T) => T)) => {\r\n    const newArray = [...currentArray];\r\n    newArray[index] = typeof updates === 'function'\r\n      ? (updates as (prev: T) => T)(currentArray[index])\r\n      : { ...currentArray[index] as any, ...updates };\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'UpdateAt', index, item: newArray[index] }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array update to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array updateAt(${index}): ${stateKey}`, newArray[index]);\r\n  };\r\n\r\n  // Clear helper\r\n  setter.clear = () => {\r\n    baseSetState([]);\r\n  };\r\n\r\n  // RemoveWhere helper\r\n  setter.removeWhere = (predicate: (item: T) => boolean) => {\r\n    const newArray = currentArray.filter(item => !predicate(item));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // UpdateWhere helper\r\n  setter.updateWhere = (predicate: (item: T) => boolean, updates: Partial<T>) => {\r\n    const newArray = currentArray.map(item =>\r\n      predicate(item) ? { ...item as any, ...updates } : item\r\n    );\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // AppendMany helper\r\n  setter.appendMany = (items: T[]) => {\r\n    const newArray = [...currentArray, ...items];\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // RemoveMany helper\r\n  setter.removeMany = (indices: number[]) => {\r\n    const newArray = currentArray.filter((_, i) => !indices.includes(i));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  return setter as ArrayStateSetter<T>;\r\n}\r\n\r\n/**\r\n * useServerTask - Execute long-running operations on the server with reactive client state\r\n *\r\n * @param taskFactory - Optional async function (will be transpiled to C# by Babel plugin)\r\n * @param options - Configuration options for the server task\r\n * @returns ServerTask interface with status, result, and control methods\r\n *\r\n * @example\r\n * const analysis = useServerTask(async () => {\r\n *   // This code runs on the SERVER (transpiled to C#)\r\n *   const data = await fetchData();\r\n *   return processData(data);\r\n * });\r\n *\r\n * // In JSX:\r\n * <button onClick={analysis.start}>Start</button>\r\n * {analysis.running && <Spinner />}\r\n * {analysis.complete && <div>{analysis.result}</div>}\r\n */\r\nexport function useServerTask<T>(\r\n  taskFactory?: () => Promise<T>,\r\n  options: ServerTaskOptions = {}\r\n): ServerTask<T> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerTask must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverTaskIndex++;\r\n  const taskKey = `serverTask_${index}`;\r\n\r\n  // Initialize serverTasks map if not exists\r\n  if (!context.serverTasks) {\r\n    context.serverTasks = new Map();\r\n  }\r\n\r\n  // Get or create server task instance\r\n  if (!context.serverTasks.has(taskKey)) {\r\n    const task = new ServerTaskImpl<T>(\r\n      taskKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      options\r\n    );\r\n\r\n    context.serverTasks.set(taskKey, task);\r\n  }\r\n\r\n  return context.serverTasks.get(taskKey)!;\r\n}\r\n\r\n/**\r\n * useServerReducer - React-like reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n *\r\n * @example\r\n * ```tsx\r\n * type CounterState = { count: number };\r\n * type CounterAction = { type: 'increment' } | { type: 'decrement' } | { type: 'set', value: number };\r\n *\r\n * const counter = useServerReducer<CounterState, CounterAction>({ count: 0 });\r\n *\r\n * // In JSX:\r\n * <button onClick={() => counter.dispatch({ type: 'increment' })}>+</button>\r\n * <span>{counter.state.count}</span>\r\n * <button onClick={() => counter.dispatch({ type: 'decrement' })}>-</button>\r\n * {counter.dispatching && <Spinner />}\r\n * {counter.error && <div>Error: {counter.error.message}</div>}\r\n * ```\r\n *\r\n * @example\r\n * ```tsx\r\n * // With async dispatch (await the result)\r\n * const handleReset = async () => {\r\n *   const newState = await counter.dispatchAsync({ type: 'set', value: 0 });\r\n *   console.log('Counter reset to:', newState.count);\r\n * };\r\n * ```\r\n */\r\nexport function useServerReducer<TState, TAction>(\r\n  initialState: TState\r\n): ServerReducer<TState, TAction> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerReducer must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverReducerIndex++;\r\n  const reducerKey = `serverReducer_${index}`;\r\n\r\n  // Initialize serverReducers map if not exists\r\n  if (!context.serverReducers) {\r\n    context.serverReducers = new Map();\r\n  }\r\n\r\n  // Get or create server reducer instance\r\n  if (!context.serverReducers.has(reducerKey)) {\r\n    const reducer = new ServerReducerImpl<TState, TAction>(\r\n      reducerKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      initialState\r\n    );\r\n\r\n    context.serverReducers.set(reducerKey, reducer);\r\n  }\r\n\r\n  return context.serverReducers.get(reducerKey)!;\r\n}\r\n","/**\r\n * useContext - Server-side cache system with multiple scope types\r\n *\r\n * This reimagines React's context API as a Redis-like in-memory cache\r\n * that enables shared state across components with flexible lifetime management.\r\n */\r\n\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface ContextOptions {\r\n  scope?: 'request' | 'session' | 'application' | 'url';\r\n  urlPattern?: string;\r\n  expiry?: number;\r\n  defaultValue?: any;\r\n}\r\n\r\nexport interface Context<T> {\r\n  key: string;\r\n  options: ContextOptions;\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\n\r\n/**\r\n * Set the current component context for hook execution\r\n * Called internally by Minimact before rendering\r\n */\r\nexport function setContextHookContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n}\r\n\r\n/**\r\n * Clear the current component context after rendering\r\n * Called internally by Minimact after rendering\r\n */\r\nexport function clearContextHookContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Create a context with specified scope and options\r\n *\r\n * @example\r\n * // Session-scoped user context\r\n * const UserContext = createContext<User>('current-user', {\r\n *   scope: 'session',\r\n *   expiry: 3600000 // 1 hour\r\n * });\r\n *\r\n * @example\r\n * // URL-scoped dashboard filters\r\n * const DashboardFilters = createContext<Filters>('dashboard-filters', {\r\n *   scope: 'url',\r\n *   urlPattern: '/dashboard/*',\r\n *   expiry: 3600000\r\n * });\r\n */\r\nexport function createContext<T>(\r\n  key: string,\r\n  options: ContextOptions = {}\r\n): Context<T> {\r\n  // Validate URL pattern if scope is 'url'\r\n  if (options.scope === 'url' && !options.urlPattern) {\r\n    throw new Error(`Context '${key}' with scope 'url' requires urlPattern`);\r\n  }\r\n\r\n  return {\r\n    key,\r\n    options: {\r\n      scope: options.scope || 'request',\r\n      urlPattern: options.urlPattern,\r\n      expiry: options.expiry,\r\n      defaultValue: options.defaultValue\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Use a context - returns [value, setValue, clearValue]\r\n *\r\n * Unlike React's useContext, this doesn't require a Provider component.\r\n * The context is stored server-side in a cache with the specified scope.\r\n *\r\n * @returns Tuple of [value, setValue, clearValue]\r\n *\r\n * @example\r\n * // Read and write to context\r\n * function LoginForm() {\r\n *   const [_, setUser] = useContext(UserContext);\r\n *\r\n *   const handleLogin = async (credentials) => {\r\n *     const user = await authenticate(credentials);\r\n *     setUser(user); // Stored in session-scoped cache\r\n *   };\r\n *\r\n *   return <form onSubmit={handleLogin}>...</form>;\r\n * }\r\n *\r\n * @example\r\n * // Read from context (different component, no parent-child relationship needed)\r\n * function UserProfile() {\r\n *   const [user] = useContext(UserContext);\r\n *\r\n *   if (!user) return <Login />;\r\n *   return <div>Welcome, {user.name}</div>;\r\n * }\r\n */\r\nexport function useContext<T>(\r\n  context: Context<T>\r\n): [T | undefined, (value: T) => void, () => void] {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useContext must be called within a component render');\r\n  }\r\n\r\n  const ctx = currentContext;\r\n  const stateKey = `context_${context.key}`;\r\n\r\n  // Get current value from component state (initialized from server)\r\n  let currentValue = ctx.state.get(stateKey) as T | undefined;\r\n\r\n  // If no value and has default, use default\r\n  if (currentValue === undefined && context.options.defaultValue !== undefined) {\r\n    currentValue = context.options.defaultValue;\r\n  }\r\n\r\n  // Setter - updates local state and syncs to server\r\n  const setContextValue = (newValue: T) => {\r\n    // Update local state immediately for instant feedback\r\n    ctx.state.set(stateKey, newValue);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: newValue\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('UpdateContext', {\r\n      key: context.key,\r\n      value: newValue,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern,\r\n      expiry: context.options.expiry\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to update context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  // Clear - removes value from cache\r\n  const clearContextValue = () => {\r\n    // Clear local state\r\n    ctx.state.set(stateKey, undefined);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: undefined\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('ClearContext', {\r\n      key: context.key,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to clear context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  return [currentValue, setContextValue, clearContextValue];\r\n}\r\n","/**\r\n * Client-side pub/sub event aggregator\r\n * Enables component-to-component communication without prop drilling\r\n */\r\n\r\nexport interface PubSubMessage<T = any> {\r\n  value: T;\r\n  error?: string;\r\n  waiting?: number;\r\n  source?: string;\r\n  timestamp: number;\r\n  isStale?: boolean;\r\n}\r\n\r\ntype Subscriber<T = any> = (message: PubSubMessage<T>) => void;\r\n\r\n/**\r\n * Global event aggregator for client-side pub/sub\r\n */\r\nclass EventAggregator {\r\n  private channels: Map<string, {\r\n    subscribers: Set<Subscriber>;\r\n    lastMessage: PubSubMessage | null;\r\n  }> = new Map();\r\n\r\n  private debugLogging: boolean = false;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a channel\r\n   */\r\n  subscribe<T = any>(\r\n    channel: string,\r\n    callback?: Subscriber<T>\r\n  ): PubSubMessage<T> {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    // Add callback if provided\r\n    if (callback) {\r\n      channelData.subscribers.add(callback as Subscriber);\r\n    }\r\n\r\n    // Return reactive message object\r\n    const message: PubSubMessage<T> = channelData.lastMessage || {\r\n      value: undefined as T,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.log(`Subscribed to '${channel}'`, { hasCallback: !!callback });\r\n\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a channel\r\n   */\r\n  unsubscribe(channel: string, callback: Subscriber): void {\r\n    const channelData = this.channels.get(channel);\r\n    if (channelData) {\r\n      channelData.subscribers.delete(callback);\r\n      this.log(`Unsubscribed from '${channel}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Publish a message to a channel\r\n   */\r\n  publish<T = any>(\r\n    channel: string,\r\n    value: T,\r\n    options: {\r\n      source?: string;\r\n      error?: string;\r\n      waiting?: number;\r\n    } = {}\r\n  ): void {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    const message: PubSubMessage<T> = {\r\n      value,\r\n      error: options.error,\r\n      waiting: options.waiting,\r\n      source: options.source,\r\n      timestamp: Date.now(),\r\n      isStale: false\r\n    };\r\n\r\n    // Update last message\r\n    channelData.lastMessage = message;\r\n\r\n    // Notify all subscribers\r\n    channelData.subscribers.forEach(subscriber => {\r\n      try {\r\n        subscriber(message);\r\n      } catch (error) {\r\n        console.error(`[Minimact PubSub] Error in subscriber for '${channel}':`, error);\r\n      }\r\n    });\r\n\r\n    this.log(`Published to '${channel}'`, {\r\n      subscribers: channelData.subscribers.size,\r\n      value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear a channel\r\n   */\r\n  clear(channel: string): void {\r\n    this.channels.delete(channel);\r\n    this.log(`Cleared channel '${channel}'`);\r\n  }\r\n\r\n  /**\r\n   * Clear all channels\r\n   */\r\n  clearAll(): void {\r\n    this.channels.clear();\r\n    this.log('Cleared all channels');\r\n  }\r\n\r\n  /**\r\n   * Get stats\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalChannels: this.channels.size,\r\n      channels: Array.from(this.channels.entries()).map(([name, data]) => ({\r\n        name,\r\n        subscribers: data.subscribers.size,\r\n        hasLastMessage: !!data.lastMessage\r\n      }))\r\n    };\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PubSub] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Global singleton instance\r\nlet globalAggregator: EventAggregator | null = null;\r\n\r\nexport function getEventAggregator(options?: { debugLogging?: boolean }): EventAggregator {\r\n  if (!globalAggregator) {\r\n    globalAggregator = new EventAggregator(options);\r\n  }\r\n  return globalAggregator;\r\n}\r\n\r\n/**\r\n * Hook: usePub - Publish to a channel\r\n */\r\nexport function usePub<T = any>(channel: string): (value: T, options?: {\r\n  source?: string;\r\n  error?: string;\r\n  waiting?: number;\r\n}) => void {\r\n  const aggregator = getEventAggregator();\r\n\r\n  return (value: T, options = {}) => {\r\n    aggregator.publish(channel, value, options);\r\n  };\r\n}\r\n\r\n/**\r\n * Hook: useSub - Subscribe to a channel\r\n */\r\nexport function useSub<T = any>(\r\n  channel: string,\r\n  callback?: (message: PubSubMessage<T>) => void\r\n): PubSubMessage<T> {\r\n  const aggregator = getEventAggregator();\r\n\r\n  // Subscribe and return reactive message object\r\n  const message = aggregator.subscribe<T>(channel, callback);\r\n\r\n  // TODO: Integrate with component lifecycle for auto-unsubscribe\r\n  // For now, developers must manually unsubscribe or we rely on component unmount\r\n\r\n  return message;\r\n}\r\n","import { SignalMManager } from './signalm-manager';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { ClientStateManager } from './client-state';\r\nimport { EventDelegation } from './event-delegation';\r\nimport { HydrationManager } from './hydration';\r\nimport { HintQueue } from './hint-queue';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { HotReloadManager } from './hot-reload';\r\nimport * as ClientComputed from './client-computed';\r\nimport { MinimactOptions, Patch } from './types';\r\n\r\n/**\r\n * Main Minimact client runtime\r\n * Orchestrates SignalM (lightweight WebSocket), DOM patching, state management, and hydration\r\n *\r\n * Bundle size: ~10 KB gzipped (vs 25 KB with SignalR)\r\n */\r\nexport class Minimact {\r\n  private signalR: SignalMManager;\r\n  private domPatcher: DOMPatcher;\r\n  private clientState: ClientStateManager;\r\n  private hydration: HydrationManager;\r\n  private hintQueue: HintQueue;\r\n  private playgroundBridge: PlaygroundBridge;\r\n  private eventDelegation: EventDelegation | null = null;\r\n  private options: Required<MinimactOptions>;\r\n  private rootElement: HTMLElement;\r\n\r\n  constructor(rootElement: HTMLElement | string = document.body, options: MinimactOptions = {}) {\r\n    // Resolve root element\r\n    if (typeof rootElement === 'string') {\r\n      const element = document.querySelector(rootElement);\r\n      if (!element) {\r\n        throw new Error(`[Minimact] Root element not found: ${rootElement}`);\r\n      }\r\n      this.rootElement = element as HTMLElement;\r\n    } else {\r\n      this.rootElement = rootElement;\r\n    }\r\n\r\n    // Default options\r\n    this.options = {\r\n      hubUrl: options.hubUrl || '/minimact',\r\n      enableDebugLogging: options.enableDebugLogging || false,\r\n      reconnectInterval: options.reconnectInterval || 5000\r\n    };\r\n\r\n    // Initialize subsystems (using lightweight SignalM!)\r\n    this.signalR = new SignalMManager(this.options.hubUrl, {\r\n      reconnectInterval: this.options.reconnectInterval,\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.domPatcher = new DOMPatcher({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.clientState = new ClientStateManager({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hydration = new HydrationManager(this.clientState, {\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hintQueue = new HintQueue({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.playgroundBridge = new PlaygroundBridge({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    // Enable debug logging for client-computed module\r\n    ClientComputed.setDebugLogging(this.options.enableDebugLogging);\r\n\r\n    this.setupSignalRHandlers();\r\n    this.log('Minimact initialized', { rootElement: this.rootElement, options: this.options });\r\n  }\r\n\r\n  /**\r\n   * Start the Minimact runtime\r\n   */\r\n  async start(): Promise<void> {\r\n    // Connect to SignalR hub\r\n    await this.signalR.start();\r\n\r\n    // Hydrate all components\r\n    this.hydration.hydrateAll();\r\n\r\n    // Setup event delegation\r\n    this.eventDelegation = new EventDelegation(\r\n      this.rootElement,\r\n      (componentId, methodName, args) => this.signalR.invokeComponentMethod(componentId, methodName, args),\r\n      { debugLogging: this.options.enableDebugLogging }\r\n    );\r\n\r\n    // Register all components with server\r\n    await this.registerAllComponents();\r\n\r\n    this.log('Minimact started');\r\n  }\r\n\r\n  /**\r\n   * Stop the Minimact runtime\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (this.eventDelegation) {\r\n      this.eventDelegation.destroy();\r\n      this.eventDelegation = null;\r\n    }\r\n\r\n    await this.signalR.stop();\r\n\r\n    this.log('Minimact stopped');\r\n  }\r\n\r\n  /**\r\n   * Setup SignalR event handlers\r\n   */\r\n  private setupSignalRHandlers(): void {\r\n    // Handle full HTML updates\r\n    this.signalR.on('updateComponent', ({ componentId, html }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.replaceHTML(component.element, html);\r\n        this.log('Component HTML updated', { componentId });\r\n      }\r\n    });\r\n\r\n    // Handle patch updates\r\n    this.signalR.on('applyPatches', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Patches applied', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle predicted patches (instant UI updates!)\r\n    this.signalR.on('applyPrediction', ({ componentId, patches, confidence }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log(`Prediction applied (${(confidence * 100).toFixed(0)}% confident)`, { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle corrections if prediction was wrong\r\n    this.signalR.on('applyCorrection', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Correction applied (prediction was incorrect)', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.signalR.on('queueHint', (data) => {\r\n      this.hintQueue.queueHint(data);\r\n      this.log(`Hint '${data.hintId}' queued for component ${data.componentId}`, {\r\n        patchCount: data.patches.length,\r\n        confidence: (data.confidence * 100).toFixed(0) + '%'\r\n      });\r\n\r\n      // Notify playground that prediction was received\r\n      this.playgroundBridge.predictionReceived({\r\n        componentId: data.componentId,\r\n        hintId: data.hintId,\r\n        patchCount: data.patches.length,\r\n        confidence: data.confidence\r\n      });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.signalR.on('reconnected', async () => {\r\n      this.log('Reconnected - re-registering components');\r\n      await this.registerAllComponents();\r\n    });\r\n\r\n    // Handle server reducer state updates\r\n    this.signalR.on('UpdateServerReducerState', ({ componentId, reducerId, state, error }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component && component.context.serverReducers) {\r\n        const reducer = component.context.serverReducers.get(reducerId);\r\n        if (reducer) {\r\n          reducer._updateFromServer(state, error);\r\n          this.log('Server reducer state updated', { componentId, reducerId });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Handle errors\r\n    this.signalR.on('error', ({ message }) => {\r\n      console.error('[Minimact] Server error:', message);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register all components with the server\r\n   */\r\n  private async registerAllComponents(): Promise<void> {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    for (const element of Array.from(components)) {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        try {\r\n          await this.signalR.registerComponent(componentId);\r\n          this.log('Registered component', { componentId });\r\n        } catch (error) {\r\n          console.error('[Minimact] Failed to register component:', componentId, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually hydrate a component\r\n   */\r\n  hydrateComponent(componentId: string, element: HTMLElement): void {\r\n    this.hydration.hydrateComponent(componentId, element);\r\n  }\r\n\r\n  /**\r\n   * Get component by ID (for hot reload)\r\n   */\r\n  getComponent(componentId: string): any {\r\n    return this.hydration.getComponent(componentId);\r\n  }\r\n\r\n  /**\r\n   * Get client state for a component\r\n   */\r\n  getClientState(componentId: string, key: string): any {\r\n    return this.clientState.getState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Set client state for a component\r\n   */\r\n  setClientState(componentId: string, key: string, value: any): void {\r\n    this.clientState.setState(componentId, key, value);\r\n\r\n    // Recompute client-computed variables that depend on this state\r\n    this.recomputeAndSyncClientState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to client state changes\r\n   */\r\n  subscribeToState(componentId: string, key: string, callback: (value: any) => void): () => void {\r\n    return this.clientState.subscribe(componentId, key, callback);\r\n  }\r\n\r\n  /**\r\n   * Recompute client-computed variables after state change and sync to server\r\n   */\r\n  private async recomputeAndSyncClientState(componentId: string, changedStateKey?: string): Promise<void> {\r\n    // Check if component has any client-computed variables\r\n    if (!ClientComputed.hasClientComputed(componentId)) {\r\n      return;\r\n    }\r\n\r\n    // Compute affected variables\r\n    const computed = changedStateKey\r\n      ? ClientComputed.computeDependentVariables(componentId, changedStateKey)\r\n      : ClientComputed.computeAllForComponent(componentId);\r\n\r\n    // If there are computed values, send to server\r\n    if (Object.keys(computed).length > 0) {\r\n      try {\r\n        await this.signalR.updateClientComputedState(componentId, computed);\r\n        this.log('Client-computed state synced', { componentId, computed });\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to sync client-computed state:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection state\r\n   */\r\n  get connectionState(): string {\r\n    return this.signalR.state.toString();\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection ID\r\n   */\r\n  get connectionId(): string | null {\r\n    return this.signalR.connectionId;\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.options.enableDebugLogging) {\r\n      console.log(`[Minimact] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Export all types and classes for advanced usage\r\nexport { SignalMManager } from './signalm-manager';\r\nexport { DOMPatcher } from './dom-patcher';\r\nexport { ClientStateManager } from './client-state';\r\nexport { EventDelegation } from './event-delegation';\r\nexport { HydrationManager } from './hydration';\r\nexport { HintQueue } from './hint-queue';\r\n\r\n// Client-computed state (for external libraries)\r\nexport {\r\n  registerClientComputed,\r\n  computeVariable,\r\n  computeAllForComponent,\r\n  computeDependentVariables,\r\n  getLastValue,\r\n  getAllLastValues,\r\n  hasClientComputed,\r\n  getComputedVariableNames,\r\n  clearComponent as clearClientComputedComponent,\r\n  getDebugInfo as getClientComputedDebugInfo\r\n} from './client-computed';\r\n\r\n// Template state (for hot reload)\r\nexport { TemplateStateManager, templateState } from './template-state';\r\nexport type { Template, TemplateMap } from './template-state';\r\n\r\n// Template renderer (for runtime prediction)\r\nexport { TemplateRenderer } from './template-renderer';\r\n\r\n// Core hooks\r\nexport { useState, useEffect, useRef, useServerTask, useServerReducer, setComponentContext, clearComponentContext, ComponentContext } from './hooks';\r\n\r\n// useComputed hook (for client-side computation with browser APIs/libraries)\r\nexport { useComputed } from './useComputed';\r\nexport type { UseComputedOptions } from './useComputed';\r\n\r\n// Context hooks\r\nexport { createContext, useContext, setContextHookContext, clearContextHookContext } from './useContext';\r\nexport type { Context, ContextOptions } from './useContext';\r\n\r\n// Server task types\r\nexport type { ServerTask, ServerTaskOptions, ServerTaskStatus } from './server-task';\r\n\r\n// Server reducer types\r\nexport type { ServerReducer } from './server-reducer';\r\n\r\n// Paginated server task\r\nexport { usePaginatedServerTask } from './usePaginatedServerTask';\r\nexport type { PaginatedServerTask, PaginatedServerTaskOptions, PaginationParams } from './usePaginatedServerTask';\r\n\r\n// Pub/Sub hooks\r\nexport { usePub, useSub } from './pub-sub';\r\nexport type { PubSubMessage } from './pub-sub';\r\n\r\n// Task scheduling hooks\r\nexport { useMicroTask, useMacroTask, useAnimationFrame, useIdleCallback } from './task-scheduling';\r\n\r\n// NOTE: useSignalR hook is NOT available in the SignalM version\r\n// It requires the full SignalR client library\r\n// If you need useSignalR, use 'minimact/signalr' instead\r\n\r\n// Types\r\nexport * from './types';\r\n\r\n// Auto-initialize if data-minimact-auto-init is present\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n        const minimact = new Minimact(document.body, {\r\n          enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n        });\r\n        minimact.start().catch(console.error);\r\n        (window as any).minimact = minimact;\r\n      }\r\n    });\r\n  } else {\r\n    if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n      const minimact = new Minimact(document.body, {\r\n        enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n      });\r\n      minimact.start().catch(console.error);\r\n      (window as any).minimact = minimact;\r\n    }\r\n  }\r\n}\r\n\r\n// Make available globally\r\nif (typeof window !== 'undefined') {\r\n  (window as any).Minimact = Minimact;\r\n}\r\n\r\nexport default Minimact;\r\n","/**\r\n * Task scheduling hooks for fine-grained render timing control\r\n * useMicroTask - runs before paint (microtask queue)\r\n * useMacroTask - runs after paint (task queue)\r\n */\r\n\r\n/**\r\n * Hook: useMicroTask\r\n * Schedules a callback to run in the microtask queue (before next paint)\r\n * Perfect for: DOM measurements, layout calculations, critical updates\r\n */\r\nexport function useMicroTask(callback: () => void): void {\r\n  queueMicrotask(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMicroTask] Error in microtask:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Hook: useMacroTask\r\n * Schedules a callback to run in the task queue (after paint)\r\n * Perfect for: Analytics, logging, non-critical updates, deferred work\r\n */\r\nexport function useMacroTask(callback: () => void, delay: number = 0): void {\r\n  setTimeout(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMacroTask] Error in macrotask:', error);\r\n    }\r\n  }, delay);\r\n}\r\n\r\n/**\r\n * Hook: useAnimationFrame\r\n * Schedules a callback for the next animation frame\r\n * Perfect for: Animations, visual updates, smooth transitions\r\n */\r\nexport function useAnimationFrame(callback: (timestamp: number) => void): number {\r\n  const rafId = requestAnimationFrame((timestamp) => {\r\n    try {\r\n      callback(timestamp);\r\n    } catch (error) {\r\n      console.error('[Minimact useAnimationFrame] Error in animation frame:', error);\r\n    }\r\n  });\r\n\r\n  return rafId;\r\n}\r\n\r\n/**\r\n * Hook: useIdleCallback\r\n * Schedules a callback for when the browser is idle\r\n * Perfect for: Low-priority work, background tasks, optimization\r\n */\r\nexport function useIdleCallback(\r\n  callback: (deadline: IdleDeadline) => void,\r\n  options?: IdleRequestOptions\r\n): number {\r\n  if ('requestIdleCallback' in window) {\r\n    return requestIdleCallback((deadline) => {\r\n      try {\r\n        callback(deadline);\r\n      } catch (error) {\r\n        console.error('[Minimact useIdleCallback] Error in idle callback:', error);\r\n      }\r\n    }, options);\r\n  } else {\r\n    // Fallback to setTimeout for browsers without requestIdleCallback\r\n    return setTimeout(() => {\r\n      const deadline: IdleDeadline = {\r\n        didTimeout: false,\r\n        timeRemaining: () => 50\r\n      };\r\n      callback(deadline);\r\n    }, 1) as unknown as number;\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an animation frame\r\n */\r\nexport function cancelAnimationFrame(id: number): void {\r\n  window.cancelAnimationFrame(id);\r\n}\r\n\r\n/**\r\n * Cancel an idle callback\r\n */\r\nexport function cancelIdleCallback(id: number): void {\r\n  if ('cancelIdleCallback' in window) {\r\n    window.cancelIdleCallback(id);\r\n  } else {\r\n    clearTimeout(id);\r\n  }\r\n}\r\n","/**\r\n * usePaginatedServerTask - Pagination built on useServerTask\r\n *\r\n * Extends the existing useServerTask infrastructure to add pagination capabilities.\r\n * Reuses transpilers, FFI bridge, and task runtime for zero additional complexity.\r\n */\r\n\r\nimport { useServerTask } from './hooks';\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport { ServerTaskOptions } from './server-task';\r\n\r\n/**\r\n * Pagination parameters passed to the fetch function\r\n */\r\nexport interface PaginationParams<TFilter = any> {\r\n  page: number;\r\n  pageSize: number;\r\n  filters: TFilter;\r\n}\r\n\r\n/**\r\n * Options for configuring a paginated server task\r\n */\r\nexport interface PaginatedServerTaskOptions<T, TFilter = any> {\r\n  /** Number of items per page (default: 20) */\r\n  pageSize?: number;\r\n\r\n  /** Function to get total count (for calculating total pages) */\r\n  getTotalCount: (filters: TFilter) => Promise<number>;\r\n\r\n  /** Enable automatic prefetching of next page (default: false) */\r\n  prefetchNext?: boolean;\r\n\r\n  /** Enable automatic prefetching of previous page (default: false) */\r\n  prefetchPrev?: boolean;\r\n\r\n  /** Dependencies that trigger re-fetch when changed */\r\n  dependencies?: any[];\r\n\r\n  /** Runtime selection: 'csharp' or 'rust' (inherited from useServerTask) */\r\n  runtime?: 'csharp' | 'rust';\r\n\r\n  /** Enable parallel execution (for Rust runtime with Rayon) */\r\n  parallel?: boolean;\r\n}\r\n\r\n/**\r\n * Paginated server task result\r\n */\r\nexport interface PaginatedServerTask<T> {\r\n  // Data\r\n  items: T[];\r\n  total: number;\r\n  totalPages: number;\r\n\r\n  // State\r\n  page: number;\r\n  pageSize: number;\r\n  pending: boolean;\r\n  error?: string;\r\n\r\n  // Navigation\r\n  hasNext: boolean;\r\n  hasPrev: boolean;\r\n  next: () => void;\r\n  prev: () => void;\r\n  goto: (page: number) => void;\r\n  refresh: () => void;\r\n\r\n  // Advanced: Access to underlying tasks\r\n  _fetchTask: any;\r\n  _countTask: any;\r\n}\r\n\r\n/**\r\n * usePaginatedServerTask Hook\r\n *\r\n * Wraps useServerTask to provide pagination with intelligent prefetching.\r\n *\r\n * @example\r\n * const users = usePaginatedServerTask(\r\n *   async ({ page, pageSize, filters }) => {\r\n *     return await db.users\r\n *       .where(u => filters.role ? u.role === filters.role : true)\r\n *       .skip((page - 1) * pageSize)\r\n *       .take(pageSize)\r\n *       .toList();\r\n *   },\r\n *   {\r\n *     pageSize: 20,\r\n *     getTotalCount: async (filters) => {\r\n *       return await db.users\r\n *         .where(u => filters.role ? u.role === filters.role : true)\r\n *         .count();\r\n *     },\r\n *     prefetchNext: true,\r\n *     dependencies: [filters]\r\n *   }\r\n * );\r\n */\r\nexport function usePaginatedServerTask<T, TFilter = any>(\r\n  fetchFn: (params: PaginationParams<TFilter>) => Promise<T[]>,\r\n  options: PaginatedServerTaskOptions<T, TFilter>\r\n): PaginatedServerTask<T> {\r\n  const pageSize = options.pageSize || 20;\r\n\r\n  // State\r\n  const [page, setPage] = useState(1);\r\n  const [items, setItems] = useState<T[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Prefetch cache\r\n  const prefetchCache = useRef<Map<number, T[]>>(new Map());\r\n\r\n  // Last args (for retry)\r\n  const lastArgs = useRef<any[]>([]);\r\n\r\n  // Build current filters from dependencies\r\n  const filters = buildFilters(options.dependencies);\r\n\r\n  // ✅ Reuse useServerTask for fetch logic!\r\n  // Note: The actual function is passed via Babel transpilation\r\n  // At runtime, we just get a task instance and call .start(args)\r\n  const fetchTask = useServerTask<T[]>(\r\n    undefined, // Function extracted by Babel plugin\r\n    {\r\n      runtime: options.runtime,\r\n      parallel: options.parallel\r\n    } as ServerTaskOptions\r\n  );\r\n\r\n  // ✅ Reuse useServerTask for count query!\r\n  const countTask = useServerTask<number>(\r\n    undefined, // Function extracted by Babel plugin\r\n    { runtime: options.runtime } as ServerTaskOptions\r\n  );\r\n\r\n  /**\r\n   * Fetch a specific page\r\n   */\r\n  const fetchPage = async (targetPage: number, fromCache = true) => {\r\n    // Check prefetch cache\r\n    if (fromCache && prefetchCache.current.has(targetPage)) {\r\n      const cached = prefetchCache.current.get(targetPage)!;\r\n      setItems(cached);\r\n      setPage(targetPage);\r\n      prefetchCache.current.delete(targetPage);\r\n\r\n      console.log(`[usePaginatedServerTask] 🟢 Cache hit for page ${targetPage}`);\r\n\r\n      // Trigger next prefetch\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Fetch from server via useServerTask\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    lastArgs.current = [args];\r\n\r\n    fetchTask.start(args);\r\n\r\n    // Wait for completion (using promise)\r\n    try {\r\n      const result = await fetchTask.promise;\r\n\r\n      setItems(result as T[]);\r\n      setPage(targetPage);\r\n      setError(null);\r\n\r\n      console.log(`[usePaginatedServerTask] 🔴 Fetched page ${targetPage} from server`);\r\n\r\n      // Prefetch adjacent pages if configured\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch page');\r\n      console.error(`[usePaginatedServerTask] Error fetching page ${targetPage}:`, err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Prefetch in background (non-blocking)\r\n   */\r\n  const prefetchInBackground = async (targetPage: number) => {\r\n    if (prefetchCache.current.has(targetPage)) {\r\n      return; // Already cached\r\n    }\r\n\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    // Create a separate task instance for prefetching\r\n    // Note: This will be optimized later to reuse task instances\r\n    fetchTask.start(args);\r\n\r\n    try {\r\n      const result = await fetchTask.promise;\r\n      prefetchCache.current.set(targetPage, result as T[]);\r\n      console.log(`[usePaginatedServerTask] ⚡ Prefetched page ${targetPage}`);\r\n    } catch (err) {\r\n      console.error(`[usePaginatedServerTask] Prefetch failed for page ${targetPage}:`, err);\r\n      // Silently fail - prefetch is optional\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get total count on mount and when filters change\r\n   */\r\n  useEffect(() => {\r\n    countTask.start(filters);\r\n\r\n    countTask.promise.then((count) => {\r\n      setTotal(count as number);\r\n    }).catch((err) => {\r\n      console.error('[usePaginatedServerTask] Failed to get total count:', err);\r\n    });\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  /**\r\n   * Initial fetch\r\n   */\r\n  useEffect(() => {\r\n    fetchPage(1, false);\r\n  }, []);\r\n\r\n  /**\r\n   * Re-fetch when dependencies change\r\n   */\r\n  useEffect(() => {\r\n    if (options.dependencies && options.dependencies.length > 0) {\r\n      prefetchCache.current.clear();\r\n      fetchPage(1, false);\r\n    }\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  // Computed properties\r\n  const totalPages = Math.ceil(total / pageSize);\r\n  const hasNext = page < totalPages;\r\n  const hasPrev = page > 1;\r\n\r\n  // Navigation methods\r\n  const next = () => {\r\n    if (hasNext) {\r\n      fetchPage(page + 1);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    if (hasPrev) {\r\n      fetchPage(page - 1);\r\n    }\r\n  };\r\n\r\n  const goto = (targetPage: number) => {\r\n    if (targetPage >= 1 && targetPage <= totalPages) {\r\n      fetchPage(targetPage);\r\n    }\r\n  };\r\n\r\n  const refresh = () => {\r\n    prefetchCache.current.clear();\r\n    fetchPage(page, false);\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    items,\r\n    total,\r\n    totalPages,\r\n\r\n    // State\r\n    page,\r\n    pageSize,\r\n    pending: fetchTask.status === 'running',\r\n    error: error || fetchTask.error?.message,\r\n\r\n    // Navigation\r\n    hasNext,\r\n    hasPrev,\r\n    next,\r\n    prev,\r\n    goto,\r\n    refresh,\r\n\r\n    // ✅ Expose underlying tasks for advanced use\r\n    _fetchTask: fetchTask,\r\n    _countTask: countTask\r\n  };\r\n}\r\n\r\n/**\r\n * Helper: Build filters object from dependencies array\r\n */\r\nfunction buildFilters(dependencies?: any[]): any {\r\n  if (!dependencies || dependencies.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // If single object, use as-is\r\n  if (dependencies.length === 1 && typeof dependencies[0] === 'object') {\r\n    return dependencies[0];\r\n  }\r\n\r\n  // Otherwise, create indexed object\r\n  return dependencies.reduce((acc, dep, i) => {\r\n    acc[`dep${i}`] = dep;\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n"],"names":["ConnectionState","MessageType","ExponentialBackoffRetryPolicy","constructor","this","delays","maxDelay","nextRetryDelay","retryAttempt","length","JsonProtocol","writeInvocation","invocationId","target","args","type","arguments","writeMessage","writePing","writeClose","error","parseMessage","data","JSON","parse","Error","serializeMessage","message","stringify","isInvocation","isCompletion","isPing","isClose","protocolName","protocolVersion","EventEmitter","events","Map","on","event","handler","has","set","get","push","off","handlers","index","indexOf","splice","once","onceHandler","emit","forEach","console","removeAllListeners","delete","clear","listenerCount","eventNames","Array","from","keys","SignalMConnection","url","options","ws","pendingInvocations","state","Disconnected","reconnectAttempts","reconnectTimeoutId","reconnectPolicy","debugLogging","debug","connectionTimeout","invocationTimeout","eventEmitter","start","Connecting","log","connect","stop","clearTimeout","close","invoke","methodName","Connected","generateInvocationId","Promise","resolve","reject","timeout","setTimeout","serialized","send","onConnected","onDisconnected","onReconnecting","onReconnected","onError","connectionState","wsUrl","buildWebSocketUrl","WebSocket","onopen","onmessage","handleMessage","onerror","onclose","handleClose","handleInvocation","handleCompletion","handlePing","pending","result","pongMessage","code","reason","attemptReconnect","delay","Reconnecting","async","startsWith","protocol","window","location","host","toString","SignalMManager","hubUrl","eventHandlers","connection","setupEventHandlers","componentId","html","patches","confidence","toFixed","hintId","connectionId","registerComponent","invokeComponentMethod","argsJson","updateClientState","key","value","valueJson","updateClientComputedState","computedValues","updateComponentState","stateKey","updateDomElementState","snapshot","updateComponentStateWithOperation","newValue","operation","updateQueryResults","queryKey","results","resultCount","Set","add","DOMPatcher","applyPatches","rootElement","count","patch","applyPatch","targetElement","getElementByPath","path","patchCreate","node","patchRemove","patchReplace","patchUpdateText","content","patchUpdateProps","props","patchReorderChildren","order","warn","newElement","createElementFromVNode","innerHTML","appendChild","parentPath","slice","parent","childNodes","insertBefore","element","parentNode","removeChild","oldElement","newNode","replaceChild","nodeType","Node","TEXT_NODE","textContent","oldAttrs","attributes","attr","name","removeAttribute","Object","entries","setAttribute","className","keyedChildren","child","HTMLElement","getAttribute","i","currentChild","current","vnode","document","createTextNode","velem","createElement","tag","toLowerCase","children","fragment","createDocumentFragment","vfrag","div","replaceHTML","ClientStateManager","states","subscribers","initializeComponent","initialState","getState","componentState","undefined","setState","oldValue","notifySubscribers","subscribe","callback","componentSubscribers","keySubscribers","getComponentState","updateState","updates","clearComponent","bindToElement","property","initialValue","updateElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","String","bindInput","input","inputHandler","e","addEventListener","unsubscribe","removeEventListener","EventDelegation","componentMethodInvoker","hintQueue","domPatcher","playgroundBridge","eventListeners","setupEventDelegation","eventTypes","eventType","listener","createEventListener","handlerElement","findHandlerElement","getEventHandler","preventDefault","executeHandler","attrName","legacyAttrName","hasAttribute","parentElement","handlerStr","parts","split","findComponentId","startTime","performance","now","argsObj","MouseEvent","mouse","clientX","clientY","button","KeyboardEvent","keyboard","ctrlKey","shiftKey","altKey","matchedHint","tryMatchHint","componentElement","findComponentElement","latency","cacheHit","patchCount","catch","err","cacheMiss","querySelector","destroy","HydrationManager","clientState","components","hydrateComponent","firstElementChild","metadata","serverState","hydrateClientZones","bindStateElements","clientZones","querySelectorAll","zone","stateName","getInitialValue","boundElements","elem","bindKey","isClientScope","isInClientScope","bindProperty","determineBindProperty","checked","valueAsNumber","dehydrateComponent","getComponent","updateServerState","hydrateAll","TemplateRenderer","renderTemplate","template","params","param","placeholder","formatValue","replace","renderTemplatePatch","templatePatch","stateValues","conditionalTemplates","conditionalBindingIndex","bindingIndex","conditionBinding","bindings","conditionKey","conditionValue","conditionalTemplate","includes","map","binding","transform","applyTransform","materializePatch","propName","vnodes","renderLoopTemplate","loopTemplate","convertLoopToPatches","materializePatches","materialized","isArray","decimals","parseInt","match","Number","multiplier","parseFloat","substring","divisor","addend","subtrahend","toUpperCase","trim","v","join","isTemplatePatch","extractBindings","validateBindings","every","getMissingBindings","filter","array","array_binding","item","itemState","index_var","flattenedState","flattenItemState","renderItemTemplate","item_template","flattened","itemTemplate","template_patch","props_templates","propTemplate","children_templates","childTemplate","key_binding","HintQueue","hints","maxHintAge","queueHint","isTemplate","some","queuedAt","Date","patchType","cleanupStaleHints","matchHint","stateChanges","componentHints","hint","stateMatches","predictedState","materializedPatches","predicted","actual","predictedValue","staleKeys","keysToRemove","clearAll","getStats","allHints","values","templateHints","h","concreteHints","totalHints","size","templatePercentage","Math","round","hintsByComponent","reduce","acc","PlaygroundBridge","predictionReceived","postMessage","elapsedMs","predictionConfidence","correctionApplied","dispatchEvent","CustomEvent","detail","computedRegistry","computeAllForComponent","computed","varName","variable","computeFn","lastValue","computeDependentVariables","changedStateKey","dependencies","hasClientComputed","TemplateStateManager","templates","componentStates","loadTemplateMap","templateMap","nodePath","registerTemplate","getTemplate","getComponentTemplates","getTemplatesBoundTo","getStateValue","render","renderWithParams","applyTemplatePatch","slots","attribute","text","buildNodePathKey","existingTemplate","keysToDelete","componentCount","templateCount","memoryBytes","memoryKB","avgTemplatesPerComponent","max","templateState","ServerTaskImpl","taskId","signalR","context","status","progress","chunks","chunkCount","_options","streaming","stream","_createPromise","_promise","_resolve","_reject","promise","idle","running","complete","failed","cancelled","startedAt","completedAt","partial","_triggerRerender","duration","getTime","retry","cancel","then","_updateFromServer","previousStatus","ServerReducerImpl","reducerId","dispatching","dispatch","action","lastDispatchedAt","lastActionType","dispatchAsync","_pendingPromise","_pendingResolve","_pendingReject","newState","previousState","currentContext","stateIndex","effectIndex","refIndex","serverTaskIndex","serverReducerIndex","findElementByPath","root","useState","currentValue","actualNewValue","boundTemplates","newText","createArrayStateSetter","useEffect","deps","effects","effect","dep","cleanup","queueMicrotask","useRef","refKey","refs","baseSetState","currentArray","setter","append","newArray","prepend","insertAt","removeAt","_","updateAt","removeWhere","predicate","updateWhere","appendMany","items","removeMany","indices","useServerTask","taskFactory","taskKey","serverTasks","task","EventAggregator","channels","channel","lastMessage","channelData","timestamp","hasCallback","publish","waiting","source","isStale","subscriber","totalChannels","hasLastMessage","globalAggregator","getEventAggregator","Minimact","body","eventDelegation","enabled","enableDebugLogging","reconnectInterval","hydration","setupSignalRHandlers","registerAllComponents","component","serverReducers","reducer","getClientState","setClientState","recomputeAndSyncClientState","subscribeToState","ClientComputed.hasClientComputed","ClientComputed.computeDependentVariables","ClientComputed.computeAllForComponent","readyState","minimact","scope","urlPattern","expiry","defaultValue","variables","variableCount","setComputedContext","requestAnimationFrame","memoize","debounce","throttle","setValue","cache","debounceTimer","syncToServer","computedValue","doSync","is","resolvedValue","ctx","requestIdleCallback","deadline","didTimeout","timeRemaining","fetchFn","pageSize","page","setPage","setItems","total","setTotal","setError","prefetchCache","lastArgs","filters","fetchTask","runtime","parallel","countTask","fetchPage","targetPage","fromCache","cached","prefetchNext","totalPages","prefetchInBackground","prefetchPrev","ceil","hasNext","hasPrev","next","prev","goto","refresh","_fetchTask","_countTask","aggregator","reducerKey"],"mappings":"sCAWA,IAAYA,EAwCAC,GAxCZ,SAAYD,GACVA,EAAA,aAAA,eACAA,EAAA,WAAA,aACAA,EAAA,UAAA,YACAA,EAAA,aAAA,cACD,CALD,CAAYA,IAAAA,EAAe,CAAA,IAwC3B,SAAYC,GAEVA,EAAAA,EAAA,WAAA,GAAA,aAEAA,EAAAA,EAAA,WAAA,GAAA,aAEAA,EAAAA,EAAA,WAAA,GAAA,aAEAA,EAAAA,EAAA,iBAAA,GAAA,mBAEAA,EAAAA,EAAA,iBAAA,GAAA,mBAEAA,EAAAA,EAAA,KAAA,GAAA,OAEAA,EAAAA,EAAA,MAAA,GAAA,OACD,CAfD,CAAYA,IAAAA,EAAW,CAAA,UCzBVC,EAAb,WAAAC,GACUC,KAAAC,OAAS,CAAC,EAAG,IAAM,IAAO,KAC1BD,KAAAE,SAAW,GASrB,CAPE,cAAAC,CAAeC,GAEb,OAAIA,EAAeJ,KAAKC,OAAOI,OACtBL,KAAKC,OAAOG,GAEdJ,KAAKE,QACd,QClBWI,EAcX,sBAAOC,CACLC,EACAC,EACAC,GAEA,MAAO,CACLC,KAAM,EACNH,eACAC,SACAG,UAAWF,EAEf,CAKA,mBAAOG,CAAaJ,EAAgBC,GAClC,MAAO,CACLC,KAAM,EACNF,SACAG,UAAWF,EAEf,CAKA,gBAAOI,GACL,MAAO,CACLH,KAAM,EAEV,CAKA,iBAAOI,CAAWC,GAChB,MAAO,CACLL,KAAM,EACNK,QAEJ,CAKA,mBAAOC,CAAaC,GAClB,IACE,OAAOC,KAAKC,MAAMF,EACpB,CAAE,MAAOF,GACP,MAAM,IAAIK,MAAM,4BAA4BL,IAC9C,CACF,CAKA,uBAAOM,CAAiBC,GACtB,OAAOJ,KAAKK,UAAUD,EACxB,CAKA,mBAAOE,CAAaF,GAClB,OAAwB,IAAjBA,EAAQZ,IACjB,CAKA,mBAAOe,CAAaH,GAClB,OAAwB,IAAjBA,EAAQZ,IACjB,CAKA,aAAOgB,CAAOJ,GACZ,OAAwB,IAAjBA,EAAQZ,IACjB,CAKA,cAAOiB,CAAQL,GACb,OAAwB,IAAjBA,EAAQZ,IACjB,EAjGgBL,EAAAuB,aAAe,OAKfvB,EAAAwB,gBAAkB,QCrBvBC,EAAb,WAAAhC,GACUC,KAAAgC,OAAS,IAAIC,GAkGvB,CA1FE,EAAAC,CAAGC,EAAeC,GACXpC,KAAKgC,OAAOK,IAAIF,IACnBnC,KAAKgC,OAAOM,IAAIH,EAAO,IAEzBnC,KAAKgC,OAAOO,IAAIJ,GAAQK,KAAKJ,EAC/B,CAQA,GAAAK,CAAIN,EAAeC,GACjB,MAAMM,EAAW1C,KAAKgC,OAAOO,IAAIJ,GACjC,GAAIO,EAAU,CACZ,MAAMC,EAAQD,EAASE,QAAQR,IACjB,IAAVO,GACFD,EAASG,OAAOF,EAAO,EAE3B,CACF,CAQA,IAAAG,CAAKX,EAAeC,GAClB,MAAMW,EAAc,IAAIrC,KACtB0B,KAAW1B,GACXV,KAAKyC,IAAIN,EAAOY,IAElB/C,KAAKkC,GAAGC,EAAOY,EACjB,CAQA,IAAAC,CAAKb,KAAkBzB,GACrB,MAAMgC,EAAW1C,KAAKgC,OAAOO,IAAIJ,GAC7BO,GAEmB,IAAIA,GACZO,QAAQb,IACnB,IACEA,KAAW1B,EACb,CAAE,MAAOM,GACPkC,QAAQlC,MAAM,yCAAyCmB,MAAWnB,EACpE,GAGN,CAOA,kBAAAmC,CAAmBhB,GACbA,EACFnC,KAAKgC,OAAOoB,OAAOjB,GAEnBnC,KAAKgC,OAAOqB,OAEhB,CAQA,aAAAC,CAAcnB,GACZ,MAAMO,EAAW1C,KAAKgC,OAAOO,IAAIJ,GACjC,OAAOO,EAAWA,EAASrC,OAAS,CACtC,CAOA,UAAAkD,GACE,OAAOC,MAAMC,KAAKzD,KAAKgC,OAAO0B,OAChC,QCxFWC,EAeX,WAAA5D,CAAY6D,EAAaC,EAA0B,IAd3C7D,KAAA8D,GAAuB,KAEvB9D,KAAA0C,SAAW,IAAIT,IACfjC,KAAA+D,mBAAqB,IAAI9B,IACzBjC,KAAAQ,aAAe,EAEfR,KAAAgE,MAAyBpE,EAAgBqE,aACzCjE,KAAAkE,kBAAoB,EAKpBlE,KAAAmE,mBAAoC,KAG1CnE,KAAK4D,IAAMA,EACX5D,KAAKoE,gBAAkBP,EAAQO,iBAAmB,IAAItE,EACtDE,KAAKqE,aAAeR,EAAQS,QAAS,EACrCtE,KAAKuE,kBAAoBV,EAAQU,mBAAqB,IACtDvE,KAAKwE,kBAAoBX,EAAQW,mBAAqB,IACtDxE,KAAKyE,aAAe,IAAI1C,CAC1B,CAKA,WAAM2C,GACJ,GAAI1E,KAAKgE,QAAUpE,EAAgBqE,aACjC,MAAM,IAAI5C,MAAM,iCAKlB,OAFArB,KAAKgE,MAAQpE,EAAgB+E,WAC7B3E,KAAK4E,IAAI,0BACF5E,KAAK6E,SACd,CAKA,UAAMC,GACJ9E,KAAK4E,IAAI,0BAGuB,OAA5B5E,KAAKmE,qBACPY,aAAa/E,KAAKmE,oBAClBnE,KAAKmE,mBAAqB,MAGxBnE,KAAK8D,KACP9D,KAAK8D,GAAGkB,MAAM,IAAM,kBACpBhF,KAAK8D,GAAK,MAGZ9D,KAAKgE,MAAQpE,EAAgBqE,aAC7BjE,KAAKyE,aAAazB,KAAK,eACzB,CAKA,YAAMiC,CAAgBC,KAAuBxE,GAC3C,GAAIV,KAAKgE,QAAUpE,EAAgBuF,UACjC,MAAM,IAAI9D,MAAM,kDAAkDrB,KAAKgE,UAGzE,MAAMxD,EAAeR,KAAKoF,uBACpB7D,EAAUjB,EAAaC,gBAAgBC,EAAc0E,EAAYxE,GAEvE,OAAO,IAAI2E,QAAW,CAACC,EAASC,KAC9B,MAAMC,EAAUC,WAAW,KACzBzF,KAAK+D,mBAAmBX,OAAO5C,GAC/B+E,EAAO,IAAIlE,MAAM,eAAe6D,sBAA+BlF,KAAKwE,yBACnExE,KAAKwE,mBAERxE,KAAK+D,mBAAmBzB,IAAI9B,EAAc,CACxC8E,UACAC,SACAC,QAASA,IAGX,MAAME,EAAapF,EAAagB,iBAAiBC,GACjDvB,KAAK4E,IAAI,aAAaM,WAAoB1E,KAAiBE,GAC3DV,KAAK8D,GAAI6B,KAAKD,IAElB,CAKA,IAAAC,CAAKT,KAAuBxE,GAC1B,GAAIV,KAAKgE,QAAUpE,EAAgBuF,UACjC,MAAM,IAAI9D,MAAM,kDAAkDrB,KAAKgE,UAGzE,MAAMzC,EAAUjB,EAAaO,aAAaqE,EAAYxE,GAChDgF,EAAapF,EAAagB,iBAAiBC,GACjDvB,KAAK4E,IAAI,YAAYM,uBAAiCxE,GACtDV,KAAK8D,GAAI6B,KAAKD,EAChB,CAKA,EAAAxD,CAAGgD,EAAoB9C,GAChBpC,KAAK0C,SAASL,IAAI6C,IACrBlF,KAAK0C,SAASJ,IAAI4C,EAAY,IAEhClF,KAAK0C,SAASH,IAAI2C,GAAa1C,KAAKJ,GACpCpC,KAAK4E,IAAI,2BAA2BM,KACtC,CAKA,GAAAzC,CAAIyC,EAAoB9C,GACtB,MAAMM,EAAW1C,KAAK0C,SAASH,IAAI2C,GACnC,GAAIxC,EAAU,CACZ,MAAMC,EAAQD,EAASE,QAAQR,IACjB,IAAVO,IACFD,EAASG,OAAOF,EAAO,GACvB3C,KAAK4E,IAAI,wBAAwBM,MAErC,CACF,CAKA,WAAAU,CAAYxD,GACVpC,KAAKyE,aAAavC,GAAG,YAAaE,EACpC,CAEA,cAAAyD,CAAezD,GACbpC,KAAKyE,aAAavC,GAAG,eAAgBE,EACvC,CAEA,cAAA0D,CAAe1D,GACbpC,KAAKyE,aAAavC,GAAG,eAAgBE,EACvC,CAEA,aAAA2D,CAAc3D,GACZpC,KAAKyE,aAAavC,GAAG,cAAeE,EACtC,CAEA,OAAA4D,CAAQ5D,GACNpC,KAAKyE,aAAavC,GAAG,QAASE,EAChC,CAKA,mBAAI6D,GACF,OAAOjG,KAAKgE,KACd,CAKQ,aAAMa,GACZ,OAAO,IAAIQ,QAAQ,CAACC,EAASC,KAC3B,MAAMW,EAAQlG,KAAKmG,oBACnBnG,KAAK4E,IAAI,iBAAiBsB,QAE1B,IACElG,KAAK8D,GAAK,IAAIsC,UAAUF,EAC1B,CAAE,MAAOlF,GAEP,YADAuE,EAAOvE,EAET,CAGA,MAAMuD,EAAoBkB,WAAW,KAC/BzF,KAAKgE,QAAUpE,EAAgB+E,aACjC3E,KAAK4E,IAAI,sBACT5E,KAAK8D,IAAIkB,QACTO,EAAO,IAAIlE,MAAM,4BAA4BrB,KAAKuE,0BAEnDvE,KAAKuE,mBAERvE,KAAK8D,GAAGuC,OAAS,KACftB,aAAaR,GACbvE,KAAKgE,MAAQpE,EAAgBuF,UAC7BnF,KAAKkE,kBAAoB,EACzBlE,KAAK4E,IAAI,eACT5E,KAAKyE,aAAazB,KAAK,aACvBsC,KAGFtF,KAAK8D,GAAGwC,UAAanE,IACnBnC,KAAKuG,cAAcpE,EAAMjB,OAG3BlB,KAAK8D,GAAG0C,QAAWxF,IACjBhB,KAAK4E,IAAI,kBAAmB5D,GAC5BhB,KAAKyE,aAAazB,KAAK,QAAS,IAAI3B,MAAM,qBAG5CrB,KAAK8D,GAAG2C,QAAWtE,IACjB4C,aAAaR,GACbvE,KAAK0G,YAAYvE,KAGvB,CAKQ,aAAAoE,CAAcrF,GACpB,IACE,MAAMK,EAAUjB,EAAaW,aAAaC,GAC1ClB,KAAK4E,IAAI,2BAA2BrD,EAAQZ,QAASY,GAEjDjB,EAAamB,aAAaF,GAE5BvB,KAAK2G,iBAAiBpF,GACbjB,EAAaoB,aAAaH,GAEnCvB,KAAK4G,iBAAiBrF,GACbjB,EAAaqB,OAAOJ,GAE7BvB,KAAK6G,aACIvG,EAAasB,QAAQL,KAE9BvB,KAAK4E,IAAI,yBAA0BrD,EAAQP,OAC3ChB,KAAK8D,IAAIkB,MAAM,IAAM,4BAEzB,CAAE,MAAOhE,GACPhB,KAAK4E,IAAI,wBAAyB5D,GAClCkC,QAAQlC,MAAM,mCAAoCA,EACpD,CACF,CAKQ,gBAAA2F,CAAiBpF,GACvB,MAAMmB,EAAW1C,KAAK0C,SAASH,IAAIhB,EAAQd,QACvCiC,GACF1C,KAAK4E,IAAI,WAAWlC,EAASrC,0BAA0BkB,EAAQd,WAC/DiC,EAASO,QAAQb,IACf,IACEA,KAAYb,EAAQX,WAAa,GACnC,CAAE,MAAOI,GACPkC,QAAQlC,MAAM,mCAAmCO,EAAQd,WAAYO,EACvE,KAGFhB,KAAK4E,IAAI,8BAA8BrD,EAAQd,UAEnD,CAKQ,gBAAAmG,CAAiBrF,GACvB,MAAMuF,EAAU9G,KAAK+D,mBAAmBxB,IAAIhB,EAAQf,cAChDsG,GACF/B,aAAa+B,EAAQtB,SACrBxF,KAAK+D,mBAAmBX,OAAO7B,EAAQf,cAEnCe,EAAQP,OACVhB,KAAK4E,IAAI,cAAcrD,EAAQf,wBAAwBe,EAAQP,SAC/D8F,EAAQvB,OAAO,IAAIlE,MAAME,EAAQP,UAEjChB,KAAK4E,IAAI,cAAcrD,EAAQf,yBAA0Be,EAAQwF,QACjED,EAAQxB,QAAQ/D,EAAQwF,UAG1B/G,KAAK4E,IAAI,8CAA8CrD,EAAQf,eAEnE,CAKQ,UAAAqG,GACN,MAAMG,EAAc1G,EAAaQ,YAC3B4E,EAAapF,EAAagB,iBAAiB0F,GACjDhH,KAAK4E,IAAI,+BACT5E,KAAK8D,IAAI6B,KAAKD,EAChB,CAKQ,WAAAgB,CAAYvE,GAClBnC,KAAK4E,IAAI,4BAA4BzC,EAAM8E,iBAAiB9E,EAAM+E,WAClElH,KAAKgE,MAAQpE,EAAgBqE,aAC7BjE,KAAK8D,GAAK,KAGV9D,KAAK+D,mBAAmBd,QAAS6D,IAC/B/B,aAAa+B,EAAQtB,SACrBsB,EAAQvB,OAAO,IAAIlE,MAAM,wBAE3BrB,KAAK+D,mBAAmBV,QAGL,MAAflB,EAAM8E,MAAgC,OAAf9E,EAAM8E,KAC/BjH,KAAKmH,mBAELnH,KAAKyE,aAAazB,KAAK,eAE3B,CAKQ,sBAAMmE,GACZ,MAAMC,EAAQpH,KAAKoE,gBAAgBjE,eAAeH,KAAKkE,mBAEvD,GAAc,OAAVkD,EAIF,OAFApH,KAAK4E,IAAI,2CACT5E,KAAKyE,aAAazB,KAAK,gBAIzBhD,KAAKkE,oBACLlE,KAAKgE,MAAQpE,EAAgByH,aAC7BrH,KAAK4E,IAAI,mBAAmBwC,gBAAoBpH,KAAKkE,yBACrDlE,KAAKyE,aAAazB,KAAK,gBAEvBhD,KAAKmE,mBAAqBsB,WAAW6B,UACnCtH,KAAKmE,mBAAqB,KAC1B,UACQnE,KAAK6E,UACX7E,KAAK4E,IAAI,iBACT5E,KAAKyE,aAAazB,KAAK,cACzB,CAAE,MAAOhC,GACPhB,KAAK4E,IAAI,sBAAuB5D,GAChChB,KAAKmH,kBACP,GACCC,EACL,CAKQ,iBAAAjB,GAEN,GAAInG,KAAK4D,IAAI2D,WAAW,UAAYvH,KAAK4D,IAAI2D,WAAW,UACtD,OAAOvH,KAAK4D,IAId,MAAM4D,EAAwC,WAA7BC,OAAOC,SAASF,SAAwB,OAAS,MAKlE,OAJgBxH,KAAK4D,IAAI2D,WAAW,KAChC,GAAGC,MAAaC,OAAOC,SAASC,OAAO3H,KAAK4D,MAC5C,GAAG4D,MAAaC,OAAOC,SAASC,QAAQ3H,KAAK4D,KAGnD,CAKQ,oBAAAwB,GACN,SAAUpF,KAAKQ,cAAcoH,UAC/B,CAKQ,GAAAhD,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAOX,QC3XWwD,EAKX,WAAA9H,CAAY+H,EAAiB,YAAajE,EAAkE,CAAA,GAC1G7D,KAAKqE,aAAeR,EAAQQ,eAAgB,EAC5CrE,KAAK+H,cAAgB,IAAI9F,IAGzBjC,KAAKgI,WAAa,IAAIrE,EAAkBmE,EAAQ,CAC9CxD,MAAOtE,KAAKqE,eAGdrE,KAAKiI,oBACP,CAKQ,kBAAAA,GAENjI,KAAKgI,WAAW9F,GAAG,kBAAmB,CAACgG,EAAqBC,KAC1DnI,KAAK4E,IAAI,kBAAmB,CAAEsD,cAAaC,SAC3CnI,KAAKgD,KAAK,kBAAmB,CAAEkF,cAAaC,WAI9CnI,KAAKgI,WAAW9F,GAAG,eAAgB,CAACgG,EAAqBE,KACvDpI,KAAK4E,IAAI,eAAgB,CAAEsD,cAAaE,YACxCpI,KAAKgD,KAAK,eAAgB,CAAEkF,cAAaE,cAI3CpI,KAAKgI,WAAW9F,GAAG,kBAAoBhB,IACrClB,KAAK4E,IAAI,qBAAuC,IAAlB1D,EAAKmH,YAAkBC,QAAQ,iBAAkB,CAAEJ,YAAahH,EAAKgH,YAAaE,QAASlH,EAAKkH,UAC9HpI,KAAKgD,KAAK,kBAAmB,CAAEkF,YAAahH,EAAKgH,YAAaE,QAASlH,EAAKkH,QAASC,WAAYnH,EAAKmH,eAIxGrI,KAAKgI,WAAW9F,GAAG,kBAAoBhB,IACrClB,KAAK4E,IAAI,6CAA8C,CAAEsD,YAAahH,EAAKgH,YAAaE,QAASlH,EAAKkH,UACtGpI,KAAKgD,KAAK,kBAAmB,CAAEkF,YAAahH,EAAKgH,YAAaE,QAASlH,EAAKkH,YAI9EpI,KAAKgI,WAAW9F,GAAG,YAAchB,IAO/BlB,KAAK4E,IAAI,cAAc1D,EAAKqH,aAA+B,IAAlBrH,EAAKmH,YAAkBC,QAAQ,iBAAkB,CACxFJ,YAAahH,EAAKgH,YAClBE,QAASlH,EAAKkH,UAEhBpI,KAAKgD,KAAK,YAAa9B,KAIzBlB,KAAKgI,WAAW9F,GAAG,QAAUX,IAC3B2B,QAAQlC,MAAM,2BAA4BO,GAC1CvB,KAAKgD,KAAK,QAAS,CAAEzB,cAIvBvB,KAAKgI,WAAWlC,eAAe,KAC7B9F,KAAK4E,IAAI,mBACT5E,KAAKgD,KAAK,eAAgB,MAG5BhD,KAAKgI,WAAWjC,cAAc,KAC5B/F,KAAK4E,IAAI,eACT5E,KAAKgD,KAAK,cAAe,CAAEwF,aAAc,SAG3CxI,KAAKgI,WAAWnC,eAAe,KAC7B7F,KAAK4E,IAAI,qBACT5E,KAAKgD,KAAK,SAAU,MAGtBhD,KAAKgI,WAAWpC,YAAY,KAC1B5F,KAAK4E,IAAI,6BACT5E,KAAKgD,KAAK,YAAa,CAAEwF,aAAc,QAE3C,CAKA,WAAM9D,GACJ,UACQ1E,KAAKgI,WAAWtD,OAExB,CAAE,MAAO1D,GAEP,MADAkC,QAAQlC,MAAM,gCAAiCA,GACzCA,CACR,CACF,CAKA,UAAM8D,SACE9E,KAAKgI,WAAWlD,OACtB9E,KAAK4E,IAAI,iCACX,CAKA,uBAAM6D,CAAkBP,GACtB,UACQlI,KAAKgI,WAAW/C,OAAO,oBAAqBiD,GAClDlI,KAAK4E,IAAI,uBAAwB,CAAEsD,eACrC,CAAE,MAAOlH,GAEP,MADAkC,QAAQlC,MAAM,2CAA4CA,GACpDA,CACR,CACF,CAKA,2BAAM0H,CAAsBR,EAAqBhD,EAAoBxE,EAAY,CAAA,GAC/E,IACE,MAAMiI,EAAWxH,KAAKK,UAAUd,SAC1BV,KAAKgI,WAAW/C,OAAO,wBAAyBiD,EAAahD,EAAYyD,GAC/E3I,KAAK4E,IAAI,iBAAkB,CAAEsD,cAAahD,aAAYxE,QACxD,CAAE,MAAOM,GAEP,MADAkC,QAAQlC,MAAM,sCAAuCA,GAC/CA,CACR,CACF,CAKA,uBAAM4H,CAAkBV,EAAqBW,EAAaC,GACxD,IACE,MAAMC,EAAY5H,KAAKK,UAAUsH,SAC3B9I,KAAKgI,WAAW/C,OAAO,oBAAqBiD,EAAaW,EAAKE,GACpE/I,KAAK4E,IAAI,uBAAwB,CAAEsD,cAAaW,MAAKC,SACvD,CAAE,MAAO9H,GACPkC,QAAQlC,MAAM,4CAA6CA,EAC7D,CACF,CAMA,+BAAMgI,CAA0Bd,EAAqBe,GACnD,UACQjJ,KAAKgI,WAAW/C,OAAO,4BAA6BiD,EAAae,GACvEjJ,KAAK4E,IAAI,gCAAiC,CAAEsD,cAAae,kBAC3D,CAAE,MAAOjI,GAEP,MADAkC,QAAQlC,MAAM,qDAAsDA,GAC9DA,CACR,CACF,CAMA,0BAAMkI,CAAqBhB,EAAqBiB,EAAkBL,GAChE,UACQ9I,KAAKgI,WAAW/C,OAAO,uBAAwBiD,EAAaiB,EAAUL,GAC5E9I,KAAK4E,IAAI,0BAA2B,CAAEsD,cAAaiB,WAAUL,SAC/D,CAAE,MAAO9H,GAEP,MADAkC,QAAQlC,MAAM,+CAAgDA,GACxDA,CACR,CACF,CAMA,2BAAMoI,CAAsBlB,EAAqBiB,EAAkBE,GACjE,UACQrJ,KAAKgI,WAAW/C,OAAO,wBAAyBiD,EAAaiB,EAAUE,GAC7ErJ,KAAK4E,IAAI,4BAA6B,CAAEsD,cAAaiB,WAAUE,YACjE,CAAE,MAAOrI,GAEP,MADAkC,QAAQlC,MAAM,iDAAkDA,GAC1DA,CACR,CACF,CAMA,uCAAMsI,CACJpB,EACAiB,EACAI,EACAC,GAEA,UACQxJ,KAAKgI,WAAW/C,OAAO,oCAAqCiD,EAAaiB,EAAUI,EAAUC,GACnGxJ,KAAK4E,IAAI,yCAA0C,CAAEsD,cAAaiB,WAAUK,YAAWD,YACzF,CAAE,MAAOvI,GAEP,MADAkC,QAAQlC,MAAM,8DAA+DA,GACvEA,CACR,CACF,CAMA,wBAAMyI,CAAmBvB,EAAqBwB,EAAkBC,GAC9D,UACQ3J,KAAKgI,WAAW/C,OAAO,qBAAsBiD,EAAawB,EAAUC,GAC1E3J,KAAK4E,IAAI,wBAAyB,CAAEsD,cAAawB,WAAUE,YAAaD,EAAQtJ,QAClF,CAAE,MAAOW,GAEP,MADAkC,QAAQlC,MAAM,6CAA8CA,GACtDA,CACR,CACF,CAKA,YAAMiE,CAAOC,KAAuBxE,GAClC,UACQV,KAAKgI,WAAW/C,OAAOC,KAAexE,GAC5CV,KAAK4E,IAAI,WAAWM,IAAc,CAAExE,QACtC,CAAE,MAAOM,GAEP,MADAkC,QAAQlC,MAAM,+BAA+BkE,KAAelE,GACtDA,CACR,CACF,CAKA,EAAAkB,CAAGC,EAAeC,GACXpC,KAAK+H,cAAc1F,IAAIF,IAC1BnC,KAAK+H,cAAczF,IAAIH,EAAO,IAAI0H,KAEpC7J,KAAK+H,cAAcxF,IAAIJ,GAAQ2H,IAAI1H,EACrC,CAKA,GAAAK,CAAIN,EAAeC,GACjB,MAAMM,EAAW1C,KAAK+H,cAAcxF,IAAIJ,GACpCO,GACFA,EAASU,OAAOhB,EAEpB,CAKQ,IAAAY,CAAKb,EAAejB,GAC1B,MAAMwB,EAAW1C,KAAK+H,cAAcxF,IAAIJ,GACpCO,GACFA,EAASO,QAAQb,GAAWA,EAAQlB,GAExC,CAKQ,GAAA0D,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,CAMA,SAAIL,GACF,OAAOhE,KAAKgI,WAAW/B,eACzB,CAMA,gBAAIuC,GACF,OAAO,IACT,QCtSWuB,EAGX,WAAAhK,CAAY8D,EAAsC,IAChD7D,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,YAAA2F,CAAaC,EAA0B7B,GACrCpI,KAAK4E,IAAI,mBAAoB,CAAEsF,MAAO9B,EAAQ/H,OAAQ+H,YAEtD,IAAK,MAAM+B,KAAS/B,EAClB,IACEpI,KAAKoK,WAAWH,EAAaE,EAC/B,CAAE,MAAOnJ,GACPkC,QAAQlC,MAAM,oCAAqCmJ,EAAOnJ,EAC5D,CAEJ,CAKQ,UAAAoJ,CAAWH,EAA0BE,GAC3C,MAAME,EAAgBrK,KAAKsK,iBAAiBL,EAAaE,EAAMI,MAE/D,GAAKF,GAAgC,WAAfF,EAAMxJ,KAK5B,OAAQwJ,EAAMxJ,MACZ,IAAK,SACHX,KAAKwK,YAAYP,EAAaE,EAAMI,KAAMJ,EAAMM,MAChD,MACF,IAAK,SACHzK,KAAK0K,YAAYL,GACjB,MACF,IAAK,UACHrK,KAAK2K,aAAaN,EAAgBF,EAAMM,MACxC,MACF,IAAK,aACHzK,KAAK4K,gBAAgBP,EAAgBF,EAAMU,SAC3C,MACF,IAAK,cACH7K,KAAK8K,iBAAiBT,EAA8BF,EAAMY,OAC1D,MACF,IAAK,kBACH/K,KAAKgL,qBAAqBX,EAA8BF,EAAMc,YArBhE/H,QAAQgI,KAAK,iDAAkDf,EAwBnE,CAKQ,WAAAK,CAAYP,EAA0BM,EAAgBE,GAC5D,MAAMU,EAAanL,KAAKoL,uBAAuBX,GAE/C,GAAoB,IAAhBF,EAAKlK,OAEP4J,EAAYoB,UAAY,GACxBpB,EAAYqB,YAAYH,OACnB,CAEL,MAAMI,EAAahB,EAAKiB,MAAM,GAAG,GAC3B7I,EAAQ4H,EAAKA,EAAKlK,OAAS,GAC3BoL,EAASzL,KAAKsK,iBAAiBL,EAAasB,GAE9CE,IACE9I,GAAS8I,EAAOC,WAAWrL,OAC7BoL,EAAOH,YAAYH,GAEnBM,EAAOE,aAAaR,EAAYM,EAAOC,WAAW/I,IAGxD,CAEA3C,KAAK4E,IAAI,eAAgB,CAAE2F,OAAME,QACnC,CAKQ,WAAAC,CAAYkB,GACdA,EAAQC,aACVD,EAAQC,WAAWC,YAAYF,GAC/B5L,KAAK4E,IAAI,eAAgB,CAAEgH,YAE/B,CAKQ,YAAAjB,CAAaoB,EAAkBC,GACrC,MAAMb,EAAanL,KAAKoL,uBAAuBY,GAE3CD,EAAWF,aACbE,EAAWF,WAAWI,aAAad,EAAYY,GAC/C/L,KAAK4E,IAAI,gBAAiB,CAAEmH,aAAYC,YAE5C,CAKQ,eAAApB,CAAgBgB,EAAef,GACjCe,EAAQM,SAAaC,KAAKC,UAC5BR,EAAQS,YAAcxB,EAKxB7K,KAAK4E,IAAI,eAAgB,CAAEgH,UAASf,WACtC,CAKQ,gBAAAC,CAAiBc,EAAsBb,GAE7C,MAAMuB,EAAW9I,MAAMC,KAAKmI,EAAQW,YACpC,IAAK,MAAMC,KAAQF,EACXE,EAAKC,QAAQ1B,GAAWyB,EAAKC,KAAKlF,WAAW,mBACjDqE,EAAQc,gBAAgBF,EAAKC,MAKjC,IAAK,MAAO5D,EAAKC,KAAU6D,OAAOC,QAAQ7B,GACxC,GAAY,UAARlC,EACF+C,EAAQiB,aAAa,QAAS/D,QACzB,GAAY,UAARD,GAA2B,cAARA,EAC5B+C,EAAQkB,UAAYhE,MACf,IAAID,EAAItB,WAAW,MAExB,SAEAqE,EAAQiB,aAAahE,EAAKC,EAC5B,CAGF9I,KAAK4E,IAAI,gBAAiB,CAAEgH,UAASb,SACvC,CAKQ,oBAAAC,CAAqBY,EAAsBX,GACjD,MAAM8B,EAAgB,IAAI9K,IAG1B,IAAK,MAAM+K,KAASxJ,MAAMC,KAAKmI,EAAQF,YACrC,GAAIsB,aAAiBC,YAAa,CAChC,MAAMpE,EAAMmE,EAAME,aAAa,aAAeF,EAAME,aAAa,OAC7DrE,GACFkE,EAAczK,IAAIuG,EAAKmE,EAE3B,CAIF,IAAK,IAAIG,EAAI,EAAGA,EAAIlC,EAAM5K,OAAQ8M,IAAK,CACrC,MAAMtE,EAAMoC,EAAMkC,GACZH,EAAQD,EAAcxK,IAAIsG,GAEhC,GAAImE,EAAO,CACT,MAAMI,EAAexB,EAAQF,WAAWyB,GACpCC,IAAiBJ,GACnBpB,EAAQD,aAAaqB,EAAOI,EAEhC,CACF,CAEApN,KAAK4E,IAAI,qBAAsB,CAAEgH,UAASX,SAC5C,CAKQ,gBAAAX,CAAiBL,EAA0BM,GACjD,IAAI8C,EAAgBpD,EAEpB,IAAK,MAAMtH,KAAS4H,EAAM,CACxB,GAAI5H,GAAS0K,EAAQ3B,WAAWrL,OAC9B,OAAO,KAETgN,EAAUA,EAAQ3B,WAAW/I,EAC/B,CAEA,OAAO0K,CACT,CAKQ,sBAAAjC,CAAuBkC,GAC7B,OAAQA,EAAM3M,MACZ,IAAK,OACH,OAAO4M,SAASC,eAAgBF,EAAgBzC,SAElD,IAAK,UAAW,CACd,MAAM4C,EAAQH,EACR1B,EAAU2B,SAASG,cAAcD,EAAME,KAG7C,IAAK,MAAO9E,EAAKC,KAAU6D,OAAOC,QAAQa,EAAM1C,OAAS,CAAA,GAC3C,cAARlC,GAA+B,UAARA,EACzB+C,EAAQkB,UAAYhE,EACXD,EAAItB,WAAW,MAExBqE,EAAQiB,aAAa,QAAQhE,EAAI+E,gBAAiB9E,GAElD8C,EAAQiB,aAAahE,EAAKC,GAK1B2E,EAAM5E,KACR+C,EAAQiB,aAAa,WAAYY,EAAM5E,KAIzC,IAAK,MAAMmE,KAASS,EAAMI,UAAY,GACpCjC,EAAQN,YAAYtL,KAAKoL,uBAAuB4B,IAGlD,OAAOpB,CACT,CAEA,IAAK,WAAY,CACf,MAAMkC,EAAWP,SAASQ,yBACpBC,EAAQV,EAEd,IAAK,MAAMN,KAASgB,EAAMH,UAAY,GACpCC,EAASxC,YAAYtL,KAAKoL,uBAAuB4B,IAGnD,OAAOc,CACT,CAEA,IAAK,UAAW,CACd,MAAMG,EAAMV,SAASG,cAAc,OAEnC,OADAO,EAAI5C,UAAaiC,EAAcnF,KACxB8F,CACT,CAEA,QAEE,OADA/K,QAAQgI,KAAK,iCAAkCoC,GACxCC,SAASC,eAAe,IAErC,CAKA,WAAAU,CAAYjE,EAA0B9B,GACpC8B,EAAYoB,UAAYlD,EACxBnI,KAAK4E,IAAI,uBAAwB,CAAEuD,QACrC,CAKQ,GAAAvD,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,QC9QW8J,EAKX,WAAApO,CAAY8D,EAAsC,IAChD7D,KAAKoO,OAAS,IAAInM,IAClBjC,KAAKqO,YAAc,IAAIpM,IACvBjC,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,mBAAAiK,CAAoBpG,EAAqBqG,EAA+B,IACtEvO,KAAKoO,OAAO9L,IAAI4F,EAAa,IAAKqG,IAClCvO,KAAKqO,YAAY/L,IAAI4F,EAAa,IAAIjG,KACtCjC,KAAK4E,IAAI,8BAA+B,CAAEsD,cAAaqG,gBACzD,CAKA,QAAAC,CAAStG,EAAqBW,GAC5B,MAAM4F,EAAiBzO,KAAKoO,OAAO7L,IAAI2F,GACvC,OAAOuG,EAAiBA,EAAe5F,QAAO6F,CAChD,CAKA,QAAAC,CAASzG,EAAqBW,EAAaC,GACzC,MAAM2F,EAAiBzO,KAAKoO,OAAO7L,IAAI2F,GAEvC,IAAKuG,EAEH,YADAvL,QAAQgI,KAAK,wBAAwBhD,qBAKvC,MAAM0G,EAAWH,EAAe5F,GAChC4F,EAAe5F,GAAOC,EAEtB9I,KAAK4E,IAAI,gBAAiB,CAAEsD,cAAaW,MAAK+F,WAAUrF,SAAUT,IAGlE9I,KAAK6O,kBAAkB3G,EAAaW,EAAKC,EAAO8F,EAClD,CAKA,SAAAE,CAAU5G,EAAqBW,EAAakG,GAC1C,MAAMC,EAAuBhP,KAAKqO,YAAY9L,IAAI2F,GAElD,OAAK8G,GAKAA,EAAqB3M,IAAIwG,IAC5BmG,EAAqB1M,IAAIuG,EAAK,IAAIgB,KAGpCmF,EAAqBzM,IAAIsG,GAAMiB,IAAIiF,GACnC/O,KAAK4E,IAAI,sBAAuB,CAAEsD,cAAaW,QAGxC,KACLmG,EAAqBzM,IAAIsG,IAAMzF,OAAO2L,GACtC/O,KAAK4E,IAAI,0BAA2B,CAAEsD,cAAaW,WAdnD3F,QAAQgI,KAAK,wBAAwBhD,qBAC9B,OAeX,CAKQ,iBAAA2G,CAAkB3G,EAAqBW,EAAaC,EAAY8F,GACtE,MAAMI,EAAuBhP,KAAKqO,YAAY9L,IAAI2F,GAElD,IAAK8G,EACH,OAGF,MAAMC,EAAiBD,EAAqBzM,IAAIsG,GAE5CoG,GACFA,EAAehM,QAAQ8L,IACrB,IACEA,EAASjG,EAAO8F,EAClB,CAAE,MAAO5N,GACPkC,QAAQlC,MAAM,wCAAyCA,EACzD,GAGN,CAKA,iBAAAkO,CAAkBhH,GAChB,OAAOlI,KAAKoO,OAAO7L,IAAI2F,EACzB,CAKA,WAAAiH,CAAYjH,EAAqBkH,GAC/B,IAAK,MAAOvG,EAAKC,KAAU6D,OAAOC,QAAQwC,GACxCpP,KAAK2O,SAASzG,EAAaW,EAAKC,EAEpC,CAKA,cAAAuG,CAAenH,GACblI,KAAKoO,OAAOhL,OAAO8E,GACnBlI,KAAKqO,YAAYjL,OAAO8E,GACxBlI,KAAK4E,IAAI,0BAA2B,CAAEsD,eACxC,CAKA,aAAAoH,CACEpH,EACAW,EACA+C,EACA2D,EAAkD,eAGlD,MAAMC,EAAexP,KAAKwO,SAAStG,EAAaW,GAMhD,YALqB6F,IAAjBc,GACFxP,KAAKyP,cAAc7D,EAAS2D,EAAUC,GAIjCxP,KAAK8O,UAAU5G,EAAaW,EAAMC,IACvC9I,KAAKyP,cAAc7D,EAAS2D,EAAUzG,IAE1C,CAKQ,aAAA2G,CAAc7D,EAAsB2D,EAAkBzG,GAC5D,OAAQyG,GACN,IAAK,SACC3D,aAAmB8D,kBACnB9D,aAAmB+D,qBACnB/D,aAAmBgE,qBACrBhE,EAAQ9C,MAAQ+G,OAAO/G,IAEzB,MACF,IAAK,cACH8C,EAAQS,YAAcwD,OAAO/G,GAC7B,MACF,IAAK,YACH8C,EAAQP,UAAYwE,OAAO/G,GAGjC,CAKA,SAAAgH,CAAU5H,EAAqBW,EAAakH,GAE1C,MAAMP,EAAexP,KAAKwO,SAAStG,EAAaW,QAC3B6F,IAAjBc,IACFO,EAAMjH,MAAQ+G,OAAOL,IAIvB,MAAMQ,EAAgBC,IACpB,MAAMxP,EAASwP,EAAExP,OACjBT,KAAK2O,SAASzG,EAAaW,EAAKpI,EAAOqI,QAGzCiH,EAAMG,iBAAiB,QAASF,GAGhC,MAAMG,EAAcnQ,KAAK8O,UAAU5G,EAAaW,EAAMC,IAChDiH,EAAMjH,QAAU+G,OAAO/G,KACzBiH,EAAMjH,MAAQ+G,OAAO/G,MAKzB,MAAO,KACLiH,EAAMK,oBAAoB,QAASJ,GACnCG,IAEJ,CAKQ,GAAAvL,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,QCzMWgM,EASX,WAAAtQ,CACEkK,EACAqG,EACAzM,EAKI,CAAA,GAEJ7D,KAAKiK,YAAcA,EACnBjK,KAAKsQ,uBAAyBA,EAC9BtQ,KAAKqE,aAAeR,EAAQQ,eAAgB,EAC5CrE,KAAKuQ,UAAY1M,EAAQ0M,UACzBvQ,KAAKwQ,WAAa3M,EAAQ2M,WAC1BxQ,KAAKyQ,iBAAmB5M,EAAQ4M,iBAChCzQ,KAAK0Q,eAAiB,IAAIzO,IAE1BjC,KAAK2Q,sBACP,CAKQ,oBAAAA,GACN,MAAMC,EAAa,CACjB,QACA,WACA,QACA,SACA,SACA,QACA,OACA,UACA,QACA,WACA,aACA,aACA,YACA,YAGF,IAAK,MAAMC,KAAaD,EAAY,CAClC,MAAME,EAAW9Q,KAAK+Q,oBAAoBF,GAC1C7Q,KAAK0Q,eAAepO,IAAIuO,EAAWC,GACnC9Q,KAAKiK,YAAYiG,iBAAiBW,EAAWC,GAAU,EACzD,CAEA9Q,KAAK4E,IAAI,kCAAmC,CAAEgM,cAChD,CAKQ,mBAAAG,CAAoBF,GAC1B,OAAOvJ,MAAOnF,IACZ,MAAM1B,EAAS0B,EAAM1B,OAGfuQ,EAAiBhR,KAAKiR,mBAAmBxQ,EAAQoQ,GAEvD,IAAKG,EACH,OAIF,MAAM5O,EAAUpC,KAAKkR,gBAAgBF,EAAgBH,GAEhDzO,IAKa,WAAdyO,GACF1O,EAAMgP,iBAGRnR,KAAK4E,IAAI,kBAAmB,CAAEiM,YAAWzO,UAAS3B,iBAG5CT,KAAKoR,eAAehP,EAASD,EAAO6O,IAE9C,CAKQ,kBAAAC,CAAmBrF,EAA6BiF,GACtD,IAAIxD,EAAUzB,EAEd,KAAOyB,GAAWA,IAAYrN,KAAKiK,aAAa,CAC9C,MAAMoH,EAAW,UAAUR,IACrBS,EAAiB,KAAKT,IAE5B,GAAIxD,EAAQkE,aAAaF,IAAahE,EAAQkE,aAAaD,GACzD,OAAOjE,EAGTA,EAAUA,EAAQmE,aACpB,CAEA,OAAO,IACT,CAKQ,eAAAN,CAAgBtF,EAAsBiF,GAC5C,MAAMQ,EAAW,UAAUR,IACrBS,EAAiB,KAAKT,IAEtBY,EAAa7F,EAAQsB,aAAamE,IAAazF,EAAQsB,aAAaoE,GAE1E,IAAKG,EACH,OAAO,KAKT,MAAMC,EAAQD,EAAWE,MAAM,KACzBzM,EAAawM,EAAM,GACnBhR,EAAOgR,EAAMlG,MAAM,GAGnBtD,EAAclI,KAAK4R,gBAAgBhG,GAEzC,OAAK1D,EAKE,CACLA,cACAhD,aACAxE,SAPAwC,QAAQgI,KAAK,sDAAuDuG,GAC7D,KAQX,CAKQ,eAAAG,CAAgBhG,GACtB,IAAIyB,EAAUzB,EAEd,KAAOyB,GAAWA,IAAYrN,KAAKiK,aAAa,CAC9C,MAAM/B,EAAcmF,EAAQH,aAAa,8BACzC,GAAIhF,EACF,OAAOA,EAGTmF,EAAUA,EAAQmE,aACpB,CAIA,OADwBxR,KAAKiK,YAAYiD,aAAa,6BAExD,CAKQ,oBAAMkE,CAAehP,EAAuBD,EAAcyJ,GAChE,MAAMiG,EAAYC,YAAYC,MAE9B,IAEE,MAAMC,EAAe,CAAA,EA2BrB,GAxBI5P,EAAQ1B,KAAKL,OAAS,IACxB2R,EAAQtR,KAAO0B,EAAQ1B,MAIrByB,aAAiB8P,aACnBD,EAAQE,MAAQ,CACdC,QAAShQ,EAAMgQ,QACfC,QAASjQ,EAAMiQ,QACfC,OAAQlQ,EAAMkQ,SAIdlQ,aAAiBmQ,gBACnBN,EAAQO,SAAW,CACjB1J,IAAK1G,EAAM0G,IACX5B,KAAM9E,EAAM8E,KACZuL,QAASrQ,EAAMqQ,QACfC,SAAUtQ,EAAMsQ,SAChBC,OAAQvQ,EAAMuQ,SAKC,UAAfvQ,EAAMxB,MAAmC,WAAfwB,EAAMxB,KAAmB,CACrD,MAAMF,EAAS0B,EAAM1B,OACrBuR,EAAQlJ,MAAQrI,EAAOqI,KACzB,CAGA,GAAI9I,KAAKuQ,WAAavQ,KAAKwQ,WAAY,CAMrC,MAAMmC,EAAc3S,KAAK4S,aAAaxQ,EAAQ8F,YAAa9F,EAAQ8C,YAEnE,GAAIyN,EAAa,CAEf,MAAME,EAAmB7S,KAAK8S,qBAAqB1Q,EAAQ8F,aAC3D,GAAI2K,EAAkB,CACpB7S,KAAKwQ,WAAWxG,aAAa6I,EAAkBF,EAAYvK,SAE3D,MAAM2K,EAAUjB,YAAYC,MAAQF,EAuBpC,OApBI7R,KAAKyQ,kBACPzQ,KAAKyQ,iBAAiBuC,SAAS,CAC7B9K,YAAa9F,EAAQ8F,YACrBK,OAAQoK,EAAYpK,OACpBwK,UACA1K,WAAYsK,EAAYtK,WACxB4K,WAAYN,EAAYvK,QAAQ/H,SAIpCL,KAAK4E,IAAI,yBAAyB+N,EAAYvK,QAAQ/H,qBAAqB0S,EAAQzK,QAAQ,OAAQ,CACjGlG,UACAiG,YAAsC,IAAzBsK,EAAYtK,YAAkBC,QAAQ,GAAK,WAI1DtI,KAAKsQ,uBAAuBlO,EAAQ8F,YAAa9F,EAAQ8C,WAAY8M,GAASkB,MAAMC,IAClFjQ,QAAQlC,MAAM,oDAAqDmS,IAIvE,CACF,CACF,OAGMnT,KAAKsQ,uBAAuBlO,EAAQ8F,YAAa9F,EAAQ8C,WAAY8M,GAE3E,MAAMe,EAAUjB,YAAYC,MAAQF,EAGhC7R,KAAKyQ,kBACPzQ,KAAKyQ,iBAAiB2C,UAAU,CAC9BlL,YAAa9F,EAAQ8F,YACrBhD,WAAY9C,EAAQ8C,WACpB6N,UACAE,WAAY,IAIhBjT,KAAK4E,IAAI,mCAAmCmO,EAAQzK,QAAQ,OAAQ,CAAElG,UAAS4P,WACjF,CAAE,MAAOhR,GACPkC,QAAQlC,MAAM,sCAAuCoB,EAASpB,EAChE,CACF,CAMQ,YAAA4R,CAAa1K,EAAqBhD,GACxC,OAAKlF,KAAKuQ,UAQH,IACT,CAKQ,oBAAAuC,CAAqB5K,GAE3B,OADgBlI,KAAKiK,YAAYoJ,cAAc,gCAAgCnL,MAEjF,CAKA,OAAAoL,GACE,IAAK,MAAOzC,EAAWC,KAAa9Q,KAAK0Q,eAAe9D,UACtD5M,KAAKiK,YAAYmG,oBAAoBS,EAAWC,GAAU,GAE5D9Q,KAAK0Q,eAAerN,QACpBrD,KAAK4E,IAAI,6BACX,CAKQ,GAAAA,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,QC1TWkP,EAKX,WAAAxT,CAAYyT,EAAiC3P,EAAsC,IACjF7D,KAAKwT,YAAcA,EACnBxT,KAAKyT,WAAa,IAAIxR,IACtBjC,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,gBAAAqP,CAAiBxL,EAAqB+B,GACpCjK,KAAK4E,IAAI,sBAAuB,CAAEsD,gBAIlC,MAAM2K,EAAmB5I,EAAY0J,kBACrC,IAAKd,EAEH,YADA3P,QAAQlC,MAAM,2DAKhB,MAAM4S,EAA8B,CAClC1L,cACA0D,QAASiH,EACTW,YAAa,CAAA,EACbK,YAAa,CAAA,GAGf7T,KAAKyT,WAAWnR,IAAI4F,EAAa0L,GAGjC3J,EAAY4C,aAAa,6BAA8B3E,GAGvDlI,KAAKwT,YAAYlF,oBAAoBpG,GAGrClI,KAAK8T,mBAAmB5L,EAAa+B,GAGrCjK,KAAK+T,kBAAkB7L,EAAa+B,GAEpCjK,KAAK4E,IAAI,qBAAsB,CAAEsD,cAAa0L,YAChD,CAKQ,kBAAAE,CAAmB5L,EAAqB+B,GAC9C,MAAM+J,EAAc/J,EAAYgK,iBAAiB,gCAEjDjU,KAAK4E,IAAI,qBAAsB,CAAEsF,MAAO8J,EAAY3T,SAEpD2T,EAAY/Q,QAASiR,IACnB,MAAMtI,EAAUsI,EAGVC,EAAYvI,EAAQsB,aAAa,cAEvC,GAAIiH,EAAW,CAEb,MAAM3E,EAAexP,KAAKoU,gBAAgBxI,GAC1C5L,KAAKwT,YAAY7E,SAASzG,EAAaiM,EAAW3E,IAG9C5D,aAAmB8D,kBACnB9D,aAAmB+D,qBACnB/D,aAAmBgE,oBACrB5P,KAAKwT,YAAY1D,UAAU5H,EAAaiM,EAAWvI,GAGrD5L,KAAK4E,IAAI,uBAAwB,CAAEgH,UAASuI,YAAW3E,gBACzD,GAEJ,CAKQ,iBAAAuE,CAAkB7L,EAAqB+B,GAC7C,MAAMoK,EAAgBpK,EAAYgK,iBAAiB,eAEnDjU,KAAK4E,IAAI,uBAAwB,CAAEsF,MAAOmK,EAAchU,SAExDgU,EAAcpR,QAASqR,IACrB,MAAM1I,EAAU0I,EACVC,EAAU3I,EAAQsB,aAAa,aAErC,IAAKqH,EACH,OAIF,MAAMC,EAAgBxU,KAAKyU,gBAAgB7I,GACrC8I,EAAe1U,KAAK2U,sBAAsB/I,GAE5C4I,GAEFxU,KAAKwT,YAAYlE,cAAcpH,EAAaqM,EAAS3I,EAAS8I,GAC9D1U,KAAK4E,IAAI,wBAAyB,CAAEgH,UAAS2I,UAASG,kBAGtD1U,KAAK4E,IAAI,0CAA2C,CAAEgH,UAAS2I,aAGrE,CAKQ,eAAAE,CAAgB7I,GACtB,IAAIyB,EAA8BzB,EAElC,KAAOyB,GAAS,CACd,GAAIA,EAAQkE,aAAa,8BACvB,OAAO,EAET,GAAIlE,EAAQkE,aAAa,8BACvB,OAAO,EAETlE,EAAUA,EAAQmE,aACpB,CAEA,OAAO,CACT,CAKQ,qBAAAmD,CAAsB/I,GAC5B,OAAIA,aAAmB8D,kBACnB9D,aAAmB+D,qBACnB/D,aAAmBgE,kBACd,QAGLhE,EAAQ2F,aAAa,kBAChB,YAGF,aACT,CAKQ,eAAA6C,CAAgBxI,GACtB,OAAIA,aAAmB8D,iBACA,aAAjB9D,EAAQjL,KACHiL,EAAQgJ,QACW,WAAjBhJ,EAAQjL,KACViL,EAAQiJ,eAAiB,EAEzBjJ,EAAQ9C,MAIf8C,aAAmB+D,qBAInB/D,aAAmBgE,kBAHdhE,EAAQ9C,MAOV8C,EAAQS,aAAe,EAChC,CAKA,kBAAAyI,CAAmB5M,GACAlI,KAAKyT,WAAWlR,IAAI2F,KAOrClI,KAAKwT,YAAYnE,eAAenH,GAGhClI,KAAKyT,WAAWrQ,OAAO8E,GAEvBlI,KAAK4E,IAAI,uBAAwB,CAAEsD,gBACrC,CAKA,YAAA6M,CAAa7M,GACX,OAAOlI,KAAKyT,WAAWlR,IAAI2F,EAC7B,CAKA,iBAAA8M,CAAkB9M,EAAqBW,EAAaC,GAClD,MAAM8K,EAAW5T,KAAKyT,WAAWlR,IAAI2F,GAEjC0L,IACFA,EAASC,YAAYhL,GAAOC,EAC5B9I,KAAK4E,IAAI,uBAAwB,CAAEsD,cAAaW,MAAKC,UAEzD,CAKA,UAAAmM,GACE,MAAMxB,EAAalG,SAAS0G,iBAAiB,6BAE7CjU,KAAK4E,IAAI,2BAA4B,CAAEsF,MAAOuJ,EAAWpT,SAEzDoT,EAAWxQ,QAAS2I,IAClB,MAAM1D,EAAc0D,EAAQsB,aAAa,2BACrChF,GACFlI,KAAK0T,iBAAiBxL,EAAa0D,IAGzC,CAKQ,GAAAhH,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,QCpOW6Q,EAYX,qBAAOC,CAAeC,EAAkBC,GACtC,IAAItO,EAASqO,EASb,OANAC,EAAOpS,QAAQ,CAACqS,EAAO3S,KACrB,MAAM4S,EAAc,IAAI5S,KAClBmG,EAAQ9I,KAAKwV,YAAYF,GAC/BvO,EAASA,EAAO0O,QAAQF,EAAazM,KAGhC/B,CACT,CAsBA,0BAAO2O,CACLC,EACAC,GAGA,GAAID,EAAcE,2BAAkEnH,IAA1CiH,EAAcG,wBAAuC,CAC7F,MAAMC,EAAeJ,EAAcG,wBAC7BE,EAAmBL,EAAcM,SAASF,GAG1CG,EAA2C,iBAArBF,GAAiC,aAAcA,EACvEA,EAAiB7M,SACjB6M,EACEG,EAAiBP,EAAYM,GAG7BE,EAAsBT,EAAcE,qBAAqBhG,OAAOsG,IAEtE,QAA4BzH,IAAxB0H,EAAmC,CAErC,IAAKA,EAAoBC,SAAS,KAChC,OAAOD,EAKT,MAAMf,EAASM,EAAcM,SAASK,IAAIC,IACxC,GAAuB,iBAAZA,GAAwB,aAAcA,EAAS,CACxD,MAAMzN,EAAQ8M,EAAYW,EAAQpN,UAClC,OAAOoN,EAAQC,UAAYxW,KAAKyW,eAAe3N,EAAOyN,EAAQC,WAAa1N,CAC7E,CACA,OAAO8M,EAAYW,KAErB,OAAOvW,KAAKmV,eAAeiB,EAAqBf,EAClD,CACF,CAGA,MAAMA,EAASM,EAAcM,SAASK,IAAI,CAACC,EAAS5T,KAElD,GAAuB,iBAAZ4T,GAAwB,aAAcA,EAAS,CACxD,MAAMzN,EAAQ8M,EAAYW,EAAQpN,UAGlC,OAAIoN,EAAQC,UACHxW,KAAKyW,eAAe3N,EAAOyN,EAAQC,WAGrC1N,CACT,CAGA,OAAO8M,EAAYW,KAGrB,OAAOvW,KAAKmV,eAAeQ,EAAcP,SAAUC,EACrD,CAkBA,uBAAOqB,CACLvM,EACAyL,GAEA,OAAQzL,EAAMxJ,MACZ,IAAK,qBAAsB,CACzB,MAAMkK,EAAU7K,KAAK0V,oBAAoBvL,EAAMwL,cAAeC,GAC9D,MAAO,CACLjV,KAAM,aACN4J,KAAMJ,EAAMI,KACZM,UAEJ,CAEA,IAAK,sBAAuB,CAC1B,MAAM/B,EAAQ9I,KAAK0V,oBAAoBvL,EAAMwL,cAAeC,GAC5D,MAAO,CACLjV,KAAM,cACN4J,KAAMJ,EAAMI,KACZQ,MAAO,CAAE,CAACZ,EAAMwM,UAAW7N,GAE/B,CAEA,IAAK,qBAAsB,CAEzB,MAAM8N,EAAS5W,KAAK6W,mBAAmB1M,EAAM2M,aAAclB,GAG3D,OAAO5V,KAAK+W,qBAAqB5M,EAAMI,KAAMqM,EAC/C,CAEA,QAEE,OAAOzM,EAEb,CASA,yBAAO6M,CACL5O,EACAwN,GAEA,MAAMqB,EAAwB,GAE9B,IAAK,MAAM9M,KAAS/B,EAAS,CAC3B,MAAMrB,EAAS/G,KAAK0W,iBAAiBvM,EAAOyL,GAExCpS,MAAM0T,QAAQnQ,GAEhBkQ,EAAazU,QAAQuE,GAErBkQ,EAAazU,KAAKuE,EAEtB,CAEA,OAAOkQ,CACT,CAeA,qBAAOR,CAAe3N,EAAY0N,GAIhC,GAAIA,EAAUjP,WAAW,YAAa,CACpC,MAAM4P,EAAWC,SAASZ,EAAUa,MAAM,SAAS,IAAM,KACzD,OAAOC,OAAOxO,GAAOR,QAAQ6O,EAC/B,CAGA,GAAIX,EAAUjP,WAAW,MAAO,CAC9B,MAAMgQ,EAAaC,WAAWhB,EAAUiB,UAAU,IAClD,OAAOH,OAAOxO,GAASyO,CACzB,CAGA,GAAIf,EAAUjP,WAAW,MAAO,CAC9B,MAAMmQ,EAAUF,WAAWhB,EAAUiB,UAAU,IAC/C,OAAOH,OAAOxO,GAAS4O,CACzB,CAGA,GAAIlB,EAAUjP,WAAW,MAAO,CAC9B,MAAMoQ,EAASH,WAAWhB,EAAUiB,UAAU,IAC9C,OAAOH,OAAOxO,GAAS6O,CACzB,CAGA,GAAInB,EAAUjP,WAAW,MAAO,CAC9B,MAAMqQ,EAAaJ,WAAWhB,EAAUiB,UAAU,IAClD,OAAOH,OAAOxO,GAAS8O,CACzB,CAGA,MAAkB,kBAAdpB,GAA+C,gBAAdA,EAC5B3G,OAAO/G,GAAO+O,cAIL,kBAAdrB,GAA+C,gBAAdA,EAC5B3G,OAAO/G,GAAO8E,cAIL,WAAd4I,GAAwC,SAAdA,EACrB3G,OAAO/G,GAAOgP,OAIL,MAAdtB,GACM1N,GAIV5F,QAAQgI,KAAK,yCAAyCsL,KAC/C1N,EACT,CAQQ,kBAAO0M,CAAY1M,GACzB,OAAIA,QACK,GAGY,iBAAVA,EACFA,EAGY,iBAAVA,GAAuC,kBAAVA,EAC/B+G,OAAO/G,GAGZtF,MAAM0T,QAAQpO,GACTA,EAAMwN,IAAIyB,GAAK/X,KAAKwV,YAAYuC,IAAIC,KAAK,MAG7B,iBAAVlP,EAEF3H,KAAKK,UAAUsH,GAGjB+G,OAAO/G,EAChB,CAQA,sBAAOmP,CAAgB9N,GACrB,MAAsB,uBAAfA,EAAMxJ,MAAgD,wBAAfwJ,EAAMxJ,IACtD,CAQA,sBAAOuX,CAAgB/N,GACrB,MAAmB,uBAAfA,EAAMxJ,MAAgD,wBAAfwJ,EAAMxJ,KAExCwJ,EAAMwL,cAAcM,SAASK,IAAIC,GACf,iBAAZA,GAAwB,aAAcA,EACxCA,EAAQpN,SAEVoN,GAGJ,EACT,CASA,uBAAO4B,CACLxC,EACAC,GAEA,OAAOD,EAAcM,SAASmC,MAAM7B,IACH,iBAAZA,GAAwB,aAAcA,EACrDA,EAAQpN,SACRoN,KACUX,EAElB,CASA,yBAAOyC,CACL1C,EACAC,GAEA,OAAOD,EAAcM,SAClBqC,OAAO/B,MACyB,iBAAZA,GAAwB,aAAcA,EACrDA,EAAQpN,SACRoN,KACYX,IAEjBU,IAAIC,GACoB,iBAAZA,GAAwB,aAAcA,EACxCA,EAAQpN,SAEVoN,EAEb,CAwBA,yBAAOM,CACLC,EACAlB,GAEA,MAAM2C,EAAQ3C,EAAYkB,EAAa0B,eAEvC,OAAKhV,MAAM0T,QAAQqB,GAQZA,EAAMjC,IAAI,CAACmC,EAAM9V,KAEtB,MAAM+V,EAAY,IACb9C,EACH6C,OACA9V,WACImU,EAAa6B,UAAY,CAAE,CAAC7B,EAAa6B,WAAYhW,GAAU,CAAA,GAI/DiW,EAAiB5Y,KAAK6Y,iBAAiBH,EAAWD,GAGxD,OAAOzY,KAAK8Y,mBAAmBhC,EAAaiC,cAAeH,MApB3D1V,QAAQgI,KACN,0CAA0C4L,EAAa0B,uBACvDD,GAEK,GAkBX,CAaQ,uBAAOM,CACbH,EACAD,GAEA,MAAMO,EAAY,IAAKN,GAEvB,GAAoB,iBAATD,GAA8B,OAATA,IAAkBjV,MAAM0T,QAAQuB,GAE9D,IAAK,MAAM5P,KAAO4P,EAChBO,EAAU,QAAQnQ,KAAS4P,EAAK5P,GAIpC,OAAOmQ,CACT,CASQ,yBAAOF,CACbG,EACArD,GAEA,OAAQqD,EAAatY,MACnB,IAAK,OAEH,MAAO,CACLA,KAAM,OACNkK,QAHc7K,KAAK0V,oBAAoBuD,EAAaC,eAAgBtD,IAOxE,IAAK,UAAW,CAEd,MAAM7K,EAAgC,CAAA,EACtC,GAAIkO,EAAaE,gBACf,IAAK,MAAOxC,EAAUyC,KAAiBzM,OAAOC,QAAQqM,EAAaE,iBACjEpO,EAAM4L,GAAY3W,KAAK0V,oBAAoB0D,EAAcxD,GAK7D,MAAM/H,GAAYoL,EAAaI,oBAAsB,IAAI/C,IAAIgD,GAC3DtZ,KAAK8Y,mBAAmBQ,EAAe1D,IAInC/M,EAAMoQ,EAAaM,YACrB1J,OAAO+F,EAAYqD,EAAaM,mBAChC7K,EAEJ,MAAO,CACL/N,KAAM,UACNgN,IAAKsL,EAAatL,IAClB5C,QACA8C,WACAhF,MAEJ,CAEA,QACE,MAAM,IAAIxH,MAAM,+BAAgC4X,EAAqBtY,QAE3E,CAUQ,2BAAOoW,CACbxL,EACAqL,GAKA,OAAOA,EAAON,IAAI,CAAC7L,EAAM9H,KAAK,CAC5BhC,KAAM,SACN4J,KAAM,IAAIgB,EAAY5I,GACtB8H,SAEJ,QCxfW+O,EAKX,WAAAzZ,CAAY8D,EAAsC,IAJ1C7D,KAAAyZ,MAAiC,IAAIxX,IAErCjC,KAAA0Z,WAAqB,IAG3B1Z,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,SAAAsV,CAAUzY,GAOR,MAAM2H,EAAM,GAAG3H,EAAKgH,eAAehH,EAAKqH,SAGlCqR,EAAa1Y,EAAKkH,QAAQyR,KAAK1P,GAAS+K,EAAiB+C,gBAAgB9N,IAE/EnK,KAAKyZ,MAAMnX,IAAIuG,EAAK,IACf3H,EACH4Y,SAAUC,KAAKhI,MACf6H,eAGF,MAAMI,EAAYJ,EAAa,cAAgB,cAC/C5Z,KAAK4E,IAAI,GAAGoV,WAAmB9Y,EAAKqH,sBAAsBrH,EAAKgH,cAAehH,GAG9ElB,KAAKia,mBACP,CAMA,SAAAC,CAAUhS,EAAqBiS,GAM7B,MAAMC,EAAiB5W,MAAMC,KAAKzD,KAAKyZ,MAAM7M,WAC1C0L,OAAO,EAAEzP,KAASA,EAAItB,WAAW,GAAGW,OACpCoO,IAAI,EAAC,CAAG+D,KAAUA,GAGrB,IAAK,MAAMA,KAAQD,EACjB,GAAIpa,KAAKsa,aAAaD,EAAKE,eAAgBJ,GAAe,CACxD,MAAMH,EAAYK,EAAKT,WAAa,cAAgB,cACpD5Z,KAAK4E,IAAI,GAAGoV,WAAmBK,EAAK9R,mBAAoB,CAAE8R,OAAMF,iBAGhE,MAAMtR,EAAM,GAAGX,KAAemS,EAAK9R,SACnCvI,KAAKyZ,MAAMrW,OAAOyF,GAGlB,MAAM2R,EAAsBtF,EAAiB8B,mBAC3CqD,EAAKjS,QACL+R,GAGF,MAAO,CACL5R,OAAQ8R,EAAK9R,OACbH,QAASoS,EACTnS,WAAYgS,EAAKhS,WAErB,CAGF,OAAO,IACT,CAKQ,YAAAiS,CAAaG,EAAgCC,GAEnD,IAAK,MAAO7R,EAAK8R,KAAmBhO,OAAOC,QAAQ6N,GAAY,CAC7D,KAAM5R,KAAO6R,GACX,OAAO,EAIT,GAAIvZ,KAAKK,UAAUkZ,EAAO7R,MAAU1H,KAAKK,UAAUmZ,GACjD,OAAO,CAEX,CAEA,OAAO,CACT,CAKQ,iBAAAV,GACN,MAAMlI,EAAMgI,KAAKhI,MACX6I,EAAsB,GAE5B,IAAK,MAAO/R,EAAKwR,KAASra,KAAKyZ,MAAM7M,UAC/BmF,EAAMsI,EAAKP,SAAW9Z,KAAK0Z,YAC7BkB,EAAUpY,KAAKqG,GAInB,GAAI+R,EAAUva,OAAS,EAAG,CACxBL,KAAK4E,IAAI,YAAYgW,EAAUva,uBAAwBua,GACvD,IAAK,MAAM/R,KAAO+R,EAChB5a,KAAKyZ,MAAMrW,OAAOyF,EAEtB,CACF,CAKA,cAAAwG,CAAenH,GACb,MAAM2S,EAAerX,MAAMC,KAAKzD,KAAKyZ,MAAM/V,QACxC4U,OAAOzP,GAAOA,EAAItB,WAAW,GAAGW,OAEnC,IAAK,MAAMW,KAAOgS,EAChB7a,KAAKyZ,MAAMrW,OAAOyF,GAGhBgS,EAAaxa,OAAS,GACxBL,KAAK4E,IAAI,WAAWiW,EAAaxa,gCAAgC6H,IAErE,CAKA,QAAA4S,GACE9a,KAAKyZ,MAAMpW,QACXrD,KAAK4E,IAAI,oBACX,CAKA,QAAAmW,GACE,MAAMC,EAAWxX,MAAMC,KAAKzD,KAAKyZ,MAAMwB,UACjCC,EAAgBF,EAAS1C,OAAO6C,GAAKA,EAAEvB,YACvCwB,EAAgBJ,EAAS1C,OAAO6C,IAAMA,EAAEvB,YAE9C,MAAO,CACLyB,WAAYrb,KAAKyZ,MAAM6B,KACvBJ,cAAeA,EAAc7a,OAC7B+a,cAAeA,EAAc/a,OAC7Bkb,mBAAoBvb,KAAKyZ,MAAM6B,KAAO,EAClCE,KAAKC,MAAOP,EAAc7a,OAASL,KAAKyZ,MAAM6B,KAAQ,KACtD,EACJI,iBAAkBV,EAASW,OAAO,CAACC,EAAKvB,KACtCuB,EAAIvB,EAAKnS,cAAgB0T,EAAIvB,EAAKnS,cAAgB,GAAK,EAChD0T,GACN,CAAA,GAEP,CAEQ,GAAAhX,CAAIrD,KAAoBb,GAC1BV,KAAKqE,YAGX,QCzLWwX,EAGX,WAAA9b,CAAY8D,EAAsC,IAChD7D,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,kBAAAyX,CAAmB5a,GAMjBlB,KAAK+b,YAAY,CACfpb,KAAM,+BACNO,SAGFlB,KAAK4E,IAAI,sBAAuB1D,EAClC,CAKA,QAAA8R,CAAS9R,GAOPlB,KAAK+b,YAAY,CACfpb,KAAM,qBACNO,KAAM,IACDA,EACH8R,UAAU,EACVgJ,UAAW9a,EAAK6R,WAIpB/S,KAAK4E,IAAI,eAAgB1D,EAC3B,CAKA,SAAAkS,CAAUlS,GAMRlB,KAAK+b,YAAY,CACfpb,KAAM,sBACNO,KAAM,IACDA,EACH8R,UAAU,EACVgJ,UAAW9a,EAAK6R,QAChBkJ,qBAAsB,KAI1Bjc,KAAK4E,IAAI,gBAAiB1D,EAC5B,CAKA,iBAAAgb,CAAkBhb,GAIhBlB,KAAK+b,YAAY,CACfpb,KAAM,sBACNO,SAGFlB,KAAK4E,IAAI,gDAAiD1D,EAC5D,CAKQ,WAAA6a,CAAYxa,GAEdkG,OAAOgE,QAAUhE,OAAOgE,SAAWhE,QACrCA,OAAOgE,OAAOsQ,YAAYxa,EAAS,KAIrCkG,OAAO0U,cAAc,IAAIC,YAAY7a,EAAQZ,KAAM,CAAE0b,OAAQ9a,EAAQL,OACvE,CAEQ,GAAA0D,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,ECtEF,MAAMiY,EAA2C,CAAA,EAKjD,IAAIjY,GAAe,EAMnB,SAASO,EAAIrD,EAAiBL,GAI9B,CA6DM,SAAUqb,EAAuBrU,GACrC,MAAMsU,EAAWF,EAAiBpU,GAElC,IAAKsU,EAEH,MAAO,CAAA,EAGT,MAAMzV,EAA8B,CAAA,EAEpC,IAAK,MAAO0V,EAASC,KAAa/P,OAAOC,QAAQ4P,GAC/C,IACE,MAAM1T,EAAQ4T,EAASC,YACvBD,EAASE,UAAY9T,EACrB/B,EAAO0V,GAAW3T,CACpB,CAAE,MAAO9H,GACPkC,QAAQlC,MAAM,qCAAqCyb,MAAazb,GAChE+F,EAAO0V,QAAW/N,CACpB,CAIF,OAAO3H,CACT,CASM,SAAU8V,EACd3U,EACA4U,GAEA,MAAMN,EAAWF,EAAiBpU,GAElC,IAAKsU,EACH,MAAO,CAAA,EAGT,MAAMzV,EAA8B,CAAA,EAEpC,IAAK,MAAO0V,EAASC,KAAa/P,OAAOC,QAAQ4P,GAK/C,IAHyBE,EAASK,cACXL,EAASK,aAAa1G,SAASyG,GAGpD,IACE,MAAMhU,EAAQ4T,EAASC,YACvBD,EAASE,UAAY9T,EACrB/B,EAAO0V,GAAW3T,EAClBlE,GACF,CAAE,MAAO5D,GACPkC,QAAQlC,MAAM,uCAAuCyb,MAAazb,GAClE+F,EAAO0V,QAAW/N,CACpB,CAIJ,OAAO3H,CACT,CAyCM,SAAUiW,EAAkB9U,GAChC,QAASoU,EAAiBpU,IACnByE,OAAOjJ,KAAK4Y,EAAiBpU,IAAc7H,OAAS,CAC7D,OCrKa4c,EAAb,WAAAld,GACUC,KAAAkd,UAAmC,IAAIjb,IACvCjC,KAAAmd,gBAAiD,IAAIlb,GAyN/D,CApNE,eAAAmb,CAAgBlV,EAAqBmV,GACI1Q,OAAOjJ,KAAK2Z,EAAYH,WAAW7c,OAE1E,IAAK,MAAOid,EAAUlI,KAAazI,OAAOC,QAAQyQ,EAAYH,WAAY,CACxE,MAAMrU,EAAM,GAAGX,KAAeoV,IAC9Btd,KAAKkd,UAAU5a,IAAIuG,EAAKuM,EAC1B,CAGKpV,KAAKmd,gBAAgB9a,IAAI6F,IAC5BlI,KAAKmd,gBAAgB7a,IAAI4F,EAAa,IAAIjG,IAE9C,CAKA,gBAAAsb,CACErV,EACAoV,EACAlI,GAEA,MAAMvM,EAAM,GAAGX,KAAeoV,IAC9Btd,KAAKkd,UAAU5a,IAAIuG,EAAKuM,EAC1B,CAKA,WAAAoI,CAAYtV,EAAqBoV,GAC/B,MAAMzU,EAAM,GAAGX,KAAeoV,IAC9B,OAAOtd,KAAKkd,UAAU3a,IAAIsG,EAC5B,CAKA,qBAAA4U,CAAsBvV,GACpB,MAAMnB,EAAS,IAAI9E,IAEnB,IAAK,MAAO4G,EAAKuM,KAAapV,KAAKkd,UAAUtQ,UAC3C,GAAI/D,EAAItB,WAAW,GAAGW,MAAiB,CACrC,MAAMoV,EAAWzU,EAAI4O,UAAUvP,EAAY7H,OAAS,GACpD0G,EAAOzE,IAAIgb,EAAUlI,EACvB,CAGF,OAAOrO,CACT,CAKA,mBAAA2W,CAAoBxV,EAAqBiB,GACvC,MAAM+T,EAAwB,GAE9B,IAAK,MAAOrU,EAAKuM,KAAapV,KAAKkd,UAAUtQ,UACvC/D,EAAItB,WAAW,GAAGW,OAAmBkN,EAASa,SAASI,SAASlN,IAClE+T,EAAU1a,KAAK4S,GAInB,OAAO8H,CACT,CAKA,WAAA/N,CAAYjH,EAAqBiB,EAAkBL,GACjD,IAAI9E,EAAQhE,KAAKmd,gBAAgB5a,IAAI2F,GAChClE,IACHA,EAAQ,IAAI/B,IACZjC,KAAKmd,gBAAgB7a,IAAI4F,EAAalE,IAExCA,EAAM1B,IAAI6G,EAAUL,EACtB,CAKA,aAAA6U,CAAczV,EAAqBiB,GACjC,OAAOnJ,KAAKmd,gBAAgB5a,IAAI2F,IAAc3F,IAAI4G,EACpD,CAKA,MAAAyU,CAAO1V,EAAqBoV,GAC1B,MAAMlI,EAAWpV,KAAKwd,YAAYtV,EAAaoV,GAC/C,IAAKlI,EAAU,OAAO,KAGtB,MAAMC,EAASD,EAASa,SAASK,IAAIC,GACnCvW,KAAK2d,cAAczV,EAAaqO,IAGlC,OAAOvW,KAAK6d,iBAAiBzI,EAASA,SAAUC,EAClD,CAKA,gBAAAwI,CAAiBzI,EAAkBC,GACjC,IAAItO,EAASqO,EASb,OANAC,EAAOpS,QAAQ,CAACqS,EAAO3S,KACrB,MAAM4S,EAAc,IAAI5S,KAClBmG,EAAQwM,QAAwCzF,OAAOyF,GAAS,GACtEvO,EAASA,EAAO0O,QAAQF,EAAazM,KAGhC/B,CACT,CAKA,kBAAA+W,CAAmB3T,GACjB,MAAMjC,YAAEA,EAAWqC,KAAEA,EAAI6K,SAAEA,EAAQC,OAAEA,EAAMY,SAAEA,EAAQ8H,MAAEA,EAAKC,UAAEA,GAAc7T,EAGtE8T,EAAOje,KAAK6d,iBAAiBzI,EAAUC,GAIvCxM,EAAM,GAAGX,KADElI,KAAKke,iBAAiB3T,KAIjC4T,EAAmBne,KAAKkd,UAAU3a,IAAIsG,GAsB5C,OArBIsV,GACFA,EAAiB/I,SAAWA,EAC5B+I,EAAiBlI,SAAWA,EAC5BkI,EAAiBJ,MAAQA,EACrBC,IACFG,EAAiBH,UAAYA,IAI/Bhe,KAAKkd,UAAU5a,IAAIuG,EAAK,CACtBuM,WACAa,WACA8H,QACAxT,OACA5J,KAAMqd,EAAY,YAAc,UAChCA,cAMG,CAAEC,OAAM1T,OACjB,CAMQ,gBAAA2T,CAAiB3T,GACvB,OAAOA,EAAKyN,KAAK,IACnB,CAKA,cAAA3I,CAAenH,GACb,MAAMkW,EAAyB,GAE/B,IAAK,MAAMvV,KAAO7I,KAAKkd,UAAUxZ,OAC3BmF,EAAItB,WAAW,GAAGW,OACpBkW,EAAa5b,KAAKqG,GAItB,IAAK,MAAMA,KAAOuV,EAChBpe,KAAKkd,UAAU9Z,OAAOyF,GAGxB7I,KAAKmd,gBAAgB/Z,OAAO8E,EAC9B,CAKA,KAAA7E,GACErD,KAAKkd,UAAU7Z,QACfrD,KAAKmd,gBAAgB9Z,OACvB,CAKA,QAAA0X,GACE,MAAMsD,EAAiBre,KAAKmd,gBAAgB7B,KACtCgD,EAAgBte,KAAKkd,UAAU5B,KAGrC,IAAIiD,EAAc,EAClB,IAAK,MAAMnJ,KAAYpV,KAAKkd,UAAUjC,SACpCsD,GAA0C,EAA3BnJ,EAASA,SAAS/U,OACjCke,GAA0C,GAA3BnJ,EAASa,SAAS5V,OACjCke,GAAuC,EAAxBnJ,EAAS2I,MAAM1d,OAC9Bke,GAAsC,EAAvBnJ,EAAS7K,KAAKlK,OAG/B,MAAO,CACLge,iBACAC,gBACAE,SAAUhD,KAAKC,MAAM8C,EAAc,MACnCE,yBAA0BH,EAAgB9C,KAAKkD,IAAIL,EAAgB,GAEvE,EAMK,MAAMM,EAAgB,IAAI1B,QCnNpB2B,EAoBX,WAAA7e,CACU8e,EACA3W,EACA4W,EACAC,EACRlb,EAA6B,IAJrB7D,KAAA6e,OAAAA,EACA7e,KAAAkI,YAAAA,EACAlI,KAAA8e,QAAAA,EACA9e,KAAA+e,QAAAA,EAvBV/e,KAAAgf,OAA2B,OAC3Bhf,KAAAif,SAAmB,EAUnBjf,KAAAkf,OAAc,GACdlf,KAAAmf,WAAqB,EAcnBnf,KAAKof,SAAWvb,EAChB7D,KAAKqf,UAAYxb,EAAQyb,SAAU,EACnCtf,KAAKuf,gBACP,CAEQ,cAAAA,GACNvf,KAAKwf,SAAW,IAAIna,QAAW,CAACC,EAASC,KACvCvF,KAAKyf,SAAWna,EAChBtF,KAAK0f,QAAUna,GAEnB,CAEA,WAAIoa,GACF,OAAO3f,KAAKwf,QACd,CAEA,QAAII,GACF,MAAuB,SAAhB5f,KAAKgf,MACd,CAEA,WAAIa,GACF,MAAuB,YAAhB7f,KAAKgf,MACd,CAEA,YAAIc,GACF,MAAuB,aAAhB9f,KAAKgf,MACd,CAEA,UAAIe,GACF,MAAuB,UAAhB/f,KAAKgf,MACd,CAEA,aAAIgB,GACF,MAAuB,cAAhBhgB,KAAKgf,MACd,CAKA,KAAAta,IAAShE,GACPV,KAAKgf,OAAS,UACdhf,KAAKigB,UAAY,IAAIlG,KACrB/Z,KAAKkgB,iBAAcxR,EACnB1O,KAAKif,SAAW,EAChBjf,KAAKgB,WAAQ0N,EAGT1O,KAAKqf,WACPrf,KAAKkf,OAAS,GACdlf,KAAKmf,WAAa,EAClBnf,KAAKmgB,aAAUzR,GAEf1O,KAAK+G,YAAS2H,EAIhB1O,KAAKogB,mBAGLpgB,KAAK8e,QAAQ7Z,OAAO,kBAAmBjF,KAAKkI,YAAalI,KAAK6e,OAAQne,GAAQ,IAC3EwS,MAAOC,IACNjQ,QAAQlC,MAAM,mCAAmChB,KAAK6e,UAAW1L,GACjEnT,KAAKgf,OAAS,QACdhf,KAAKgB,MAAQmS,EACbnT,KAAKkgB,YAAc,IAAInG,KACvB/Z,KAAKqgB,SAAWrgB,KAAKkgB,YAAYI,WAAatgB,KAAKigB,WAAWK,WAAa,GAC3EtgB,KAAK0f,UAAUvM,GACfnT,KAAKogB,oBAEX,CAKA,KAAAG,IAAS7f,GACa,UAAhBV,KAAKgf,QAAsC,cAAhBhf,KAAKgf,QAMpChf,KAAKuf,iBAELvf,KAAKgf,OAAS,UACdhf,KAAKigB,UAAY,IAAIlG,KACrB/Z,KAAKkgB,iBAAcxR,EACnB1O,KAAKif,SAAW,EAChBjf,KAAKgB,WAAQ0N,EAET1O,KAAKqf,WACPrf,KAAKkf,OAAS,GACdlf,KAAKmf,WAAa,EAClBnf,KAAKmgB,aAAUzR,GAEf1O,KAAK+G,YAAS2H,EAGhB1O,KAAKogB,mBAELpgB,KAAK8e,QAAQ7Z,OAAO,kBAAmBjF,KAAKkI,YAAalI,KAAK6e,OAAQne,GAAQ,IAC3EwS,MAAOC,IACNjQ,QAAQlC,MAAM,mCAAmChB,KAAK6e,UAAW1L,GACjEnT,KAAKgf,OAAS,QACdhf,KAAKgB,MAAQmS,EACbnT,KAAKkgB,YAAc,IAAInG,KACvB/Z,KAAKqgB,SAAWrgB,KAAKkgB,YAAYI,WAAatgB,KAAKigB,WAAWK,WAAa,GAC3EtgB,KAAK0f,UAAUvM,GACfnT,KAAKogB,sBA/BPld,QAAQgI,KAAK,sDAiCjB,CAKA,MAAAsV,GACsB,YAAhBxgB,KAAKgf,OAKThf,KAAK8e,QAAQ7Z,OAAO,mBAAoBjF,KAAKkI,YAAalI,KAAK6e,QAC5D4B,KAAK,KACJzgB,KAAKgf,OAAS,YACdhf,KAAKkgB,YAAc,IAAInG,KACvB/Z,KAAKqgB,SAAWrgB,KAAKkgB,YAAYI,WAAatgB,KAAKigB,WAAWK,WAAa,GAC3EtgB,KAAK0f,UAAU,IAAIre,MAAM,2BACzBrB,KAAKogB,qBAENlN,MAAOC,IACNjQ,QAAQlC,MAAM,oCAAoChB,KAAK6e,UAAW1L,KAbpEjQ,QAAQgI,KAAK,2CAejB,CAMA,iBAAAwV,CAAkB1c,GAChB,MAAM2c,EAAiB3gB,KAAKgf,OAE5Bhf,KAAKgf,OAAShb,EAAMgb,OACpBhf,KAAKif,SAAWjb,EAAMib,UAAY,EAClCjf,KAAK+G,OAAS/C,EAAM+C,OAEhB/C,EAAMhD,QACRhB,KAAKgB,MAAQ,IAAIK,MAAM2C,EAAMhD,QAG3BgD,EAAMic,YACRjgB,KAAKigB,UAAY,IAAIlG,KAAK/V,EAAMic,YAG9Bjc,EAAMkc,cACRlgB,KAAKkgB,YAAc,IAAInG,KAAK/V,EAAMkc,cAGhClc,EAAMqc,WACRrgB,KAAKqgB,SAAWrc,EAAMqc,UAIJ,aAAhBrgB,KAAKgf,QAA4C,aAAnB2B,EAC5B3gB,KAAKyf,UACPzf,KAAKyf,SAASzf,KAAK+G,QAEI,UAAhB/G,KAAKgf,QAAyC,UAAnB2B,EAChC3gB,KAAK0f,SACP1f,KAAK0f,QAAQ1f,KAAKgB,OAEK,cAAhBhB,KAAKgf,QAA6C,cAAnB2B,GACpC3gB,KAAK0f,SACP1f,KAAK0f,QAAQ,IAAIre,MAAM,mBAKvBsf,IAAmB3gB,KAAKgf,QAAUhf,KAAKif,WAAajb,EAAMib,UAC5Djf,KAAKogB,kBAET,CAMQ,gBAAAA,GACN,IAAKpgB,KAAK+e,UAAY/e,KAAK+e,QAAQxO,UACjC,OAGF,MAAM4J,EAAoC,CACxC,CAACna,KAAK6e,QAAS,CACbG,OAAQhf,KAAKgf,OACbC,SAAUjf,KAAKif,SACfE,WAAYnf,KAAKmf,aAIf9E,EAAOra,KAAK+e,QAAQxO,UAAU2J,UAAUla,KAAK+e,QAAQ7W,YAAaiS,GAEpEE,IAEiEA,EAAKjS,QAAQ/H,OAChFL,KAAK+e,QAAQvO,WAAWxG,aAAahK,KAAK+e,QAAQnT,QAASyO,EAAKjS,SAKpE,QC3QWwY,EAWX,WAAA7gB,CACU8gB,EACA3Y,EACA4W,EACAC,EACRxQ,GAJQvO,KAAA6gB,UAAAA,EACA7gB,KAAAkI,YAAAA,EACAlI,KAAA8e,QAAAA,EACA9e,KAAA+e,QAAAA,EAbV/e,KAAA8gB,aAAuB,EAgBrB9gB,KAAKgE,MAAQuK,CACf,CAKA,QAAAwS,CAASC,GACPhhB,KAAK8gB,aAAc,EACnB9gB,KAAKgB,WAAQ0N,EACb1O,KAAKihB,iBAAmB,IAAIlH,KAGxBiH,GAA4B,iBAAXA,GAAuB,SAAUA,IACpDhhB,KAAKkhB,eAAiBrR,OAAQmR,EAAergB,OAI/CX,KAAKogB,mBAGLpgB,KAAK8e,QAAQ7Z,OAAO,wBAAyBjF,KAAKkI,YAAalI,KAAK6gB,UAAWG,GAC5E9N,MAAOC,IACNjQ,QAAQlC,MAAM,mDAAmDhB,KAAK6gB,aAAc1N,GACpFnT,KAAK8gB,aAAc,EACnB9gB,KAAKgB,MAAQmS,EACbnT,KAAKogB,oBAEX,CAKA,aAAAe,CAAcH,GA6BZ,OA5BAhhB,KAAK8gB,aAAc,EACnB9gB,KAAKgB,WAAQ0N,EACb1O,KAAKihB,iBAAmB,IAAIlH,KAGxBiH,GAA4B,iBAAXA,GAAuB,SAAUA,IACpDhhB,KAAKkhB,eAAiBrR,OAAQmR,EAAergB,OAI/CX,KAAKohB,gBAAkB,IAAI/b,QAAgB,CAACC,EAASC,KACnDvF,KAAKqhB,gBAAkB/b,EACvBtF,KAAKshB,eAAiB/b,IAIxBvF,KAAKogB,mBAGLpgB,KAAK8e,QAAQ7Z,OAAO,wBAAyBjF,KAAKkI,YAAalI,KAAK6gB,UAAWG,GAC5E9N,MAAOC,IACNjQ,QAAQlC,MAAM,mDAAmDhB,KAAK6gB,aAAc1N,GACpFnT,KAAK8gB,aAAc,EACnB9gB,KAAKgB,MAAQmS,EACbnT,KAAKshB,iBAAiBnO,GACtBnT,KAAKogB,qBAGFpgB,KAAKohB,eACd,CAMA,iBAAAV,CAAkBa,EAAkBvgB,GAClC,MAAMwgB,EAAgBxhB,KAAKgE,MAE3BhE,KAAKgE,MAAQud,EACbvhB,KAAK8gB,aAAc,EAEf9f,GACFhB,KAAKgB,MAAQ,IAAIK,MAAML,GACvBhB,KAAKshB,iBAAiBthB,KAAKgB,SAE3BhB,KAAKgB,WAAQ0N,EACb1O,KAAKqhB,kBAAkBE,IAIzBvhB,KAAKohB,qBAAkB1S,EACvB1O,KAAKqhB,qBAAkB3S,EACvB1O,KAAKshB,oBAAiB5S,EAGlB8S,IAAkBD,GACpBvhB,KAAKogB,kBAET,CAMQ,gBAAAA,GACN,IAAKpgB,KAAK+e,UAAY/e,KAAK+e,QAAQxO,UACjC,OAGF,MAAM4J,EAAoC,CACxC,CAACna,KAAK6gB,WAAY,CAChB7c,MAAOhE,KAAKgE,MACZ8c,YAAa9gB,KAAK8gB,YAClB9f,MAAOhB,KAAKgB,OAAOO,UAIjB8Y,EAAOra,KAAK+e,QAAQxO,UAAU2J,UAAUla,KAAK+e,QAAQ7W,YAAaiS,GAEpEE,IAEoEA,EAAKjS,QAAQ/H,OACnFL,KAAK+e,QAAQvO,WAAWxG,aAAahK,KAAK+e,QAAQnT,QAASyO,EAAKjS,SAKpE,ECxIF,IAAIqZ,EAA0C,KCN1CA,EAA0C,KAC1CC,EAAa,EACbC,EAAc,EACdC,EAAW,EACXC,EAAkB,EAClBC,EAAqB,EA4BzB,SAASC,EAAkBC,EAAmBzX,GAC5C,IAAI8C,EAAuB2U,EAE3B,IAAK,MAAMrf,KAAS4H,EAAM,CACxB,IAAK8C,IAAYA,EAAQ3B,WAAY,OAAO,KAC5C2B,EAAUA,EAAQ3B,WAAW/I,IAAU,IACzC,CAEA,OAAO0K,CACT,CAKM,SAAU4U,EAAYzS,GAC1B,IAAKiS,EACH,MAAM,IAAIpgB,MAAM,qDAGlB,MAAM0d,EAAU0C,EAEVtY,EAAW,SADHuY,IAIT3C,EAAQ/a,MAAM3B,IAAI8G,IACrB4V,EAAQ/a,MAAM1B,IAAI6G,EAAUqG,GAG9B,MAAM0S,EAAenD,EAAQ/a,MAAMzB,IAAI4G,GAEjCwF,EAAYpF,IAChB,MAAMsI,EAAYC,YAAYC,MAExBoQ,EAAqC,mBAAb5Y,EACzBA,EAA4BwV,EAAQ/a,MAAMzB,IAAI4G,IAC/CI,EAGE4Q,EAAoC,CACxChR,CAACA,GAAWgZ,GAIR9H,EAAO0E,EAAQxO,UAAU2J,UAAU6E,EAAQ7W,YAAaiS,GAE9D,GAAIE,EAAM,CAER,MAAMtH,EAAUjB,YAAYC,MAAQF,EACUwI,EAAK9R,OAA8B8R,EAAKjS,QAAQ/H,OAAqB0S,EAAQzK,QAAQ,GAEnIyW,EAAQvO,WAAWxG,aAAa+U,EAAQnT,QAASyO,EAAKjS,SAGlD2W,EAAQtO,kBACVsO,EAAQtO,iBAAiBuC,SAAS,CAChC9K,YAAa6W,EAAQ7W,YACrBK,OAAQ8R,EAAK9R,OACbwK,UACA1K,WAAYgS,EAAKhS,WACjB4K,WAAYoH,EAAKjS,QAAQ/H,QAG/B,KAAO,CAEL,MAAM0S,EAAUjB,YAAYC,MAAQF,EAIhCkN,EAAQtO,kBACVsO,EAAQtO,iBAAiB2C,UAAU,CACjClL,YAAa6W,EAAQ7W,YACrBhD,WAAY,YAAYiE,KACxB4J,UACAE,WAAY,GAGlB,CAGA8L,EAAQ/a,MAAM1B,IAAI6G,EAAUgZ,GAG5BxD,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUgZ,GAGzD,MAAMC,EAAiBzD,EAAcjB,oBAAoBqB,EAAQ7W,YAAaiB,GAC9E,IAAK,MAAMiM,KAAYgN,EAAgB,CAErC,MAAM9E,EAAWlI,EAAS7K,KAAKyN,KAAK,KAG9BqK,EAAU1D,EAAcf,OAAOmB,EAAQ7W,YAAaoV,GAE1D,GAAgB,OAAZ+E,EAAkB,CAEpB,MAAMzW,EAAUmW,EAAkBhD,EAAQnT,QAASwJ,EAAS7K,MACxDqB,IACEA,EAAQM,WAAaC,KAAKC,UAC5BR,EAAQS,YAAcgW,EACbzW,aAAmBqB,cAExBmI,EAAS4I,UACXpS,EAAQiB,aAAauI,EAAS4I,UAAWqE,GAEzCzW,EAAQS,YAAcgW,GAM9B,CACF,CAGAtD,EAAQD,QAAQ5V,qBAAqB6V,EAAQ7W,YAAaiB,EAAUgZ,GACjEjP,MAAMC,IACLjQ,QAAQlC,MAAM,6CAA8CmS,MAKlE,OAAI3P,MAAM0T,QAAQgL,GACT,CAACA,EAAcI,EAAuB3T,EAAUuT,EAAc/Y,EAAU4V,IAG1E,CAACmD,EAAcvT,EACxB,CAKM,SAAU4T,EAAUxT,EAAqCyT,GAC7D,IAAKf,EACH,MAAM,IAAIpgB,MAAM,sDAGlB,MAAM0d,EAAU0C,EACV9e,EAAQgf,IAGd,GAAK5C,EAAQ0D,QAAQ9f,GAcd,CACL,MAAM+f,EAAS3D,EAAQ0D,QAAQ9f,KAGV6f,IAASE,EAAOF,MACnCA,EAAKniB,SAAWqiB,EAAOF,KAAKniB,QAC5BmiB,EAAK3I,KAAK,CAAC8I,EAAKxV,IAAMwV,IAAQD,EAAOF,KAAMrV,OAIvCuV,EAAOE,SACTF,EAAOE,UAITF,EAAO3T,SAAWA,EAClB2T,EAAOF,KAAOA,EAGdK,eAAe,KACb,MAAMD,EAAU7T,IACO,mBAAZ6T,IACTF,EAAOE,QAAUA,KAIzB,MAvCE7D,EAAQ0D,QAAQ9f,GAAS,CACvBoM,WACAyT,OACAI,aAASlU,GAIXmU,eAAe,KACb,MAAMD,EAAU7T,IACO,mBAAZ6T,IACT7D,EAAQ0D,QAAQ9f,GAAOigB,QAAUA,IA8BzC,CAKM,SAAUE,EAAUtT,GACxB,IAAKiS,EACH,MAAM,IAAIpgB,MAAM,mDAGlB,MAAM0d,EAAU0C,EAEVsB,EAAS,OADDnB,IAQd,OAJK7C,EAAQiE,KAAK3gB,IAAI0gB,IACpBhE,EAAQiE,KAAK1gB,IAAIygB,EAAQ,CAAE1V,QAASmC,IAG/BuP,EAAQiE,KAAKzgB,IAAIwgB,EAC1B,CAmDA,SAAST,EACPW,EACAC,EACA/Z,EACA4V,GAGA,MAAMoE,EAAcF,EAyIpB,OAtIAE,EAAOC,OAAU3K,IACf,MAAM4K,EAAW,IAAIH,EAAczK,GAGnCsG,EAAQ/a,MAAM1B,IAAI6G,EAAUka,GAG5B1E,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUka,GAGzDtE,EAAQD,QAAQxV,kCACdyV,EAAQ7W,YACRiB,EACAka,EACA,CAAE1iB,KAAM,SAAU8X,SAClBvF,MAAMC,IACNjQ,QAAQlC,MAAM,oDAAqDmS,MAQvEgQ,EAAOG,QAAW7K,IAChB,MAAM4K,EAAW,CAAC5K,KAASyK,GAE3BnE,EAAQ/a,MAAM1B,IAAI6G,EAAUka,GAC5B1E,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUka,GAEzDtE,EAAQD,QAAQxV,kCACdyV,EAAQ7W,YACRiB,EACAka,EACA,CAAE1iB,KAAM,UAAW8X,SACnBvF,MAAMC,IACNjQ,QAAQlC,MAAM,qDAAsDmS,MAOxEgQ,EAAOI,SAAW,CAAC5gB,EAAe8V,KAChC,MAAM4K,EAAW,IAAIH,GACrBG,EAASxgB,OAAOF,EAAO,EAAG8V,GAE1BsG,EAAQ/a,MAAM1B,IAAI6G,EAAUka,GAC5B1E,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUka,GAEzDtE,EAAQD,QAAQxV,kCACdyV,EAAQ7W,YACRiB,EACAka,EACA,CAAE1iB,KAAM,WAAYgC,QAAO8V,SAC3BvF,MAAMC,IACNjQ,QAAQlC,MAAM,oDAAqDmS,MAOvEgQ,EAAOK,SAAY7gB,IACjB,MAAM0gB,EAAWH,EAAa5K,OAAO,CAACmL,EAAGtW,IAAMA,IAAMxK,GAErDoc,EAAQ/a,MAAM1B,IAAI6G,EAAUka,GAC5B1E,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUka,GAEzDtE,EAAQD,QAAQxV,kCACdyV,EAAQ7W,YACRiB,EACAka,EACA,CAAE1iB,KAAM,WAAYgC,UACpBuQ,MAAMC,IACNjQ,QAAQlC,MAAM,oDAAqDmS,MAOvEgQ,EAAOO,SAAW,CAAC/gB,EAAeyM,KAChC,MAAMiU,EAAW,IAAIH,GACrBG,EAAS1gB,GAA4B,mBAAZyM,EACpBA,EAA2B8T,EAAavgB,IACzC,IAAKugB,EAAavgB,MAAkByM,GAExC2P,EAAQ/a,MAAM1B,IAAI6G,EAAUka,GAC5B1E,EAAcxP,YAAY4P,EAAQ7W,YAAaiB,EAAUka,GAEzDtE,EAAQD,QAAQxV,kCACdyV,EAAQ7W,YACRiB,EACAka,EACA,CAAE1iB,KAAM,WAAYgC,QAAO8V,KAAM4K,EAAS1gB,KAC1CuQ,MAAMC,IACNjQ,QAAQlC,MAAM,oDAAqDmS,KAGFkQ,EAAS1gB,IAI9EwgB,EAAO9f,MAAQ,KACb4f,EAAa,KAIfE,EAAOQ,YAAeC,IACpB,MAAMP,EAAWH,EAAa5K,OAAOG,IAASmL,EAAUnL,IACxDwK,EAAaI,IAIfF,EAAOU,YAAc,CAACD,EAAiCxU,KACrD,MAAMiU,EAAWH,EAAa5M,IAAImC,GAChCmL,EAAUnL,GAAQ,IAAKA,KAAgBrJ,GAAYqJ,GAErDwK,EAAaI,IAIfF,EAAOW,WAAcC,IACnB,MAAMV,EAAW,IAAIH,KAAiBa,GACtCd,EAAaI,IAIfF,EAAOa,WAAcC,IACnB,MAAMZ,EAAWH,EAAa5K,OAAO,CAACmL,EAAGtW,KAAO8W,EAAQ5N,SAASlJ,IACjE8V,EAAaI,IAGRF,CACT,UAqBgBe,EACdC,EACAtgB,EAA6B,IAE7B,IAAK4d,EACH,MAAM,IAAIpgB,MAAM,0DAGlB,MAAM0d,EAAU0C,EAEV2C,EAAU,cADFvC,IASd,GALK9C,EAAQsF,cACXtF,EAAQsF,YAAc,IAAIpiB,MAIvB8c,EAAQsF,YAAYhiB,IAAI+hB,GAAU,CACrC,MAAME,EAAO,IAAI1F,EACfwF,EACArF,EAAQ7W,YACR6W,EAAQD,QACRC,EACAlb,GAGFkb,EAAQsF,YAAY/hB,IAAI8hB,EAASE,EACnC,CAEA,OAAOvF,EAAQsF,YAAY9hB,IAAI6hB,EACjC,CC1eA,IAAI3C,EAA0C,KCF9C,MAAM8C,EAQJ,WAAAxkB,CAAY8D,EAAsC,IAP1C7D,KAAAwkB,SAGH,IAAIviB,IAEDjC,KAAAqE,cAAwB,EAG9BrE,KAAKqE,aAAeR,EAAQQ,eAAgB,CAC9C,CAKA,SAAAyK,CACE2V,EACA1V,GAEK/O,KAAKwkB,SAASniB,IAAIoiB,IACrBzkB,KAAKwkB,SAASliB,IAAImiB,EAAS,CACzBpW,YAAa,IAAIxE,IACjB6a,YAAa,OAIjB,MAAMC,EAAc3kB,KAAKwkB,SAASjiB,IAAIkiB,GAGlC1V,GACF4V,EAAYtW,YAAYvE,IAAIiF,GAI9B,MAAMxN,EAA4BojB,EAAYD,aAAe,CAC3D5b,WAAO4F,EACPkW,UAAW7K,KAAKhI,OAKlB,OAFA/R,KAAK4E,IAAI,kBAAkB6f,KAAY,CAAEI,cAAe9V,IAEjDxN,CACT,CAKA,WAAA4O,CAAYsU,EAAiB1V,GAC3B,MAAM4V,EAAc3kB,KAAKwkB,SAASjiB,IAAIkiB,GAClCE,IACFA,EAAYtW,YAAYjL,OAAO2L,GAC/B/O,KAAK4E,IAAI,sBAAsB6f,MAEnC,CAKA,OAAAK,CACEL,EACA3b,EACAjF,EAII,CAAA,GAEC7D,KAAKwkB,SAASniB,IAAIoiB,IACrBzkB,KAAKwkB,SAASliB,IAAImiB,EAAS,CACzBpW,YAAa,IAAIxE,IACjB6a,YAAa,OAIjB,MAAMC,EAAc3kB,KAAKwkB,SAASjiB,IAAIkiB,GAEhCljB,EAA4B,CAChCuH,QACA9H,MAAO6C,EAAQ7C,MACf+jB,QAASlhB,EAAQkhB,QACjBC,OAAQnhB,EAAQmhB,OAChBJ,UAAW7K,KAAKhI,MAChBkT,SAAS,GAIXN,EAAYD,YAAcnjB,EAG1BojB,EAAYtW,YAAYpL,QAAQiiB,IAC9B,IACEA,EAAW3jB,EACb,CAAE,MAAOP,GACPkC,QAAQlC,MAAM,8CAA8CyjB,MAAazjB,EAC3E,IAGFhB,KAAK4E,IAAI,iBAAiB6f,KAAY,CACpCpW,YAAasW,EAAYtW,YAAYiN,KACrCxS,SAEJ,CAKA,KAAAzF,CAAMohB,GACJzkB,KAAKwkB,SAASphB,OAAOqhB,GACrBzkB,KAAK4E,IAAI,oBAAoB6f,KAC/B,CAKA,QAAA3J,GACE9a,KAAKwkB,SAASnhB,QACdrD,KAAK4E,IAAI,uBACX,CAKA,QAAAmW,GACE,MAAO,CACLoK,cAAenlB,KAAKwkB,SAASlJ,KAC7BkJ,SAAUhhB,MAAMC,KAAKzD,KAAKwkB,SAAS5X,WAAW0J,IAAI,EAAE7J,EAAMvL,MAAK,CAC7DuL,OACA4B,YAAanN,EAAKmN,YAAYiN,KAC9B8J,iBAAkBlkB,EAAKwjB,eAG7B,CAEQ,GAAA9f,CAAIrD,EAAiBL,GACvBlB,KAAKqE,YAGX,EAIF,IAAIghB,EAA2C,KAEzC,SAAUC,EAAmBzhB,GAIjC,OAHKwhB,IACHA,EAAmB,IAAId,EAAgB1gB,IAElCwhB,CACT,OCtJaE,EAWX,WAAAxlB,CAAYkK,EAAoCsD,SAASiY,KAAM3hB,EAA2B,CAAA,GAExF,GANM7D,KAAAylB,gBAA0C,KAMrB,iBAAhBxb,EAA0B,CACnC,MAAM2B,EAAU2B,SAAS8F,cAAcpJ,GACvC,IAAK2B,EACH,MAAM,IAAIvK,MAAM,sCAAsC4I,KAExDjK,KAAKiK,YAAc2B,CACrB,MACE5L,KAAKiK,YAAcA,ERInB,IAA0Byb,EQA5B1lB,KAAK6D,QAAU,CACbiE,OAAQjE,EAAQiE,QAAU,YAC1B6d,mBAAoB9hB,EAAQ8hB,qBAAsB,EAClDC,kBAAmB/hB,EAAQ+hB,mBAAqB,KAIlD5lB,KAAK8e,QAAU,IAAIjX,EAAe7H,KAAK6D,QAAQiE,OAAQ,CACrD8d,kBAAmB5lB,KAAK6D,QAAQ+hB,kBAChCvhB,aAAcrE,KAAK6D,QAAQ8hB,qBAG7B3lB,KAAKwQ,WAAa,IAAIzG,EAAW,CAC/B1F,aAAcrE,KAAK6D,QAAQ8hB,qBAG7B3lB,KAAKwT,YAAc,IAAIrF,EAAmB,CACxC9J,aAAcrE,KAAK6D,QAAQ8hB,qBAG7B3lB,KAAK6lB,UAAY,IAAItS,EAAiBvT,KAAKwT,YAAa,CACtDnP,aAAcrE,KAAK6D,QAAQ8hB,qBAG7B3lB,KAAKuQ,UAAY,IAAIiJ,EAAU,CAC7BnV,aAAcrE,KAAK6D,QAAQ8hB,qBAG7B3lB,KAAKyQ,iBAAmB,IAAIoL,EAAiB,CAC3CxX,aAAcrE,KAAK6D,QAAQ8hB,qBR7BDD,EQiCG1lB,KAAK6D,QAAQ8hB,mBRhC9CthB,EAAeqhB,EQkCb1lB,KAAK8lB,uBACL9lB,KAAK4E,IAAI,uBAAwB,CAAEqF,YAAajK,KAAKiK,YAAapG,QAAS7D,KAAK6D,SAClF,CAKA,WAAMa,SAEE1E,KAAK8e,QAAQpa,QAGnB1E,KAAK6lB,UAAU5Q,aAGfjV,KAAKylB,gBAAkB,IAAIpV,EACzBrQ,KAAKiK,YACL,CAAC/B,EAAahD,EAAYxE,IAASV,KAAK8e,QAAQpW,sBAAsBR,EAAahD,EAAYxE,GAC/F,CAAE2D,aAAcrE,KAAK6D,QAAQ8hB,2BAIzB3lB,KAAK+lB,wBAEX/lB,KAAK4E,IAAI,mBACX,CAKA,UAAME,GACA9E,KAAKylB,kBACPzlB,KAAKylB,gBAAgBnS,UACrBtT,KAAKylB,gBAAkB,YAGnBzlB,KAAK8e,QAAQha,OAEnB9E,KAAK4E,IAAI,mBACX,CAKQ,oBAAAkhB,GAEN9lB,KAAK8e,QAAQ5c,GAAG,kBAAmB,EAAGgG,cAAaC,WACjD,MAAM6d,EAAYhmB,KAAK6lB,UAAU9Q,aAAa7M,GAC1C8d,IACFhmB,KAAKwQ,WAAWtC,YAAY8X,EAAUpa,QAASzD,GAC/CnI,KAAK4E,IAAI,yBAA0B,CAAEsD,mBAKzClI,KAAK8e,QAAQ5c,GAAG,eAAgB,EAAGgG,cAAaE,cAC9C,MAAM4d,EAAYhmB,KAAK6lB,UAAU9Q,aAAa7M,GAC1C8d,IACFhmB,KAAKwQ,WAAWxG,aAAagc,EAAUpa,QAASxD,GAChDpI,KAAK4E,IAAI,kBAAmB,CAAEsD,cAAa+K,WAAY7K,EAAQ/H,YAKnEL,KAAK8e,QAAQ5c,GAAG,kBAAmB,EAAGgG,cAAaE,UAASC,iBAC1D,MAAM2d,EAAYhmB,KAAK6lB,UAAU9Q,aAAa7M,GAC1C8d,IACFhmB,KAAKwQ,WAAWxG,aAAagc,EAAUpa,QAASxD,GAChDpI,KAAK4E,IAAI,wBAAqC,IAAbyD,GAAkBC,QAAQ,iBAAkB,CAAEJ,cAAa+K,WAAY7K,EAAQ/H,YAKpHL,KAAK8e,QAAQ5c,GAAG,kBAAmB,EAAGgG,cAAaE,cACjD,MAAM4d,EAAYhmB,KAAK6lB,UAAU9Q,aAAa7M,GAC1C8d,IACFhmB,KAAKwQ,WAAWxG,aAAagc,EAAUpa,QAASxD,GAChDpI,KAAK4E,IAAI,gDAAiD,CAAEsD,cAAa+K,WAAY7K,EAAQ/H,YAKjGL,KAAK8e,QAAQ5c,GAAG,YAAchB,IAC5BlB,KAAKuQ,UAAUoJ,UAAUzY,GACzBlB,KAAK4E,IAAI,SAAS1D,EAAKqH,gCAAgCrH,EAAKgH,cAAe,CACzE+K,WAAY/R,EAAKkH,QAAQ/H,OACzBgI,YAA+B,IAAlBnH,EAAKmH,YAAkBC,QAAQ,GAAK,MAInDtI,KAAKyQ,iBAAiBqL,mBAAmB,CACvC5T,YAAahH,EAAKgH,YAClBK,OAAQrH,EAAKqH,OACb0K,WAAY/R,EAAKkH,QAAQ/H,OACzBgI,WAAYnH,EAAKmH,eAKrBrI,KAAK8e,QAAQ5c,GAAG,cAAeoF,UAC7BtH,KAAK4E,IAAI,iDACH5E,KAAK+lB,0BAIb/lB,KAAK8e,QAAQ5c,GAAG,2BAA4B,EAAGgG,cAAa2Y,YAAW7c,QAAOhD,YAC5E,MAAMglB,EAAYhmB,KAAK6lB,UAAU9Q,aAAa7M,GAC9C,GAAI8d,GAAaA,EAAUjH,QAAQkH,eAAgB,CACjD,MAAMC,EAAUF,EAAUjH,QAAQkH,eAAe1jB,IAAIse,GACjDqF,IACFA,EAAQxF,kBAAkB1c,EAAOhD,GACjChB,KAAK4E,IAAI,+BAAgC,CAAEsD,cAAa2Y,cAE5D,IAIF7gB,KAAK8e,QAAQ5c,GAAG,QAAS,EAAGX,cAC1B2B,QAAQlC,MAAM,2BAA4BO,IAE9C,CAKQ,2BAAMwkB,GACZ,MAAMtS,EAAalG,SAAS0G,iBAAiB,6BAE7C,IAAK,MAAMrI,KAAWpI,MAAMC,KAAKgQ,GAAa,CAC5C,MAAMvL,EAAc0D,EAAQsB,aAAa,2BACzC,GAAIhF,EACF,UACQlI,KAAK8e,QAAQrW,kBAAkBP,GACrClI,KAAK4E,IAAI,uBAAwB,CAAEsD,eACrC,CAAE,MAAOlH,GACPkC,QAAQlC,MAAM,2CAA4CkH,EAAalH,EACzE,CAEJ,CACF,CAKA,gBAAA0S,CAAiBxL,EAAqB0D,GACpC5L,KAAK6lB,UAAUnS,iBAAiBxL,EAAa0D,EAC/C,CAKA,YAAAmJ,CAAa7M,GACX,OAAOlI,KAAK6lB,UAAU9Q,aAAa7M,EACrC,CAKA,cAAAie,CAAeje,EAAqBW,GAClC,OAAO7I,KAAKwT,YAAYhF,SAAStG,EAAaW,EAChD,CAKA,cAAAud,CAAele,EAAqBW,EAAaC,GAC/C9I,KAAKwT,YAAY7E,SAASzG,EAAaW,EAAKC,GAG5C9I,KAAKqmB,4BAA4Bne,EAAaW,EAChD,CAKA,gBAAAyd,CAAiBpe,EAAqBW,EAAakG,GACjD,OAAO/O,KAAKwT,YAAY1E,UAAU5G,EAAaW,EAAKkG,EACtD,CAKQ,iCAAMsX,CAA4Bne,EAAqB4U,GAE7D,IAAKyJ,EAAiCre,GACpC,OAIF,MAAMsU,EAAWM,EACb0J,EAAyCte,EAAa4U,GACtD2J,EAAsCve,GAG1C,GAAIyE,OAAOjJ,KAAK8Y,GAAUnc,OAAS,EACjC,UACQL,KAAK8e,QAAQ9V,0BAA0Bd,EAAasU,GAC1Dxc,KAAK4E,IAAI,+BAAgC,CAAEsD,cAAasU,YAC1D,CAAE,MAAOxb,GACPkC,QAAQlC,MAAM,mDAAoDA,EACpE,CAEJ,CAKA,mBAAIiF,GACF,OAAOjG,KAAK8e,QAAQ9a,MAAM4D,UAC5B,CAKA,gBAAIY,GACF,OAAOxI,KAAK8e,QAAQtW,YACtB,CAKQ,GAAA5D,CAAIrD,EAAiBL,GACvBlB,KAAK6D,QAAQ8hB,kBAGnB,EAoEF,GAAsB,oBAAXle,OACT,GAA4B,YAAxB8F,SAASmZ,WACXnZ,SAAS2C,iBAAiB,mBAAoB,KAC5C,GAAI3C,SAASiY,KAAKjU,aAAa,2BAA4B,CACzD,MAAMoV,EAAW,IAAIpB,EAAShY,SAASiY,KAAM,CAC3CG,mBAAoBpY,SAASiY,KAAKjU,aAAa,yBAEjDoV,EAASjiB,QAAQwO,MAAMhQ,QAAQlC,OAC9ByG,OAAekf,SAAWA,CAC7B,SAGF,GAAIpZ,SAASiY,KAAKjU,aAAa,2BAA4B,CACzD,MAAMoV,EAAW,IAAIpB,EAAShY,SAASiY,KAAM,CAC3CG,mBAAoBpY,SAASiY,KAAKjU,aAAa,yBAEjDoV,EAASjiB,QAAQwO,MAAMhQ,QAAQlC,OAC9ByG,OAAekf,SAAWA,CAC7B,OAKkB,oBAAXlf,SACRA,OAAe8d,SAAWA,6MR7JvB,SAAyBrd,UACtBoU,EAAiBpU,EAE1B,qCKxLEuZ,EAAiB,IACnB,uCCpBEA,EAAiB,IACnB,6ENgDM,SAA0BvZ,EAAqBuU,GACnD,MAAMD,EAAWF,EAAiBpU,KAAeuU,GAEjD,GAAKD,EAKL,IACE,MAAM1T,EAAQ0T,EAASG,YAGvB,OAFAH,EAASI,UAAY9T,EAEdA,CACT,CAAE,MAAO9H,GAEP,YADAkC,QAAQlC,MAAM,qCAAqCyb,MAAazb,EAElE,MAZEkC,QAAQgI,KAAK,8BAA8BuR,oCAA0CvU,KAazF,2BM5CEW,EACAhF,EAA0B,IAG1B,GAAsB,QAAlBA,EAAQ+iB,QAAoB/iB,EAAQgjB,WACtC,MAAM,IAAIxlB,MAAM,YAAYwH,2CAG9B,MAAO,CACLA,MACAhF,QAAS,CACP+iB,MAAO/iB,EAAQ+iB,OAAS,UACxBC,WAAYhjB,EAAQgjB,WACpBC,OAAQjjB,EAAQijB,OAChBC,aAAcljB,EAAQkjB,cAG5B,iCNqHM,SAA2B7e,GAC/B,MAAMsU,EAAWF,EAAiBpU,GAElC,IAAKsU,EACH,MAAO,CAAA,EAGT,MAAMzV,EAA8B,CAAA,EAEpC,IAAK,MAAO0V,EAASC,KAAa/P,OAAOC,QAAQ4P,GAC/CzV,EAAO0V,GAAWC,EAASE,UAG7B,OAAO7V,CACT,0CAmDE,MAAM0M,EAA6E,CAAA,EAEnF,IAAK,MAAOvL,EAAasU,KAAa7P,OAAOC,QAAQ0P,GAAmB,CACtE,MAAM0K,EAAYra,OAAOjJ,KAAK8Y,GAC9B/I,EAAWvL,GAAe,CACxB+e,cAAeD,EAAU3mB,OACzB2mB,YAEJ,CAEA,MAAO,CACL3I,eAAgB1R,OAAOjJ,KAAK4Y,GAAkBjc,OAC9CoT,aAEJ,6BA9CM,SAAmCvL,GACvC,MAAMsU,EAAWF,EAAiBpU,GAClC,OAAOsU,EAAW7P,OAAOjJ,KAAK8Y,GAAY,EAC5C,iBA9CM,SAAuBtU,EAAqBuU,GAChD,OAAOH,EAAiBpU,KAAeuU,IAAUG,SACnD,iDA7HM,SACJ1U,EACAuU,EACAE,EACAI,GAEKT,EAAiBpU,KACpBoU,EAAiBpU,GAAe,CAAA,GAGlCoU,EAAiBpU,GAAauU,GAAW,CACvCA,UACAE,YACAI,eAIJ,wBKrCM,SAA8BgC,GAClC0C,EAAiB1C,EACjB2C,EAAa,EACbC,EAAc,EACdC,EAAW,EACXC,EAAkB,EAClBC,EAAqB,EDHjB,SAA6B/C,GACjC0C,EAAiB1C,CAEnB,CCGEmI,CAAmBnI,EACrB,0BCtBM,SAAgCA,GACpC0C,EAAiB1C,CACnB,wCGYM,SAA4BhQ,GAShC,OARcoY,sBAAuBvC,IACnC,IACE7V,EAAS6V,EACX,CAAE,MAAO5jB,GACPkC,QAAQlC,MAAM,yDAA0DA,EAC1E,GAIJ,gBLmCM,SACJ6H,EACA8T,EACA6F,EAAc,GACd3e,EAAiC,IAEjC,IAAK4d,EACH,MAAM,IAAIpgB,MAAM,mEAGlB,MAAM+lB,QACJA,GAAU,EAAIN,OACdA,EAAMO,SACNA,EAAQC,SACRA,EAAQ9X,aACRA,GACE3L,EAEEkb,EAAU0C,GAKT3Y,EAAOye,GAAYtF,OACPvT,IAAjBc,EAA6BA,EAAe,MAIxCgY,EAAQ1E,EAAgC,MAGxC2E,EAAgB3E,EAAsB,MAgF5C,SAAS4E,EAAaC,GACpB,MAAMC,EAAS,KACR7I,EAAQD,QAKbC,EAAQD,QAAQ9V,0BAA0B+V,EAAQ7W,YAAa,CAAEW,CAACA,GAAM8e,IACrEzU,MAAMC,IACLjQ,QAAQlC,MAAM,6CAA6C6H,MAASsK,KANtEjQ,QAAQgI,KAAK,8DAA8DrC,QAW/E,GAAIwe,EAQF,OAP8B,OAA1BI,EAAcpa,SAChBtI,aAAa0iB,EAAcpa,cAE7Boa,EAAcpa,QAAU5F,OAAOhC,WAAW,KACxCmiB,IACAH,EAAcpa,QAAU,MACvBga,IAQHO,GAMJ,CAEA,OAnHArF,EAAU,KAER,GAAI6E,GAAWI,EAAMna,SAECmV,EAAKniB,SAAWmnB,EAAMna,QAAQmV,KAAKniB,SACrDmiB,EAAK3I,KAAK,CAAC8I,EAAKxV,KAAOR,OAAOkb,GAAGlF,EAAK6E,EAAMna,QAASmV,KAAKrV,KAE1C,CAEhB,IAAI2Z,EAUF,OAPA,GADY/M,KAAKhI,MAAQyV,EAAMna,QAAQuX,UAC7BkC,EAER,MAON,CAKF,IAAItK,EACJ,IACEA,EAAWG,GACb,CAAE,MAAO3b,GAEP,MADAkC,QAAQlC,MAAM,oCAAoC6H,OAAU7H,GACtDA,CACR,CAGIwb,aAAoBnX,QACtBmX,EAASiE,KAAMqH,IAETV,IACFI,EAAMna,QAAU,CACdvE,MAAOgf,EACPlD,UAAW7K,KAAKhI,MAChByQ,KAAM,IAAIA,KAKd+E,EAASO,GAGTJ,EAAaI,KACZ5U,MAAOlS,IACRkC,QAAQlC,MAAM,0CAA0C6H,OAAU7H,MAOlEomB,IACFI,EAAMna,QAAU,CACdvE,MAAO0T,EACPoI,UAAW7K,KAAKhI,MAChByQ,KAAM,IAAIA,KAKd+E,EAAS/K,GAGTkL,EAAalL,KAEZgG,GA0CI1Z,CACT,eEhIM,SACJiW,GAEA,IAAK0C,EACH,MAAM,IAAIpgB,MAAM,kEAGlB,MAAM0mB,EAAMtG,EACNtY,EAAW,WAAW4V,EAAQlW,MAGpC,IAAIqZ,EAAe6F,EAAI/jB,MAAMzB,IAAI4G,GAyDjC,YAtDqBuF,IAAjBwT,QAA+DxT,IAAjCqQ,EAAQlb,QAAQkjB,eAChD7E,EAAenD,EAAQlb,QAAQkjB,cAqD1B,CAAC7E,EAjDiB3Y,IAEvBwe,EAAI/jB,MAAM1B,IAAI6G,EAAUI,GAGxB,MAAM4Q,EAAoC,CACxChR,CAACA,GAAWI,GAER8Q,EAAO0N,EAAIxX,UAAU2J,UAAU6N,EAAI7f,YAAaiS,GAClDE,GACF0N,EAAIvX,WAAWxG,aAAa+d,EAAInc,QAASyO,EAAKjS,SAIhD2f,EAAIjJ,QAAQ7Z,OAAO,gBAAiB,CAClC4D,IAAKkW,EAAQlW,IACbC,MAAOS,EACPqd,MAAO7H,EAAQlb,QAAQ+iB,MACvBC,WAAY9H,EAAQlb,QAAQgjB,WAC5BC,OAAQ/H,EAAQlb,QAAQijB,SACvB5T,MAAMC,IACPjQ,QAAQlC,MAAM,wCAAwC+d,EAAQlW,QAASsK,MAKjD,KAExB4U,EAAI/jB,MAAM1B,IAAI6G,OAAUuF,GAGxB,MAAMyL,EAAoC,CACxChR,CAACA,QAAWuF,GAER2L,EAAO0N,EAAIxX,UAAU2J,UAAU6N,EAAI7f,YAAaiS,GAClDE,GACF0N,EAAIvX,WAAWxG,aAAa+d,EAAInc,QAASyO,EAAKjS,SAIhD2f,EAAIjJ,QAAQ7Z,OAAO,eAAgB,CACjC4D,IAAKkW,EAAQlW,IACb+d,MAAO7H,EAAQlb,QAAQ+iB,MACvBC,WAAY9H,EAAQlb,QAAQgjB,aAC3B3T,MAAMC,IACPjQ,QAAQlC,MAAM,uCAAuC+d,EAAQlW,QAASsK,MAK5E,kCGtHM,SACJpE,EACAlL,GAEA,MAAI,wBAAyB4D,OACpBugB,oBAAqBC,IAC1B,IACElZ,EAASkZ,EACX,CAAE,MAAOjnB,GACPkC,QAAQlC,MAAM,qDAAsDA,EACtE,GACC6C,GAGI4B,WAAW,KAKhBsJ,EAJ+B,CAC7BmZ,YAAY,EACZC,cAAe,IAAM,MAGtB,EAEP,0BAtD6BpZ,EAAsB3H,EAAgB,GACjE3B,WAAW,KACT,IACEsJ,GACF,CAAE,MAAO/N,GACPkC,QAAQlC,MAAM,8CAA+CA,EAC/D,GACCoG,EACL,iBAvBM,SAAuB2H,GAC3B8T,eAAe,KACb,IACE9T,GACF,CAAE,MAAO/N,GACPkC,QAAQlC,MAAM,8CAA+CA,EAC/D,GAEJ,2BCiFM,SACJonB,EACAvkB,GAEA,MAAMwkB,EAAWxkB,EAAQwkB,UAAY,IAG9BC,EAAMC,GAAWtG,EAAS,IAC1B8B,EAAOyE,GAAYvG,EAAc,KACjCwG,EAAOC,GAAYzG,EAAS,IAC5BjhB,EAAO2nB,GAAY1G,EAAwB,MAG5C2G,EAAgB9F,EAAyB,IAAI7gB,KAG7C4mB,EAAW/F,EAAc,IAGzBgG,GAmMc/L,EAnMSlZ,EAAQkZ,eAoMQ,IAAxBA,EAAa1c,OAKN,IAAxB0c,EAAa1c,QAA2C,iBAApB0c,EAAa,GAC5CA,EAAa,GAIfA,EAAapB,OAAO,CAACC,EAAK+G,EAAKxV,KACpCyO,EAAI,MAAMzO,KAAOwV,EACV/G,GACN,CAAA,GAZM,CAAA,EAhMHmN,EAAY7E,EAChBxV,EACA,CACEsa,QAASnlB,EAAQmlB,QACjBC,SAAUplB,EAAQolB,WAKhBC,EAAYhF,EAChBxV,EACA,CAAEsa,QAASnlB,EAAQmlB,UAMfG,EAAY7hB,MAAO8hB,EAAoBC,GAAY,KAEvD,GAAIA,GAAaT,EAAcvb,QAAQhL,IAAI+mB,GAAa,CACtD,MAAME,EAASV,EAAcvb,QAAQ9K,IAAI6mB,GAgBzC,OAfAZ,EAASc,GACTf,EAAQa,GACRR,EAAcvb,QAAQjK,OAAOgmB,GAKzBvlB,EAAQ0lB,cAAgBH,EAAaI,GACvCC,EAAqBL,EAAa,QAGhCvlB,EAAQ6lB,cAAgBN,EAAa,GACvCK,EAAqBL,EAAa,GAItC,CAGA,MAAM1oB,EAAO,CACX4nB,KAAMc,EACNf,WACAS,WAGFD,EAASxb,QAAU,CAAC3M,GAEpBqoB,EAAUrkB,MAAMhE,GAGhB,IACE,MAAMqG,QAAegiB,EAAUpJ,QAE/B6I,EAASzhB,GACTwhB,EAAQa,GACRT,EAAS,MAKL9kB,EAAQ0lB,cAAgBH,EAAaI,GACvCC,EAAqBL,EAAa,GAGhCvlB,EAAQ6lB,cAAgBN,EAAa,GACvCK,EAAqBL,EAAa,EAEtC,CAAE,MAAOjW,GACPwV,EAASxV,EAAI5R,SAAW,wBACxB2B,QAAQlC,MAAM,gDAAgDooB,KAAejW,EAC/E,GAMIsW,EAAuBniB,MAAO8hB,IAClC,GAAIR,EAAcvb,QAAQhL,IAAI+mB,GAC5B,OAGF,MAAM1oB,EAAO,CACX4nB,KAAMc,EACNf,WACAS,WAKFC,EAAUrkB,MAAMhE,GAEhB,IACE,MAAMqG,QAAegiB,EAAUpJ,QAC/BiJ,EAAcvb,QAAQ/K,IAAI8mB,EAAYriB,EAExC,CAAE,MAAOoM,GACPjQ,QAAQlC,MAAM,qDAAqDooB,KAAejW,EAEpF,GA2FJ,IAAsB4J,EArFpBwF,EAAU,KACR2G,EAAUxkB,MAAMokB,GAEhBI,EAAUvJ,QAAQc,KAAMvW,IACtBwe,EAASxe,KACRgJ,MAAOC,IACRjQ,QAAQlC,MAAM,sDAAuDmS,MAEtE,CAAChS,KAAKK,UAAUsnB,KAKnBvG,EAAU,KACR4G,EAAU,GAAG,IACZ,IAKH5G,EAAU,KACJ1e,EAAQkZ,cAAgBlZ,EAAQkZ,aAAa1c,OAAS,IACxDuoB,EAAcvb,QAAQhK,QACtB8lB,EAAU,GAAG,KAEd,CAAChoB,KAAKK,UAAUsnB,KAGnB,MAAMU,EAAahO,KAAKmO,KAAKlB,EAAQJ,GAC/BuB,EAAUtB,EAAOkB,EACjBK,EAAUvB,EAAO,EA0BvB,MAAO,CAELvE,QACA0E,QACAe,aAGAlB,OACAD,WACAvhB,QAA8B,YAArBiiB,EAAU/J,OACnBhe,MAAOA,GAAS+nB,EAAU/nB,OAAOO,QAGjCqoB,UACAC,UACAC,KAtCW,KACPF,GACFT,EAAUb,EAAO,IAqCnByB,KAjCW,KACPF,GACFV,EAAUb,EAAO,IAgCnB0B,KA5BYZ,IACRA,GAAc,GAAKA,GAAcI,GACnCL,EAAUC,IA2BZa,QAvBc,KACdrB,EAAcvb,QAAQhK,QACtB8lB,EAAUb,GAAM,IAwBhB4B,WAAYnB,EACZoB,WAAYjB,EAEhB,WHzIM,SAA0BzE,GAK9B,MAAM2F,EAAa9E,IAEnB,MAAO,CAACxc,EAAUjF,EAAU,MAC1BumB,EAAWtF,QAAQL,EAAS3b,EAAOjF,GAEvC,gCF0WM,SACJ0K,GAEA,IAAKkT,EACH,MAAM,IAAIpgB,MAAM,6DAGlB,MAAM0d,EAAU0C,EAEV4I,EAAa,iBADLvI,IASd,GALK/C,EAAQkH,iBACXlH,EAAQkH,eAAiB,IAAIhkB,MAI1B8c,EAAQkH,eAAe5jB,IAAIgoB,GAAa,CAC3C,MAAMnE,EAAU,IAAItF,EAClByJ,EACAtL,EAAQ7W,YACR6W,EAAQD,QACRC,EACAxQ,GAGFwQ,EAAQkH,eAAe3jB,IAAI+nB,EAAYnE,EACzC,CAEA,OAAOnH,EAAQkH,eAAe1jB,IAAI8nB,EACpC,0CEnYM,SACJ5F,EACA1V,GAUA,OARmBuW,IAGQxW,UAAa2V,EAAS1V,EAMnD"}