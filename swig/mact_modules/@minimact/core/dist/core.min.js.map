{"version":3,"file":"core.min.js","sources":["../src/signalm/types.ts","../src/signalm/RetryPolicy.ts","../src/signalm/JsonProtocol.ts","../src/signalm/EventEmitter.ts","../src/signalm/SignalMConnection.ts","../src/signalm-manager.ts","../src/dom-patcher.ts","../src/client-state.ts","../src/event-delegation.ts","../src/hydration.ts","../src/template-renderer.ts","../src/hint-queue.ts","../src/playground-bridge.ts","../src/client-computed.ts","../src/template-state.ts","../src/server-task.ts","../src/server-reducer.ts","../src/useComputed.ts","../src/hooks.ts","../src/useContext.ts","../src/pub-sub.ts","../src/index.ts","../src/task-scheduling.ts","../src/usePaginatedServerTask.ts"],"sourcesContent":["/**\r\n * SignalM Types and Interfaces\r\n *\r\n * TypeScript definitions for SignalM connection and protocol\r\n */\r\n\r\nimport type { IRetryPolicy } from './RetryPolicy';\r\n\r\n/**\r\n * Connection state\r\n */\r\nexport enum ConnectionState {\r\n  Disconnected = 'Disconnected',\r\n  Connecting = 'Connecting',\r\n  Connected = 'Connected',\r\n  Reconnecting = 'Reconnecting'\r\n}\r\n\r\n/**\r\n * SignalM connection options\r\n */\r\nexport interface SignalMOptions {\r\n  /** Custom retry policy for reconnection */\r\n  reconnectPolicy?: IRetryPolicy;\r\n\r\n  /** Enable debug logging */\r\n  debug?: boolean;\r\n\r\n  /** Additional headers to send with connection */\r\n  headers?: Record<string, string>;\r\n\r\n  /** Connection timeout in milliseconds (default: 30000) */\r\n  connectionTimeout?: number;\r\n\r\n  /** Invocation timeout in milliseconds (default: 30000) */\r\n  invocationTimeout?: number;\r\n}\r\n\r\n/**\r\n * Pending invocation tracking\r\n */\r\nexport interface PendingInvocation {\r\n  resolve: (value: any) => void;\r\n  reject: (reason: any) => void;\r\n  timeout: number;\r\n}\r\n\r\n/**\r\n * SignalR message types\r\n * https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\nexport enum MessageType {\r\n  /** Invocation message (client → server or server → client) */\r\n  Invocation = 1,\r\n  /** StreamItem message (not supported in SignalM) */\r\n  StreamItem = 2,\r\n  /** Completion message (response to invocation) */\r\n  Completion = 3,\r\n  /** StreamInvocation message (not supported in SignalM) */\r\n  StreamInvocation = 4,\r\n  /** CancelInvocation message (not supported in SignalM) */\r\n  CancelInvocation = 5,\r\n  /** Ping message */\r\n  Ping = 6,\r\n  /** Close message */\r\n  Close = 7\r\n}\r\n\r\n/**\r\n * Invocation message (client → server or server → client RPC call)\r\n */\r\nexport interface InvocationMessage {\r\n  type: MessageType.Invocation;\r\n  invocationId?: string;\r\n  target: string;\r\n  arguments: any[];\r\n  streamIds?: string[];\r\n}\r\n\r\n/**\r\n * Completion message (response to invocation)\r\n */\r\nexport interface CompletionMessage {\r\n  type: MessageType.Completion;\r\n  invocationId: string;\r\n  result?: any;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Ping message (keep-alive)\r\n */\r\nexport interface PingMessage {\r\n  type: MessageType.Ping;\r\n}\r\n\r\n/**\r\n * Close message (connection termination)\r\n */\r\nexport interface CloseMessage {\r\n  type: MessageType.Close;\r\n  error?: string;\r\n  allowReconnect?: boolean;\r\n}\r\n\r\n/**\r\n * Union type of all message types\r\n */\r\nexport type Message = InvocationMessage | CompletionMessage | PingMessage | CloseMessage;\r\n\r\n/**\r\n * Connection event types\r\n */\r\nexport type ConnectionEvent = 'connected' | 'disconnected' | 'reconnecting' | 'reconnected' | 'error';\r\n","/**\r\n * Retry Policy Interface and Implementations\r\n *\r\n * Defines reconnection strategies for SignalM connections\r\n */\r\n\r\n/**\r\n * Retry policy interface\r\n */\r\nexport interface IRetryPolicy {\r\n  /**\r\n   * Get next retry delay in milliseconds\r\n   * Returns null if max retries exceeded\r\n   *\r\n   * @param retryAttempt - The retry attempt number (0-indexed)\r\n   * @returns Delay in milliseconds, or null to stop retrying\r\n   */\r\n  nextRetryDelay(retryAttempt: number): number | null;\r\n}\r\n\r\n/**\r\n * Exponential backoff retry policy\r\n *\r\n * Retry delays: 0ms, 2s, 10s, 30s, then 60s max\r\n * Allows infinite retries with capped delay\r\n */\r\nexport class ExponentialBackoffRetryPolicy implements IRetryPolicy {\r\n  private delays = [0, 2000, 10000, 30000];\r\n  private maxDelay = 60000; // 60 seconds\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    // Allow infinite retries, but cap delay at maxDelay\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n    return this.maxDelay;\r\n  }\r\n}\r\n\r\n/**\r\n * Fixed interval retry policy\r\n *\r\n * Retries at fixed intervals with a maximum retry count\r\n */\r\nexport class FixedRetryPolicy implements IRetryPolicy {\r\n  private interval: number;\r\n  private maxRetries: number;\r\n\r\n  /**\r\n   * Create a fixed retry policy\r\n   *\r\n   * @param interval - Retry interval in milliseconds (default: 5000)\r\n   * @param maxRetries - Maximum number of retries (default: 10)\r\n   */\r\n  constructor(interval: number = 5000, maxRetries: number = 10) {\r\n    this.interval = interval;\r\n    this.maxRetries = maxRetries;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt >= this.maxRetries) {\r\n      return null; // Max retries exceeded\r\n    }\r\n    return this.interval;\r\n  }\r\n}\r\n\r\n/**\r\n * No retry policy\r\n *\r\n * Fails immediately without retrying\r\n */\r\nexport class NoRetryPolicy implements IRetryPolicy {\r\n  nextRetryDelay(): null {\r\n    return null; // Never retry\r\n  }\r\n}\r\n\r\n/**\r\n * Custom retry policy with configurable delays\r\n *\r\n * Allows specifying exact retry delays\r\n */\r\nexport class CustomRetryPolicy implements IRetryPolicy {\r\n  private delays: number[];\r\n  private repeatLast: boolean;\r\n\r\n  /**\r\n   * Create a custom retry policy\r\n   *\r\n   * @param delays - Array of retry delays in milliseconds\r\n   * @param repeatLast - If true, repeat the last delay infinitely (default: false)\r\n   */\r\n  constructor(delays: number[], repeatLast: boolean = false) {\r\n    if (delays.length === 0) {\r\n      throw new Error('Delays array cannot be empty');\r\n    }\r\n    this.delays = delays;\r\n    this.repeatLast = repeatLast;\r\n  }\r\n\r\n  nextRetryDelay(retryAttempt: number): number | null {\r\n    if (retryAttempt < this.delays.length) {\r\n      return this.delays[retryAttempt];\r\n    }\r\n\r\n    if (this.repeatLast) {\r\n      return this.delays[this.delays.length - 1];\r\n    }\r\n\r\n    return null; // No more retries\r\n  }\r\n}\r\n","/**\r\n * SignalR JSON Protocol Implementation\r\n *\r\n * Implements the SignalR JSON protocol for message serialization.\r\n * Compatible with ASP.NET Core SignalR hubs.\r\n *\r\n * Protocol Spec: https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md\r\n */\r\n\r\nimport type {\r\n  Message,\r\n  InvocationMessage,\r\n  CompletionMessage,\r\n  PingMessage,\r\n  CloseMessage,\r\n  MessageType\r\n} from './types';\r\n\r\nexport class JsonProtocol {\r\n  /**\r\n   * Protocol name\r\n   */\r\n  static readonly protocolName = 'json';\r\n\r\n  /**\r\n   * Protocol version\r\n   */\r\n  static readonly protocolVersion = 1;\r\n\r\n  /**\r\n   * SignalR message record separator (ASCII 30)\r\n   * Every SignalR message must be terminated with this character\r\n   */\r\n  private static readonly RECORD_SEPARATOR = '\\x1E';\r\n\r\n  /**\r\n   * Write handshake request message\r\n   * Must be sent immediately after WebSocket connection is established\r\n   */\r\n  static writeHandshake(): string {\r\n    const handshake = {\r\n      protocol: this.protocolName,\r\n      version: this.protocolVersion\r\n    };\r\n    return JSON.stringify(handshake) + this.RECORD_SEPARATOR;\r\n  }\r\n\r\n  /**\r\n   * Parse handshake response message\r\n   */\r\n  static parseHandshake(data: string): { error?: string } {\r\n    try {\r\n      const cleanData = data.endsWith(this.RECORD_SEPARATOR)\r\n        ? data.slice(0, -1)\r\n        : data;\r\n      return JSON.parse(cleanData) as { error?: string };\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse handshake: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write invocation message (client → server RPC call)\r\n   */\r\n  static writeInvocation(\r\n    invocationId: string,\r\n    target: string,\r\n    args: any[]\r\n  ): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      invocationId,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write message without response (fire-and-forget)\r\n   */\r\n  static writeMessage(target: string, args: any[]): InvocationMessage {\r\n    return {\r\n      type: 1 as MessageType.Invocation,\r\n      target,\r\n      arguments: args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write ping message (keep-alive)\r\n   */\r\n  static writePing(): PingMessage {\r\n    return {\r\n      type: 6 as MessageType.Ping\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Write close message\r\n   */\r\n  static writeClose(error?: string): CloseMessage {\r\n    return {\r\n      type: 7 as MessageType.Close,\r\n      error\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse incoming message\r\n   * Removes record separator if present\r\n   */\r\n  static parseMessage(data: string): Message {\r\n    try {\r\n      // Remove record separator if present\r\n      const cleanData = data.endsWith(this.RECORD_SEPARATOR)\r\n        ? data.slice(0, -1)\r\n        : data;\r\n      return JSON.parse(cleanData) as Message;\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse message: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serialize message to JSON string with SignalR record separator\r\n   * SignalR requires all messages to end with \\x1E\r\n   */\r\n  static serializeMessage(message: Message): string {\r\n    return JSON.stringify(message) + this.RECORD_SEPARATOR;\r\n  }\r\n\r\n  /**\r\n   * Check if message is invocation\r\n   */\r\n  static isInvocation(message: Message): message is InvocationMessage {\r\n    return message.type === 1;\r\n  }\r\n\r\n  /**\r\n   * Check if message is completion\r\n   */\r\n  static isCompletion(message: Message): message is CompletionMessage {\r\n    return message.type === 3;\r\n  }\r\n\r\n  /**\r\n   * Check if message is ping\r\n   */\r\n  static isPing(message: Message): message is PingMessage {\r\n    return message.type === 6;\r\n  }\r\n\r\n  /**\r\n   * Check if message is close\r\n   */\r\n  static isClose(message: Message): message is CloseMessage {\r\n    return message.type === 7;\r\n  }\r\n}\r\n","/**\r\n * Simple Event Emitter\r\n *\r\n * Lightweight event handling for SignalM connections\r\n */\r\n\r\nexport class EventEmitter {\r\n  private events = new Map<string, Function[]>();\r\n\r\n  /**\r\n   * Register an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event)!.push(handler);\r\n  }\r\n\r\n  /**\r\n   * Unregister an event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function to remove\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a one-time event handler\r\n   *\r\n   * @param event - Event name\r\n   * @param handler - Event handler function (will be called once)\r\n   */\r\n  once(event: string, handler: Function): void {\r\n    const onceHandler = (...args: any[]) => {\r\n      handler(...args);\r\n      this.off(event, onceHandler);\r\n    };\r\n    this.on(event, onceHandler);\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   *\r\n   * @param event - Event name\r\n   * @param args - Event arguments\r\n   */\r\n  emit(event: string, ...args: any[]): void {\r\n    const handlers = this.events.get(event);\r\n    if (handlers) {\r\n      // Create a copy to avoid issues if handlers are removed during iteration\r\n      const handlersCopy = [...handlers];\r\n      handlersCopy.forEach(handler => {\r\n        try {\r\n          handler(...args);\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in event handler for '${event}':`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all event handlers for a specific event\r\n   *\r\n   * @param event - Event name (if not provided, clears all events)\r\n   */\r\n  removeAllListeners(event?: string): void {\r\n    if (event) {\r\n      this.events.delete(event);\r\n    } else {\r\n      this.events.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of listeners for an event\r\n   *\r\n   * @param event - Event name\r\n   * @returns Number of listeners\r\n   */\r\n  listenerCount(event: string): number {\r\n    const handlers = this.events.get(event);\r\n    return handlers ? handlers.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Get all event names with listeners\r\n   *\r\n   * @returns Array of event names\r\n   */\r\n  eventNames(): string[] {\r\n    return Array.from(this.events.keys());\r\n  }\r\n}\r\n","/**\r\n * SignalM Connection\r\n *\r\n * Lightweight WebSocket-based connection compatible with SignalR hubs.\r\n * Supports method invocation, event handling, and automatic reconnection.\r\n */\r\n\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { JsonProtocol } from './JsonProtocol';\r\nimport { ExponentialBackoffRetryPolicy, type IRetryPolicy } from './RetryPolicy';\r\nimport {\r\n  ConnectionState,\r\n  type SignalMOptions,\r\n  type PendingInvocation\r\n} from './types';\r\n\r\nexport class SignalMConnection {\r\n  private ws: WebSocket | null = null;\r\n  private url: string;\r\n  private handlers = new Map<string, Function[]>();\r\n  private pendingInvocations = new Map<string, PendingInvocation>();\r\n  private invocationId = 0;\r\n  private reconnectPolicy: IRetryPolicy;\r\n  private state: ConnectionState = ConnectionState.Disconnected;\r\n  private reconnectAttempts = 0;\r\n  private eventEmitter: EventEmitter;\r\n  private debugLogging: boolean;\r\n  private connectionTimeout: number;\r\n  private invocationTimeout: number;\r\n  private reconnectTimeoutId: number | null = null;\r\n\r\n  constructor(url: string, options: SignalMOptions = {}) {\r\n    this.url = url;\r\n    this.reconnectPolicy = options.reconnectPolicy || new ExponentialBackoffRetryPolicy();\r\n    this.debugLogging = options.debug || false;\r\n    this.connectionTimeout = options.connectionTimeout || 30000;\r\n    this.invocationTimeout = options.invocationTimeout || 30000;\r\n    this.eventEmitter = new EventEmitter();\r\n  }\r\n\r\n  /**\r\n   * Start the connection\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.state !== ConnectionState.Disconnected) {\r\n      throw new Error('Connection is already started');\r\n    }\r\n\r\n    this.state = ConnectionState.Connecting;\r\n    this.log('Starting connection...');\r\n    return this.connect();\r\n  }\r\n\r\n  /**\r\n   * Stop the connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    this.log('Stopping connection...');\r\n\r\n    // Clear any pending reconnect\r\n    if (this.reconnectTimeoutId !== null) {\r\n      clearTimeout(this.reconnectTimeoutId);\r\n      this.reconnectTimeoutId = null;\r\n    }\r\n\r\n    if (this.ws) {\r\n      this.ws.close(1000, 'Normal closure');\r\n      this.ws = null;\r\n    }\r\n\r\n    this.state = ConnectionState.Disconnected;\r\n    this.eventEmitter.emit('disconnected');\r\n  }\r\n\r\n  /**\r\n   * Invoke a server method and wait for result\r\n   */\r\n  async invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const invocationId = this.generateInvocationId();\r\n    const message = JsonProtocol.writeInvocation(invocationId, methodName, args);\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        this.pendingInvocations.delete(invocationId);\r\n        reject(new Error(`Invocation '${methodName}' timed out after ${this.invocationTimeout}ms`));\r\n      }, this.invocationTimeout);\r\n\r\n      this.pendingInvocations.set(invocationId, {\r\n        resolve,\r\n        reject,\r\n        timeout: timeout as unknown as number\r\n      });\r\n\r\n      const serialized = JsonProtocol.serializeMessage(message);\r\n      this.log(`Invoking '${methodName}' (id: ${invocationId})`, args);\r\n      this.ws!.send(serialized);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a message without expecting a response (fire-and-forget)\r\n   */\r\n  send(methodName: string, ...args: any[]): void {\r\n    if (this.state !== ConnectionState.Connected) {\r\n      throw new Error(`Connection is not in Connected state (current: ${this.state})`);\r\n    }\r\n\r\n    const message = JsonProtocol.writeMessage(methodName, args);\r\n    const serialized = JsonProtocol.serializeMessage(message);\r\n    this.log(`Sending '${methodName}' (fire-and-forget)`, args);\r\n    this.ws!.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Register a handler for server-to-client method calls\r\n   */\r\n  on(methodName: string, handler: (...args: any[]) => void): void {\r\n    if (!this.handlers.has(methodName)) {\r\n      this.handlers.set(methodName, []);\r\n    }\r\n    this.handlers.get(methodName)!.push(handler);\r\n    this.log(`Registered handler for '${methodName}'`);\r\n  }\r\n\r\n  /**\r\n   * Remove a handler\r\n   */\r\n  off(methodName: string, handler: (...args: any[]) => void): void {\r\n    const handlers = this.handlers.get(methodName);\r\n    if (handlers) {\r\n      const index = handlers.indexOf(handler);\r\n      if (index !== -1) {\r\n        handlers.splice(index, 1);\r\n        this.log(`Removed handler for '${methodName}'`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register event listener for connection lifecycle events\r\n   */\r\n  onConnected(handler: () => void): void {\r\n    this.eventEmitter.on('connected', handler);\r\n  }\r\n\r\n  onDisconnected(handler: () => void): void {\r\n    this.eventEmitter.on('disconnected', handler);\r\n  }\r\n\r\n  onReconnecting(handler: () => void): void {\r\n    this.eventEmitter.on('reconnecting', handler);\r\n  }\r\n\r\n  onReconnected(handler: () => void): void {\r\n    this.eventEmitter.on('reconnected', handler);\r\n  }\r\n\r\n  onError(handler: (error: Error) => void): void {\r\n    this.eventEmitter.on('error', handler);\r\n  }\r\n\r\n  /**\r\n   * Get current connection state\r\n   */\r\n  get connectionState(): ConnectionState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Internal: Connect to WebSocket\r\n   */\r\n  private async connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const wsUrl = this.buildWebSocketUrl();\r\n      this.log(`Connecting to ${wsUrl}...`);\r\n\r\n      try {\r\n        this.ws = new WebSocket(wsUrl);\r\n      } catch (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n\r\n      // Connection timeout\r\n      const connectionTimeout = setTimeout(() => {\r\n        if (this.state === ConnectionState.Connecting) {\r\n          this.log('Connection timeout');\r\n          this.ws?.close();\r\n          reject(new Error(`Connection timeout after ${this.connectionTimeout}ms`));\r\n        }\r\n      }, this.connectionTimeout);\r\n\r\n      // Track handshake completion\r\n      let handshakeComplete = false;\r\n\r\n      this.ws.onopen = () => {\r\n        // Send handshake immediately after connection\r\n        const handshake = JsonProtocol.writeHandshake();\r\n        this.log('Sending handshake', handshake);\r\n        this.ws!.send(handshake);\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        // First message should be handshake response\r\n        if (!handshakeComplete) {\r\n          try {\r\n            const response = JsonProtocol.parseHandshake(event.data);\r\n            if (response.error) {\r\n              clearTimeout(connectionTimeout);\r\n              this.log('Handshake failed', response.error);\r\n              this.ws?.close();\r\n              reject(new Error(`Handshake failed: ${response.error}`));\r\n              return;\r\n            }\r\n\r\n            // Handshake successful\r\n            handshakeComplete = true;\r\n            clearTimeout(connectionTimeout);\r\n            this.state = ConnectionState.Connected;\r\n            this.reconnectAttempts = 0;\r\n            this.log('Handshake complete ✓');\r\n            this.log('Connected ✓');\r\n            this.eventEmitter.emit('connected');\r\n            resolve();\r\n          } catch (error) {\r\n            clearTimeout(connectionTimeout);\r\n            this.log('Handshake parse error', error);\r\n            this.ws?.close();\r\n            reject(new Error(`Handshake error: ${error}`));\r\n          }\r\n        } else {\r\n          // Handle normal messages\r\n          this.handleMessage(event.data);\r\n        }\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        this.log('WebSocket error', error);\r\n        this.eventEmitter.emit('error', new Error('WebSocket error'));\r\n      };\r\n\r\n      this.ws.onclose = (event) => {\r\n        clearTimeout(connectionTimeout);\r\n        this.handleClose(event);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle incoming messages\r\n   * SignalR can send multiple messages in one WebSocket frame, separated by \\x1E\r\n   */\r\n  private handleMessage(data: string): void {\r\n    // Split on record separator - server can send multiple messages at once\r\n    const messages = data.split('\\x1E').filter(msg => msg.length > 0);\r\n\r\n    for (const messageData of messages) {\r\n      try {\r\n        const message = JSON.parse(messageData);\r\n        this.log(`Received message (type: ${message.type})`, message);\r\n\r\n        if (JsonProtocol.isInvocation(message)) {\r\n          // Server calling client method\r\n          this.handleInvocation(message);\r\n        } else if (JsonProtocol.isCompletion(message)) {\r\n          // Response to client invoke()\r\n          this.handleCompletion(message);\r\n        } else if (JsonProtocol.isPing(message)) {\r\n          // Server ping (respond with pong)\r\n          this.handlePing();\r\n        } else if (JsonProtocol.isClose(message)) {\r\n          // Server requested close\r\n          this.log('Server requested close', message.error);\r\n          this.ws?.close(1000, 'Server closed connection');\r\n        }\r\n      } catch (error) {\r\n        this.log('Error parsing message', error);\r\n        console.error('[SignalM] Error parsing message:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle server-to-client invocation\r\n   */\r\n  private handleInvocation(message: any): void {\r\n    const handlers = this.handlers.get(message.target);\r\n    if (handlers) {\r\n      this.log(`Calling ${handlers.length} handler(s) for '${message.target}'`);\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(...(message.arguments || []));\r\n        } catch (error) {\r\n          console.error(`[SignalM] Error in handler for '${message.target}':`, error);\r\n        }\r\n      });\r\n    } else {\r\n      this.log(`No handler registered for '${message.target}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle completion (response to invoke)\r\n   */\r\n  private handleCompletion(message: any): void {\r\n    const pending = this.pendingInvocations.get(message.invocationId);\r\n    if (pending) {\r\n      clearTimeout(pending.timeout);\r\n      this.pendingInvocations.delete(message.invocationId);\r\n\r\n      if (message.error) {\r\n        this.log(`Invocation ${message.invocationId} failed: ${message.error}`);\r\n        pending.reject(new Error(message.error));\r\n      } else {\r\n        this.log(`Invocation ${message.invocationId} completed`, message.result);\r\n        pending.resolve(message.result);\r\n      }\r\n    } else {\r\n      this.log(`Received completion for unknown invocation ${message.invocationId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle ping (send pong)\r\n   */\r\n  private handlePing(): void {\r\n    const pongMessage = JsonProtocol.writePing(); // Pong uses same message type\r\n    const serialized = JsonProtocol.serializeMessage(pongMessage);\r\n    this.log('Received ping, sending pong');\r\n    this.ws?.send(serialized);\r\n  }\r\n\r\n  /**\r\n   * Internal: Handle connection close\r\n   */\r\n  private handleClose(event: CloseEvent): void {\r\n    this.log(`Connection closed (code: ${event.code}, reason: ${event.reason})`);\r\n    this.state = ConnectionState.Disconnected;\r\n    this.ws = null;\r\n\r\n    // Reject all pending invocations\r\n    this.pendingInvocations.forEach((pending) => {\r\n      clearTimeout(pending.timeout);\r\n      pending.reject(new Error('Connection closed'));\r\n    });\r\n    this.pendingInvocations.clear();\r\n\r\n    // Attempt reconnection if not normal closure (1000) or going away (1001)\r\n    if (event.code !== 1000 && event.code !== 1001) {\r\n      this.attemptReconnect();\r\n    } else {\r\n      this.eventEmitter.emit('disconnected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal: Attempt to reconnect\r\n   */\r\n  private async attemptReconnect(): Promise<void> {\r\n    const delay = this.reconnectPolicy.nextRetryDelay(this.reconnectAttempts);\r\n\r\n    if (delay === null) {\r\n      // Max retries exceeded\r\n      this.log('Max reconnection attempts exceeded');\r\n      this.eventEmitter.emit('disconnected');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    this.state = ConnectionState.Reconnecting;\r\n    this.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})...`);\r\n    this.eventEmitter.emit('reconnecting');\r\n\r\n    this.reconnectTimeoutId = setTimeout(async () => {\r\n      this.reconnectTimeoutId = null;\r\n      try {\r\n        await this.connect();\r\n        this.log('Reconnected ✓');\r\n        this.eventEmitter.emit('reconnected');\r\n      } catch (error) {\r\n        this.log('Reconnection failed', error);\r\n        this.attemptReconnect();\r\n      }\r\n    }, delay) as unknown as number;\r\n  }\r\n\r\n  /**\r\n   * Internal: Build WebSocket URL\r\n   */\r\n  private buildWebSocketUrl(): string {\r\n    // If URL is absolute, use it as-is\r\n    if (this.url.startsWith('ws://') || this.url.startsWith('wss://')) {\r\n      return this.url;\r\n    }\r\n\r\n    // Otherwise, construct from current page location\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const baseUrl = this.url.startsWith('/')\r\n      ? `${protocol}//${window.location.host}${this.url}`\r\n      : `${protocol}//${window.location.host}/${this.url}`;\r\n\r\n    return baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Internal: Generate unique invocation ID\r\n   */\r\n  private generateInvocationId(): string {\r\n    return (++this.invocationId).toString();\r\n  }\r\n\r\n  /**\r\n   * Internal: Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      if (data !== undefined) {\r\n        console.log(`[SignalM] ${message}`, data);\r\n      } else {\r\n        console.log(`[SignalM] ${message}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SignalMConnection, ConnectionState } from './signalm/index';\r\nimport { Patch } from './types';\r\nimport { ArrayOperation } from './hooks';\r\n\r\n/**\r\n * Manages SignalM connection to the Minimact server hub\r\n *\r\n * Drop-in replacement for SignalRManager using lightweight SignalM\r\n * Bundle size: ~3 KB gzipped (vs 18 KB with SignalR)\r\n */\r\nexport class SignalMManager {\r\n  private connection: SignalMConnection;\r\n  private debugLogging: boolean;\r\n  private eventHandlers: Map<string, Set<Function>>;\r\n\r\n  constructor(hubUrl: string = '/minimact', options: { reconnectInterval?: number; debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.eventHandlers = new Map();\r\n\r\n    // SignalM uses built-in exponential backoff, reconnectInterval is ignored\r\n    this.connection = new SignalMConnection(hubUrl, {\r\n      debug: this.debugLogging\r\n    });\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup SignalM event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    // Handle component updates from server\r\n    this.connection.on('UpdateComponent', (componentId: string, html: string) => {\r\n      this.log('UpdateComponent', { componentId, html });\r\n      this.emit('updateComponent', { componentId, html });\r\n    });\r\n\r\n    // Handle patch updates from server\r\n    this.connection.on('ApplyPatches', (componentId: string, patches: Patch[]) => {\r\n      this.log('ApplyPatches', { componentId, patches });\r\n      this.emit('applyPatches', { componentId, patches });\r\n    });\r\n\r\n    // Handle predicted patches (sent immediately for instant feedback)\r\n    this.connection.on('ApplyPrediction', (data: { componentId: string, patches: Patch[], confidence: number }) => {\r\n      this.log(`ApplyPrediction (${(data.confidence * 100).toFixed(0)}% confident)`, { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyPrediction', { componentId: data.componentId, patches: data.patches, confidence: data.confidence });\r\n    });\r\n\r\n    // Handle correction if prediction was wrong\r\n    this.connection.on('ApplyCorrection', (data: { componentId: string, patches: Patch[] }) => {\r\n      this.log('ApplyCorrection (prediction was incorrect)', { componentId: data.componentId, patches: data.patches });\r\n      this.emit('applyCorrection', { componentId: data.componentId, patches: data.patches });\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.connection.on('QueueHint', (data: {\r\n      componentId: string,\r\n      hintId: string,\r\n      patches: Patch[],\r\n      confidence: number,\r\n      predictedState: Record<string, any>\r\n    }) => {\r\n      this.log(`QueueHint '${data.hintId}' (${(data.confidence * 100).toFixed(0)}% confident)`, {\r\n        componentId: data.componentId,\r\n        patches: data.patches\r\n      });\r\n      this.emit('queueHint', data);\r\n    });\r\n\r\n    // Handle errors from server\r\n    this.connection.on('Error', (message: string) => {\r\n      console.error('[Minimact] Server error:', message);\r\n      this.emit('error', { message });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.connection.onReconnecting(() => {\r\n      this.log('Reconnecting...');\r\n      this.emit('reconnecting', {});\r\n    });\r\n\r\n    this.connection.onReconnected(() => {\r\n      this.log('Reconnected');\r\n      this.emit('reconnected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n\r\n    this.connection.onDisconnected(() => {\r\n      this.log('Connection closed');\r\n      this.emit('closed', {});\r\n    });\r\n\r\n    this.connection.onConnected(() => {\r\n      this.log('Connected to Minimact hub');\r\n      this.emit('connected', { connectionId: null }); // SignalM doesn't expose connectionId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the SignalM connection\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      await this.connection.start();\r\n      // Connected event already emitted by onConnected handler\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to connect:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the SignalM connection\r\n   */\r\n  async stop(): Promise<void> {\r\n    await this.connection.stop();\r\n    this.log('Disconnected from Minimact hub');\r\n  }\r\n\r\n  /**\r\n   * Register a component with the server\r\n   */\r\n  async registerComponent(componentId: string): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('RegisterComponent', componentId);\r\n      this.log('Registered component', { componentId });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to register component:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke a component method on the server\r\n   */\r\n  async invokeComponentMethod(componentId: string, methodName: string, args: any = {}): Promise<void> {\r\n    try {\r\n      const argsJson = JSON.stringify(args);\r\n      await this.connection.invoke('InvokeComponentMethod', componentId, methodName, argsJson);\r\n      this.log('Invoked method', { componentId, methodName, args });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to invoke method:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update client state on the server (single key-value)\r\n   */\r\n  async updateClientState(componentId: string, key: string, value: any): Promise<void> {\r\n    try {\r\n      const valueJson = JSON.stringify(value);\r\n      await this.connection.invoke('UpdateClientState', componentId, key, valueJson);\r\n      this.log('Updated client state', { componentId, key, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client state:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update multiple client-computed state values on the server\r\n   * Used for external library computations (lodash, moment, etc.)\r\n   */\r\n  async updateClientComputedState(componentId: string, computedValues: Record<string, any>): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateClientComputedState', componentId, computedValues);\r\n      this.log('Updated client-computed state', { componentId, computedValues });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update client-computed state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state on the server (from useState hook)\r\n   * This keeps server state in sync with client state changes\r\n   */\r\n  async updateComponentState(componentId: string, stateKey: string, value: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentState', componentId, stateKey, value);\r\n      this.log('Updated component state', { componentId, stateKey, value });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update DOM element state on the server (from useDomElementState hook)\r\n   * This keeps server aware of DOM changes for accurate rendering\r\n   */\r\n  async updateDomElementState(componentId: string, stateKey: string, snapshot: any): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateDomElementState', componentId, stateKey, snapshot);\r\n      this.log('Updated DOM element state', { componentId, stateKey, snapshot });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update DOM element state:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update component state with array operation metadata\r\n   * This provides semantic intent for array mutations, enabling precise template extraction\r\n   */\r\n  async updateComponentStateWithOperation(\r\n    componentId: string,\r\n    stateKey: string,\r\n    newValue: any,\r\n    operation: ArrayOperation\r\n  ): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateComponentStateWithOperation', componentId, stateKey, newValue, operation);\r\n      this.log('Updated component state with operation', { componentId, stateKey, operation, newValue });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update component state with operation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update query results on the server (from useDomQuery hook)\r\n   * This keeps server aware of query results for accurate rendering\r\n   */\r\n  async updateQueryResults(componentId: string, queryKey: string, results: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke('UpdateQueryResults', componentId, queryKey, results);\r\n      this.log('Updated query results', { componentId, queryKey, resultCount: results.length });\r\n    } catch (error) {\r\n      console.error('[Minimact] Failed to update query results:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic invoke method for calling server hub methods\r\n   */\r\n  async invoke(methodName: string, ...args: any[]): Promise<void> {\r\n    try {\r\n      await this.connection.invoke(methodName, ...args);\r\n      this.log(`Invoked ${methodName}`, { args });\r\n    } catch (error) {\r\n      console.error(`[Minimact] Failed to invoke ${methodName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events\r\n   */\r\n  on(event: string, handler: Function): void {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    this.eventHandlers.get(event)!.add(handler);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from events\r\n   */\r\n  off(event: string, handler: Function): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.delete(handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit event to subscribers\r\n   */\r\n  private emit(event: string, data: any): void {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact SignalM] ${message}`, data || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection state\r\n   * Maps SignalM ConnectionState to SignalR HubConnectionState for compatibility\r\n   */\r\n  get state(): string {\r\n    return this.connection.connectionState;\r\n  }\r\n\r\n  /**\r\n   * Get connection ID\r\n   * SignalM doesn't expose connection IDs (always returns null)\r\n   */\r\n  get connectionId(): string | null {\r\n    return null;\r\n  }\r\n}\r\n","import { Patch, VNode, VElement, VText } from './types';\r\n\r\n/**\r\n * Applies DOM patches from the server to the actual DOM\r\n * Handles surgical updates for minimal DOM manipulation\r\n */\r\nexport class DOMPatcher {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Apply an array of patches to a root element\r\n   */\r\n  applyPatches(rootElement: HTMLElement, patches: Patch[]): void {\r\n    this.log('Applying patches', { count: patches.length, patches });\r\n\r\n    for (const patch of patches) {\r\n      try {\r\n        this.applyPatch(rootElement, patch);\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to apply patch:', patch, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a single patch to the DOM\r\n   */\r\n  private applyPatch(rootElement: HTMLElement, patch: Patch): void {\r\n    const targetElement = this.getElementByPath(rootElement, patch.path);\r\n\r\n    if (!targetElement && patch.type !== 'Create') {\r\n      console.warn('[Minimact] Target element not found for patch:', patch);\r\n      return;\r\n    }\r\n\r\n    switch (patch.type) {\r\n      case 'Create':\r\n        this.patchCreate(rootElement, patch.path, patch.node);\r\n        break;\r\n      case 'Remove':\r\n        this.patchRemove(targetElement!);\r\n        break;\r\n      case 'Replace':\r\n        this.patchReplace(targetElement!, patch.node);\r\n        break;\r\n      case 'UpdateText':\r\n        this.patchUpdateText(targetElement!, patch.content);\r\n        break;\r\n      case 'UpdateProps':\r\n        this.patchUpdateProps(targetElement as HTMLElement, patch.props);\r\n        break;\r\n      case 'ReorderChildren':\r\n        this.patchReorderChildren(targetElement as HTMLElement, patch.order);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and insert a new node\r\n   */\r\n  private patchCreate(rootElement: HTMLElement, path: number[], node: VNode): void {\r\n    const newElement = this.createElementFromVNode(node);\r\n\r\n    if (path.length === 0) {\r\n      // Replace root\r\n      rootElement.innerHTML = '';\r\n      rootElement.appendChild(newElement);\r\n    } else {\r\n      // Insert at path\r\n      const parentPath = path.slice(0, -1);\r\n      const index = path[path.length - 1];\r\n      const parent = this.getElementByPath(rootElement, parentPath) as HTMLElement;\r\n\r\n      if (parent) {\r\n        if (index >= parent.childNodes.length) {\r\n          parent.appendChild(newElement);\r\n        } else {\r\n          parent.insertBefore(newElement, parent.childNodes[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Created node', { path, node });\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the DOM\r\n   */\r\n  private patchRemove(element: Node): void {\r\n    if (element.parentNode) {\r\n      element.parentNode.removeChild(element);\r\n      this.log('Removed node', { element });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace a node with a new one\r\n   */\r\n  private patchReplace(oldElement: Node, newNode: VNode): void {\r\n    const newElement = this.createElementFromVNode(newNode);\r\n\r\n    if (oldElement.parentNode) {\r\n      oldElement.parentNode.replaceChild(newElement, oldElement);\r\n      this.log('Replaced node', { oldElement, newNode });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update text content of a text node\r\n   */\r\n  private patchUpdateText(element: Node, content: string): void {\r\n    if (element.nodeType === Node.TEXT_NODE) {\r\n      element.textContent = content;\r\n    } else {\r\n      // If it's an element, update its text content\r\n      element.textContent = content;\r\n    }\r\n    this.log('Updated text', { element, content });\r\n  }\r\n\r\n  /**\r\n   * Update element properties/attributes\r\n   */\r\n  private patchUpdateProps(element: HTMLElement, props: Record<string, string>): void {\r\n    // Remove old attributes not in new props\r\n    const oldAttrs = Array.from(element.attributes);\r\n    for (const attr of oldAttrs) {\r\n      if (!(attr.name in props) && !attr.name.startsWith('data-minimact-')) {\r\n        element.removeAttribute(attr.name);\r\n      }\r\n    }\r\n\r\n    // Set new attributes\r\n    for (const [key, value] of Object.entries(props)) {\r\n      if (key === 'style') {\r\n        element.setAttribute('style', value);\r\n      } else if (key === 'class' || key === 'className') {\r\n        element.className = value;\r\n      } else if (key.startsWith('on')) {\r\n        // Event handlers are managed separately\r\n        continue;\r\n      } else {\r\n        element.setAttribute(key, value);\r\n      }\r\n    }\r\n\r\n    this.log('Updated props', { element, props });\r\n  }\r\n\r\n  /**\r\n   * Reorder children based on keys\r\n   */\r\n  private patchReorderChildren(element: HTMLElement, order: string[]): void {\r\n    const keyedChildren = new Map<string, Node>();\r\n\r\n    // Build map of keyed children\r\n    for (const child of Array.from(element.childNodes)) {\r\n      if (child instanceof HTMLElement) {\r\n        const key = child.getAttribute('data-key') || child.getAttribute('key');\r\n        if (key) {\r\n          keyedChildren.set(key, child);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reorder based on order array\r\n    for (let i = 0; i < order.length; i++) {\r\n      const key = order[i];\r\n      const child = keyedChildren.get(key);\r\n\r\n      if (child) {\r\n        const currentChild = element.childNodes[i];\r\n        if (currentChild !== child) {\r\n          element.insertBefore(child, currentChild);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.log('Reordered children', { element, order });\r\n  }\r\n\r\n  /**\r\n   * Get a DOM element by its path (array of indices)\r\n   */\r\n  private getElementByPath(rootElement: HTMLElement, path: number[]): Node | null {\r\n    let current: Node = rootElement;\r\n\r\n    for (const index of path) {\r\n      if (index >= current.childNodes.length) {\r\n        return null;\r\n      }\r\n      current = current.childNodes[index];\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Create a DOM element from a VNode\r\n   */\r\n  private createElementFromVNode(vnode: VNode): Node {\r\n    switch (vnode.type) {\r\n      case 'Text':\r\n        return document.createTextNode((vnode as VText).content);\r\n\r\n      case 'Element': {\r\n        const velem = vnode as VElement;\r\n        const element = document.createElement(velem.tag);\r\n\r\n        // Set attributes\r\n        for (const [key, value] of Object.entries(velem.props || {})) {\r\n          if (key === 'className' || key === 'class') {\r\n            element.className = value;\r\n          } else if (key.startsWith('on')) {\r\n            // Event handlers will be attached by event delegation\r\n            element.setAttribute(`data-${key.toLowerCase()}`, value);\r\n          } else {\r\n            element.setAttribute(key, value);\r\n          }\r\n        }\r\n\r\n        // Set key if present\r\n        if (velem.key) {\r\n          element.setAttribute('data-key', velem.key);\r\n        }\r\n\r\n        // Create children\r\n        for (const child of velem.children || []) {\r\n          element.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return element;\r\n      }\r\n\r\n      case 'Fragment': {\r\n        const fragment = document.createDocumentFragment();\r\n        const vfrag = vnode as any;\r\n\r\n        for (const child of vfrag.children || []) {\r\n          fragment.appendChild(this.createElementFromVNode(child));\r\n        }\r\n\r\n        return fragment;\r\n      }\r\n\r\n      case 'RawHtml': {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = (vnode as any).html;\r\n        return div;\r\n      }\r\n\r\n      default:\r\n        console.warn('[Minimact] Unknown VNode type:', vnode);\r\n        return document.createTextNode('');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace entire HTML (fallback when patches aren't available)\r\n   */\r\n  replaceHTML(rootElement: HTMLElement, html: string): void {\r\n    rootElement.innerHTML = html;\r\n    this.log('Replaced entire HTML', { html });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact DOMPatcher] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { ComponentState } from './types';\r\n\r\n/**\r\n * Manages client-side state (useClientState) with reactive updates\r\n * Handles local state that doesn't require server round-trips\r\n */\r\nexport class ClientStateManager {\r\n  private states: Map<string, ComponentState>;\r\n  private subscribers: Map<string, Map<string, Set<Function>>>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.states = new Map();\r\n    this.subscribers = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Initialize client state for a component\r\n   */\r\n  initializeComponent(componentId: string, initialState: ComponentState = {}): void {\r\n    this.states.set(componentId, { ...initialState });\r\n    this.subscribers.set(componentId, new Map());\r\n    this.log('Initialized component state', { componentId, initialState });\r\n  }\r\n\r\n  /**\r\n   * Get client state value\r\n   */\r\n  getState(componentId: string, key: string): any {\r\n    const componentState = this.states.get(componentId);\r\n    return componentState ? componentState[key] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Set client state value and trigger updates\r\n   */\r\n  setState(componentId: string, key: string, value: any): void {\r\n    const componentState = this.states.get(componentId);\r\n\r\n    if (!componentState) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return;\r\n    }\r\n\r\n    // Update state\r\n    const oldValue = componentState[key];\r\n    componentState[key] = value;\r\n\r\n    this.log('State updated', { componentId, key, oldValue, newValue: value });\r\n\r\n    // Notify subscribers\r\n    this.notifySubscribers(componentId, key, value, oldValue);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to state changes\r\n   */\r\n  subscribe(componentId: string, key: string, callback: (value: any, oldValue: any) => void): () => void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      console.warn(`[Minimact] Component ${componentId} not initialized`);\r\n      return () => {};\r\n    }\r\n\r\n    if (!componentSubscribers.has(key)) {\r\n      componentSubscribers.set(key, new Set());\r\n    }\r\n\r\n    componentSubscribers.get(key)!.add(callback);\r\n    this.log('Subscribed to state', { componentId, key });\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      componentSubscribers.get(key)?.delete(callback);\r\n      this.log('Unsubscribed from state', { componentId, key });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notify all subscribers of a state change\r\n   */\r\n  private notifySubscribers(componentId: string, key: string, value: any, oldValue: any): void {\r\n    const componentSubscribers = this.subscribers.get(componentId);\r\n\r\n    if (!componentSubscribers) {\r\n      return;\r\n    }\r\n\r\n    const keySubscribers = componentSubscribers.get(key);\r\n\r\n    if (keySubscribers) {\r\n      keySubscribers.forEach(callback => {\r\n        try {\r\n          callback(value, oldValue);\r\n        } catch (error) {\r\n          console.error('[Minimact] Error in state subscriber:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all state for a component\r\n   */\r\n  getComponentState(componentId: string): ComponentState | undefined {\r\n    return this.states.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update multiple state values at once\r\n   */\r\n  updateState(componentId: string, updates: ComponentState): void {\r\n    for (const [key, value] of Object.entries(updates)) {\r\n      this.setState(componentId, key, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear state for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    this.states.delete(componentId);\r\n    this.subscribers.delete(componentId);\r\n    this.log('Cleared component state', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Bind state to a DOM element's value/content\r\n   */\r\n  bindToElement(\r\n    componentId: string,\r\n    key: string,\r\n    element: HTMLElement,\r\n    property: 'value' | 'textContent' | 'innerHTML' = 'textContent'\r\n  ): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      this.updateElement(element, property, initialValue);\r\n    }\r\n\r\n    // Subscribe to changes\r\n    return this.subscribe(componentId, key, (value) => {\r\n      this.updateElement(element, property, value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a DOM element based on property type\r\n   */\r\n  private updateElement(element: HTMLElement, property: string, value: any): void {\r\n    switch (property) {\r\n      case 'value':\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          element.value = String(value);\r\n        }\r\n        break;\r\n      case 'textContent':\r\n        element.textContent = String(value);\r\n        break;\r\n      case 'innerHTML':\r\n        element.innerHTML = String(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind input element to state (two-way binding)\r\n   */\r\n  bindInput(componentId: string, key: string, input: HTMLInputElement | HTMLTextAreaElement): () => void {\r\n    // Set initial value\r\n    const initialValue = this.getState(componentId, key);\r\n    if (initialValue !== undefined) {\r\n      input.value = String(initialValue);\r\n    }\r\n\r\n    // Listen to input changes\r\n    const inputHandler = (e: Event) => {\r\n      const target = e.target as HTMLInputElement | HTMLTextAreaElement;\r\n      this.setState(componentId, key, target.value);\r\n    };\r\n\r\n    input.addEventListener('input', inputHandler);\r\n\r\n    // Subscribe to state changes from other sources\r\n    const unsubscribe = this.subscribe(componentId, key, (value) => {\r\n      if (input.value !== String(value)) {\r\n        input.value = String(value);\r\n      }\r\n    });\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      input.removeEventListener('input', inputHandler);\r\n      unsubscribe();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact ClientState] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import type { HintQueue } from './hint-queue';\r\nimport type { DOMPatcher } from './dom-patcher';\r\nimport type { PlaygroundBridge } from './playground-bridge';\r\n\r\n/**\r\n * Event delegation system for handling component events\r\n * Uses a single root listener for performance\r\n */\r\nexport class EventDelegation {\r\n  private rootElement: HTMLElement;\r\n  private componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>;\r\n  private debugLogging: boolean;\r\n  private eventListeners: Map<string, EventListener>;\r\n  private hintQueue?: HintQueue;\r\n  private domPatcher?: DOMPatcher;\r\n  private playgroundBridge?: PlaygroundBridge;\r\n\r\n  constructor(\r\n    rootElement: HTMLElement,\r\n    componentMethodInvoker: (componentId: string, methodName: string, args?: any) => Promise<void>,\r\n    options: {\r\n      debugLogging?: boolean;\r\n      hintQueue?: HintQueue;\r\n      domPatcher?: DOMPatcher;\r\n      playgroundBridge?: PlaygroundBridge;\r\n    } = {}\r\n  ) {\r\n    this.rootElement = rootElement;\r\n    this.componentMethodInvoker = componentMethodInvoker;\r\n    this.debugLogging = options.debugLogging || false;\r\n    this.hintQueue = options.hintQueue;\r\n    this.domPatcher = options.domPatcher;\r\n    this.playgroundBridge = options.playgroundBridge;\r\n    this.eventListeners = new Map();\r\n\r\n    this.setupEventDelegation();\r\n  }\r\n\r\n  /**\r\n   * Setup event delegation for common events\r\n   */\r\n  private setupEventDelegation(): void {\r\n    const eventTypes = [\r\n      'click',\r\n      'dblclick',\r\n      'input',\r\n      'change',\r\n      'submit',\r\n      'focus',\r\n      'blur',\r\n      'keydown',\r\n      'keyup',\r\n      'keypress',\r\n      'mouseenter',\r\n      'mouseleave',\r\n      'mouseover',\r\n      'mouseout'\r\n    ];\r\n\r\n    for (const eventType of eventTypes) {\r\n      const listener = this.createEventListener(eventType);\r\n      this.eventListeners.set(eventType, listener);\r\n      this.rootElement.addEventListener(eventType, listener, true); // Use capture phase\r\n    }\r\n\r\n    this.log('Event delegation setup complete', { eventTypes });\r\n  }\r\n\r\n  /**\r\n   * Create an event listener for a specific event type\r\n   */\r\n  private createEventListener(eventType: string): EventListener {\r\n    return async (event: Event) => {\r\n      const target = event.target as HTMLElement;\r\n\r\n      // Find the nearest element with an event handler\r\n      const handlerElement = this.findHandlerElement(target, eventType);\r\n\r\n      if (!handlerElement) {\r\n        return;\r\n      }\r\n\r\n      // Get handler information\r\n      const handler = this.getEventHandler(handlerElement, eventType);\r\n\r\n      if (!handler) {\r\n        return;\r\n      }\r\n\r\n      // Prevent default for submit events\r\n      if (eventType === 'submit') {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.log('Event triggered', { eventType, handler, target });\r\n\r\n      // Execute handler\r\n      await this.executeHandler(handler, event, handlerElement);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the nearest element with an event handler attribute\r\n   */\r\n  private findHandlerElement(element: HTMLElement | null, eventType: string): HTMLElement | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const attrName = `data-on${eventType}`;\r\n      const legacyAttrName = `on${eventType}`;\r\n\r\n      if (current.hasAttribute(attrName) || current.hasAttribute(legacyAttrName)) {\r\n        return current;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get event handler information from element\r\n   */\r\n  private getEventHandler(element: HTMLElement, eventType: string): EventHandler | null {\r\n    const attrName = `data-on${eventType}`;\r\n    const legacyAttrName = `on${eventType}`;\r\n\r\n    const handlerStr = element.getAttribute(attrName) || element.getAttribute(legacyAttrName);\r\n\r\n    if (!handlerStr) {\r\n      return null;\r\n    }\r\n\r\n    // Parse handler string\r\n    // Format: \"MethodName\" or \"MethodName:arg1:arg2\"\r\n    const parts = handlerStr.split(':');\r\n    const methodName = parts[0];\r\n    const args = parts.slice(1);\r\n\r\n    // Find component ID\r\n    const componentId = this.findComponentId(element);\r\n\r\n    if (!componentId) {\r\n      console.warn('[Minimact] No component ID found for event handler:', handlerStr);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      componentId,\r\n      methodName,\r\n      args\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the component ID for an element\r\n   */\r\n  private findComponentId(element: HTMLElement | null): string | null {\r\n    let current = element;\r\n\r\n    while (current && current !== this.rootElement) {\r\n      const componentId = current.getAttribute('data-minimact-component-id');\r\n      if (componentId) {\r\n        return componentId;\r\n      }\r\n\r\n      current = current.parentElement;\r\n    }\r\n\r\n    // Check root element\r\n    const rootComponentId = this.rootElement.getAttribute('data-minimact-component-id');\r\n    return rootComponentId;\r\n  }\r\n\r\n  /**\r\n   * Execute an event handler\r\n   */\r\n  private async executeHandler(handler: EventHandler, event: Event, element: HTMLElement): Promise<void> {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      // Build args object\r\n      const argsObj: any = {};\r\n\r\n      // Add parsed args from handler string\r\n      if (handler.args.length > 0) {\r\n        argsObj.args = handler.args;\r\n      }\r\n\r\n      // Add event data\r\n      if (event instanceof MouseEvent) {\r\n        argsObj.mouse = {\r\n          clientX: event.clientX,\r\n          clientY: event.clientY,\r\n          button: event.button\r\n        };\r\n      }\r\n\r\n      if (event instanceof KeyboardEvent) {\r\n        argsObj.keyboard = {\r\n          key: event.key,\r\n          code: event.code,\r\n          ctrlKey: event.ctrlKey,\r\n          shiftKey: event.shiftKey,\r\n          altKey: event.altKey\r\n        };\r\n      }\r\n\r\n      // Add target value for input events\r\n      if (event.type === 'input' || event.type === 'change') {\r\n        const target = event.target as HTMLInputElement;\r\n        argsObj.value = target.value;\r\n      }\r\n\r\n      // Convert argsObj to array format expected by server\r\n      // Server expects: object[] args, so we pass the actual argument values as an array\r\n      const argsArray: any[] = [];\r\n\r\n      // For input/change events, pass the value as the first argument\r\n      if (argsObj.value !== undefined) {\r\n        argsArray.push(argsObj.value);\r\n      }\r\n\r\n      // For handlers with explicit args, add those\r\n      if (argsObj.args && Array.isArray(argsObj.args)) {\r\n        argsArray.push(...argsObj.args);\r\n      }\r\n\r\n      // Check hint queue for cached prediction (CACHE HIT!)\r\n      if (this.hintQueue && this.domPatcher) {\r\n        // Build hint ID based on method name (simplified - in production would be more sophisticated)\r\n        const hintId = `${handler.methodName}`;\r\n\r\n        // Try to match hint based on the method being called\r\n        // This is a simplified version - in reality we'd need to know the state change\r\n        const matchedHint = this.tryMatchHint(handler.componentId, handler.methodName);\r\n\r\n        if (matchedHint) {\r\n          // 🟢 CACHE HIT! Apply patches instantly\r\n          const componentElement = this.findComponentElement(handler.componentId);\r\n          if (componentElement) {\r\n            this.domPatcher.applyPatches(componentElement, matchedHint.patches as any[]);\r\n\r\n            const latency = performance.now() - startTime;\r\n\r\n            // Notify playground of cache hit\r\n            if (this.playgroundBridge) {\r\n              this.playgroundBridge.cacheHit({\r\n                componentId: handler.componentId,\r\n                hintId: matchedHint.hintId,\r\n                latency,\r\n                confidence: matchedHint.confidence,\r\n                patchCount: matchedHint.patches.length\r\n              });\r\n            }\r\n\r\n            this.log(`🟢 CACHE HIT! Applied ${matchedHint.patches.length} patches in ${latency.toFixed(2)}ms`, {\r\n              handler,\r\n              confidence: (matchedHint.confidence * 100).toFixed(0) + '%'\r\n            });\r\n\r\n            // Still notify server in background for verification\r\n            this.componentMethodInvoker(handler.componentId, handler.methodName, argsArray).catch(err => {\r\n              console.error('[Minimact] Background server notification failed:', err);\r\n            });\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 🔴 CACHE MISS - No prediction found, send to server\r\n      await this.componentMethodInvoker(handler.componentId, handler.methodName, argsArray);\r\n\r\n      const latency = performance.now() - startTime;\r\n\r\n      // Notify playground of cache miss\r\n      if (this.playgroundBridge) {\r\n        this.playgroundBridge.cacheMiss({\r\n          componentId: handler.componentId,\r\n          methodName: handler.methodName,\r\n          latency,\r\n          patchCount: 0 // We don't know patch count in this flow\r\n        });\r\n      }\r\n\r\n      this.log(`🔴 CACHE MISS - Server latency: ${latency.toFixed(2)}ms`, { handler, argsObj });\r\n    } catch (error) {\r\n      console.error('[Minimact] Error executing handler:', handler, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Try to match a hint in the queue for this method invocation\r\n   * Simplified version - checks if there's a hint matching the method name\r\n   */\r\n  private tryMatchHint(componentId: string, methodName: string): { hintId: string; patches: any[]; confidence: number } | null {\r\n    if (!this.hintQueue) return null;\r\n\r\n    // In a real implementation, we'd need to build the predicted state change\r\n    // For now, we'll use a simplified heuristic based on method name\r\n    // The server sends hints with IDs like \"count_1\" for count going to 1\r\n\r\n    // Try to match by checking all hints for this component\r\n    // This is a placeholder - the actual matching logic would be more sophisticated\r\n    return null; // TODO: Implement proper hint matching\r\n  }\r\n\r\n  /**\r\n   * Find the component element by component ID\r\n   */\r\n  private findComponentElement(componentId: string): HTMLElement | null {\r\n    const element = this.rootElement.querySelector(`[data-minimact-component-id=\"${componentId}\"]`);\r\n    return element as HTMLElement;\r\n  }\r\n\r\n  /**\r\n   * Cleanup event listeners\r\n   */\r\n  destroy(): void {\r\n    for (const [eventType, listener] of this.eventListeners.entries()) {\r\n      this.rootElement.removeEventListener(eventType, listener, true);\r\n    }\r\n    this.eventListeners.clear();\r\n    this.log('Event delegation destroyed');\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact EventDelegation] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\ninterface EventHandler {\r\n  componentId: string;\r\n  methodName: string;\r\n  args: string[];\r\n}\r\n","import { ComponentMetadata } from './types';\r\nimport { ClientStateManager } from './client-state';\r\n\r\n/**\r\n * Handles hydration of server-rendered HTML with client interactivity\r\n * Identifies and manages client zones, server zones, and hybrid zones\r\n */\r\nexport class HydrationManager {\r\n  private clientState: ClientStateManager;\r\n  private components: Map<string, ComponentMetadata>;\r\n  private debugLogging: boolean;\r\n\r\n  constructor(clientState: ClientStateManager, options: { debugLogging?: boolean } = {}) {\r\n    this.clientState = clientState;\r\n    this.components = new Map();\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Hydrate a component root element\r\n   */\r\n  hydrateComponent(componentId: string, rootElement: HTMLElement): void {\r\n    this.log('Hydrating component', { componentId });\r\n\r\n    // The actual component element is the first child of the container\r\n    // (rootElement is #minimact-root, first child is the actual component div)\r\n    const componentElement = rootElement.firstElementChild as HTMLElement;\r\n    if (!componentElement) {\r\n      console.error('[Minimact Hydration] No component element found in root');\r\n      return;\r\n    }\r\n\r\n    // Create component metadata\r\n    const metadata: ComponentMetadata = {\r\n      componentId,\r\n      element: componentElement,  // Use the actual component element, not the container\r\n      clientState: {},\r\n      serverState: {}\r\n    };\r\n\r\n    this.components.set(componentId, metadata);\r\n\r\n    // Set component ID on root element\r\n    rootElement.setAttribute('data-minimact-component-id', componentId);\r\n\r\n    // Initialize client state\r\n    this.clientState.initializeComponent(componentId);\r\n\r\n    // Find and hydrate client zones\r\n    this.hydrateClientZones(componentId, rootElement);\r\n\r\n    // Find and bind state to elements\r\n    this.bindStateElements(componentId, rootElement);\r\n\r\n    this.log('Component hydrated', { componentId, metadata });\r\n  }\r\n\r\n  /**\r\n   * Hydrate client-only zones (data-minimact-client-scope)\r\n   */\r\n  private hydrateClientZones(componentId: string, rootElement: HTMLElement): void {\r\n    const clientZones = rootElement.querySelectorAll('[data-minimact-client-scope]');\r\n\r\n    this.log('Found client zones', { count: clientZones.length });\r\n\r\n    clientZones.forEach((zone) => {\r\n      const element = zone as HTMLElement;\r\n\r\n      // Get state name if specified\r\n      const stateName = element.getAttribute('data-state');\r\n\r\n      if (stateName) {\r\n        // Initialize state from element\r\n        const initialValue = this.getInitialValue(element);\r\n        this.clientState.setState(componentId, stateName, initialValue);\r\n\r\n        // Bind element to state\r\n        if (element instanceof HTMLInputElement ||\r\n            element instanceof HTMLTextAreaElement ||\r\n            element instanceof HTMLSelectElement) {\r\n          this.clientState.bindInput(componentId, stateName, element);\r\n        }\r\n\r\n        this.log('Hydrated client zone', { element, stateName, initialValue });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Bind elements with data-bind attribute to state\r\n   */\r\n  private bindStateElements(componentId: string, rootElement: HTMLElement): void {\r\n    const boundElements = rootElement.querySelectorAll('[data-bind]');\r\n\r\n    this.log('Found bound elements', { count: boundElements.length });\r\n\r\n    boundElements.forEach((elem) => {\r\n      const element = elem as HTMLElement;\r\n      const bindKey = element.getAttribute('data-bind');\r\n\r\n      if (!bindKey) {\r\n        return;\r\n      }\r\n\r\n      // Determine binding type\r\n      const isClientScope = this.isInClientScope(element);\r\n      const bindProperty = this.determineBindProperty(element);\r\n\r\n      if (isClientScope) {\r\n        // Client-side binding\r\n        this.clientState.bindToElement(componentId, bindKey, element, bindProperty);\r\n        this.log('Bound to client state', { element, bindKey, bindProperty });\r\n      } else {\r\n        // Server-side binding - will be updated via patches\r\n        this.log('Server-bound element (patch-controlled)', { element, bindKey });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if an element is within a client scope\r\n   */\r\n  private isInClientScope(element: HTMLElement): boolean {\r\n    let current: HTMLElement | null = element;\r\n\r\n    while (current) {\r\n      if (current.hasAttribute('data-minimact-client-scope')) {\r\n        return true;\r\n      }\r\n      if (current.hasAttribute('data-minimact-server-scope')) {\r\n        return false;\r\n      }\r\n      current = current.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determine which property to bind (value, textContent, innerHTML)\r\n   */\r\n  private determineBindProperty(element: HTMLElement): 'value' | 'textContent' | 'innerHTML' {\r\n    if (element instanceof HTMLInputElement ||\r\n        element instanceof HTMLTextAreaElement ||\r\n        element instanceof HTMLSelectElement) {\r\n      return 'value';\r\n    }\r\n\r\n    if (element.hasAttribute('data-bind-html')) {\r\n      return 'innerHTML';\r\n    }\r\n\r\n    return 'textContent';\r\n  }\r\n\r\n  /**\r\n   * Get initial value from an element\r\n   */\r\n  private getInitialValue(element: HTMLElement): any {\r\n    if (element instanceof HTMLInputElement) {\r\n      if (element.type === 'checkbox') {\r\n        return element.checked;\r\n      } else if (element.type === 'number') {\r\n        return element.valueAsNumber || 0;\r\n      } else {\r\n        return element.value;\r\n      }\r\n    }\r\n\r\n    if (element instanceof HTMLTextAreaElement) {\r\n      return element.value;\r\n    }\r\n\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element.value;\r\n    }\r\n\r\n    return element.textContent || '';\r\n  }\r\n\r\n  /**\r\n   * Dehydrate (cleanup) a component\r\n   */\r\n  dehydrateComponent(componentId: string): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (!metadata) {\r\n      return;\r\n    }\r\n\r\n    // Clear client state\r\n    this.clientState.clearComponent(componentId);\r\n\r\n    // Remove from registry\r\n    this.components.delete(componentId);\r\n\r\n    this.log('Component dehydrated', { componentId });\r\n  }\r\n\r\n  /**\r\n   * Get component metadata\r\n   */\r\n  getComponent(componentId: string): ComponentMetadata | undefined {\r\n    return this.components.get(componentId);\r\n  }\r\n\r\n  /**\r\n   * Update server state for a component\r\n   */\r\n  updateServerState(componentId: string, key: string, value: any): void {\r\n    const metadata = this.components.get(componentId);\r\n\r\n    if (metadata) {\r\n      metadata.serverState[key] = value;\r\n      this.log('Updated server state', { componentId, key, value });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hydrate all components on the page\r\n   */\r\n  hydrateAll(): void {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    this.log('Hydrating all components', { count: components.length });\r\n\r\n    components.forEach((element) => {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        this.hydrateComponent(componentId, element as HTMLElement);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact Hydration] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","import { TemplatePatch, Patch, LoopTemplate, ItemTemplate, VNode, VElement, VText, Binding } from './types';\r\n\r\n/**\r\n * Template Renderer\r\n *\r\n * Renders template patches with parameter values for runtime predictions.\r\n * Enables 98% memory reduction by storing patterns instead of concrete values.\r\n *\r\n * Example:\r\n *   template: \"Count: {0}\"\r\n *   params: [42]\r\n *   result: \"Count: 42\"\r\n */\r\nexport class TemplateRenderer {\r\n  /**\r\n   * Render a template string with parameters\r\n   *\r\n   * @param template - Template string with {0}, {1}, etc. placeholders\r\n   * @param params - Parameter values to substitute\r\n   * @returns Rendered string with parameters substituted\r\n   *\r\n   * @example\r\n   * renderTemplate(\"Count: {0}\", [42]) → \"Count: 42\"\r\n   * renderTemplate(\"Hello, {0} {1}!\", [\"John\", \"Doe\"]) → \"Hello, John Doe!\"\r\n   */\r\n  static renderTemplate(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace each placeholder {0}, {1}, etc. with corresponding parameter\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = this.formatValue(param);\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Render a template patch with current state values\r\n   *\r\n   * @param templatePatch - Template patch data\r\n   * @param stateValues - Current state values (key-value pairs)\r\n   * @returns Rendered string\r\n   *\r\n   * @example\r\n   * const tp = { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] };\r\n   * renderTemplatePatch(tp, { count: 42 }) → \"Count: 42\"\r\n   *\r\n   * @example Conditional\r\n   * const tp = {\r\n   *   template: \"{0}\",\r\n   *   bindings: [\"isActive\"],\r\n   *   conditionalTemplates: { \"true\": \"Active\", \"false\": \"Inactive\" },\r\n   *   conditionalBindingIndex: 0\r\n   * };\r\n   * renderTemplatePatch(tp, { isActive: true }) → \"Active\"\r\n   */\r\n  static renderTemplatePatch(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string {\r\n    // Check for conditional templates\r\n    if (templatePatch.conditionalTemplates && templatePatch.conditionalBindingIndex !== undefined) {\r\n      const bindingIndex = templatePatch.conditionalBindingIndex;\r\n      const conditionBinding = templatePatch.bindings[bindingIndex];\r\n\r\n      // Get condition value (handle both string and Binding object)\r\n      const conditionKey = typeof conditionBinding === 'object' && 'stateKey' in conditionBinding\r\n        ? conditionBinding.stateKey\r\n        : conditionBinding as string;\r\n      const conditionValue = stateValues[conditionKey];\r\n\r\n      // Lookup the template for this condition value\r\n      const conditionalTemplate = templatePatch.conditionalTemplates[String(conditionValue)];\r\n\r\n      if (conditionalTemplate !== undefined) {\r\n        // If it's a simple conditional (just maps to string), return it\r\n        if (!conditionalTemplate.includes('{')) {\r\n          return conditionalTemplate;\r\n        }\r\n\r\n        // Otherwise, it's a conditional template with other bindings\r\n        // Apply transforms if present\r\n        const params = templatePatch.bindings.map(binding => {\r\n          if (typeof binding === 'object' && 'stateKey' in binding) {\r\n            const value = stateValues[binding.stateKey];\r\n            return binding.transform ? this.applyTransform(value, binding.transform) : value;\r\n          }\r\n          return stateValues[binding as string];\r\n        });\r\n        return this.renderTemplate(conditionalTemplate, params);\r\n      }\r\n    }\r\n\r\n    // Standard template rendering\r\n    const params = templatePatch.bindings.map((binding, index) => {\r\n      // Phase 6: Support Binding objects with transforms\r\n      if (typeof binding === 'object' && 'stateKey' in binding) {\r\n        const value = stateValues[binding.stateKey];\r\n\r\n        // Apply transform if present\r\n        if (binding.transform) {\r\n          return this.applyTransform(value, binding.transform);\r\n        }\r\n\r\n        return value;\r\n      }\r\n\r\n      // Backward compatibility: Simple string binding\r\n      return stateValues[binding as string];\r\n    });\r\n\r\n    return this.renderTemplate(templatePatch.template, params);\r\n  }\r\n\r\n  /**\r\n   * Convert a template patch to concrete patch(es) with current state\r\n   *\r\n   * @param patch - Template patch (UpdateTextTemplate, UpdatePropsTemplate, or UpdateListTemplate)\r\n   * @param stateValues - Current state values\r\n   * @returns Concrete patch or array of patches\r\n   *\r\n   * @example\r\n   * const patch = {\r\n   *   type: 'UpdateTextTemplate',\r\n   *   path: [0, 0],\r\n   *   templatePatch: { template: \"Count: {0}\", bindings: [\"count\"], slots: [7] }\r\n   * };\r\n   * materializePatch(patch, { count: 42 })\r\n   * → { type: 'UpdateText', path: [0, 0], content: \"Count: 42\" }\r\n   */\r\n  static materializePatch(\r\n    patch: Patch,\r\n    stateValues: Record<string, any>\r\n  ): Patch | Patch[] {\r\n    switch (patch.type) {\r\n      case 'UpdateTextTemplate': {\r\n        const content = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateText',\r\n          path: patch.path,\r\n          content\r\n        };\r\n      }\r\n\r\n      case 'UpdatePropsTemplate': {\r\n        const value = this.renderTemplatePatch(patch.templatePatch, stateValues);\r\n        return {\r\n          type: 'UpdateProps',\r\n          path: patch.path,\r\n          props: { [patch.propName]: value }\r\n        };\r\n      }\r\n\r\n      case 'UpdateListTemplate': {\r\n        // Render loop template to VNodes\r\n        const vnodes = this.renderLoopTemplate(patch.loopTemplate, stateValues);\r\n\r\n        // Convert to concrete patches\r\n        return this.convertLoopToPatches(patch.path, vnodes);\r\n      }\r\n\r\n      default:\r\n        // Not a template patch, return as-is\r\n        return patch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Materialize multiple template patches\r\n   *\r\n   * @param patches - Array of patches (template or concrete)\r\n   * @param stateValues - Current state values\r\n   * @returns Array of concrete patches\r\n   */\r\n  static materializePatches(\r\n    patches: Patch[],\r\n    stateValues: Record<string, any>\r\n  ): Patch[] {\r\n    const materialized: Patch[] = [];\r\n\r\n    for (const patch of patches) {\r\n      const result = this.materializePatch(patch, stateValues);\r\n\r\n      if (Array.isArray(result)) {\r\n        // UpdateListTemplate returns multiple patches\r\n        materialized.push(...result);\r\n      } else {\r\n        materialized.push(result);\r\n      }\r\n    }\r\n\r\n    return materialized;\r\n  }\r\n\r\n  /**\r\n   * Apply transform to a value (Phase 6: Expression Templates)\r\n   * Security: Only whitelisted transforms are allowed\r\n   *\r\n   * @param value - Raw value from state\r\n   * @param transform - Transform string (e.g., \"toFixed(2)\", \"* 100\", \"toUpperCase()\")\r\n   * @returns Transformed value\r\n   *\r\n   * @example\r\n   * applyTransform(99.95, \"toFixed(2)\") → \"99.95\"\r\n   * applyTransform(0.847, \"* 100\") → 84.7\r\n   * applyTransform(\"hello\", \"toUpperCase()\") → \"HELLO\"\r\n   */\r\n  static applyTransform(value: any, transform: string): any {\r\n    // Security: Whitelist-only approach for safe transforms\r\n\r\n    // toFixed(n) - Format number to n decimal places\r\n    if (transform.startsWith('toFixed(')) {\r\n      const decimals = parseInt(transform.match(/\\d+/)?.[0] || '0');\r\n      return Number(value).toFixed(decimals);\r\n    }\r\n\r\n    // Arithmetic: * N (multiplication)\r\n    if (transform.startsWith('* ')) {\r\n      const multiplier = parseFloat(transform.substring(2));\r\n      return Number(value) * multiplier;\r\n    }\r\n\r\n    // Arithmetic: / N (division)\r\n    if (transform.startsWith('/ ')) {\r\n      const divisor = parseFloat(transform.substring(2));\r\n      return Number(value) / divisor;\r\n    }\r\n\r\n    // Arithmetic: + N (addition)\r\n    if (transform.startsWith('+ ')) {\r\n      const addend = parseFloat(transform.substring(2));\r\n      return Number(value) + addend;\r\n    }\r\n\r\n    // Arithmetic: - N (subtraction)\r\n    if (transform.startsWith('- ')) {\r\n      const subtrahend = parseFloat(transform.substring(2));\r\n      return Number(value) - subtrahend;\r\n    }\r\n\r\n    // String: toUpperCase()\r\n    if (transform === 'toUpperCase()' || transform === 'toUpperCase') {\r\n      return String(value).toUpperCase();\r\n    }\r\n\r\n    // String: toLowerCase()\r\n    if (transform === 'toLowerCase()' || transform === 'toLowerCase') {\r\n      return String(value).toLowerCase();\r\n    }\r\n\r\n    // String: trim()\r\n    if (transform === 'trim()' || transform === 'trim') {\r\n      return String(value).trim();\r\n    }\r\n\r\n    // Boolean: ! (negation)\r\n    if (transform === '!') {\r\n      return !value;\r\n    }\r\n\r\n    // Default: Unknown transform, log warning and return value as-is\r\n    console.warn(`[TemplateRenderer] Unknown transform: ${transform}`);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format a value for template substitution\r\n   *\r\n   * @param value - Value to format\r\n   * @returns String representation of value\r\n   */\r\n  private static formatValue(value: any): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === 'number' || typeof value === 'boolean') {\r\n      return String(value);\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      return value.map(v => this.formatValue(v)).join(', ');\r\n    }\r\n\r\n    if (typeof value === 'object') {\r\n      // For objects, use JSON.stringify (could be customized)\r\n      return JSON.stringify(value);\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Check if a patch is a template patch\r\n   *\r\n   * @param patch - Patch to check\r\n   * @returns True if patch is a template patch\r\n   */\r\n  static isTemplatePatch(patch: Patch): boolean {\r\n    return patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate';\r\n  }\r\n\r\n  /**\r\n   * Extract bindings from a template patch\r\n   *\r\n   * @param patch - Template patch\r\n   * @returns Array of state variable names, or empty array if not a template patch\r\n   */\r\n  static extractBindings(patch: Patch): string[] {\r\n    if (patch.type === 'UpdateTextTemplate' || patch.type === 'UpdatePropsTemplate') {\r\n      // Handle both string bindings and Binding objects\r\n      return patch.templatePatch.bindings.map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Validate that all required bindings are present in state\r\n   *\r\n   * @param templatePatch - Template patch to validate\r\n   * @param stateValues - Available state values\r\n   * @returns True if all bindings are present\r\n   */\r\n  static validateBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): boolean {\r\n    return templatePatch.bindings.every(binding => {\r\n      const key = typeof binding === 'object' && 'stateKey' in binding\r\n        ? binding.stateKey\r\n        : binding as string;\r\n      return key in stateValues;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get missing bindings from state\r\n   *\r\n   * @param templatePatch - Template patch to check\r\n   * @param stateValues - Available state values\r\n   * @returns Array of missing binding names\r\n   */\r\n  static getMissingBindings(\r\n    templatePatch: TemplatePatch,\r\n    stateValues: Record<string, any>\r\n  ): string[] {\r\n    return templatePatch.bindings\r\n      .filter(binding => {\r\n        const key = typeof binding === 'object' && 'stateKey' in binding\r\n          ? binding.stateKey\r\n          : binding as string;\r\n        return !(key in stateValues);\r\n      })\r\n      .map(binding => {\r\n        if (typeof binding === 'object' && 'stateKey' in binding) {\r\n          return binding.stateKey;\r\n        }\r\n        return binding as string;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Render loop template with current array state\r\n   *\r\n   * @param loopTemplate - Loop template data\r\n   * @param stateValues - Current state values (must include array binding)\r\n   * @returns Array of rendered VNodes\r\n   *\r\n   * @example\r\n   * const template = {\r\n   *   array_binding: \"todos\",\r\n   *   item_template: {\r\n   *     type: \"Element\",\r\n   *     tag: \"li\",\r\n   *     children_templates: [{\r\n   *       type: \"Text\",\r\n   *       template_patch: { template: \"{0}\", bindings: [\"item.text\"], slots: [0] }\r\n   *     }]\r\n   *   }\r\n   * };\r\n   * renderLoopTemplate(template, { todos: [{ text: \"A\" }, { text: \"B\" }] })\r\n   * → [<li>A</li>, <li>B</li>]\r\n   */\r\n  static renderLoopTemplate(\r\n    loopTemplate: LoopTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode[] {\r\n    const array = stateValues[loopTemplate.array_binding];\r\n\r\n    if (!Array.isArray(array)) {\r\n      console.warn(\r\n        `[TemplateRenderer] Expected array for '${loopTemplate.array_binding}', got:`,\r\n        array\r\n      );\r\n      return [];\r\n    }\r\n\r\n    return array.map((item, index) => {\r\n      // Build item state with nested object access\r\n      const itemState = {\r\n        ...stateValues,\r\n        item,\r\n        index,\r\n        ...(loopTemplate.index_var ? { [loopTemplate.index_var]: index } : {})\r\n      };\r\n\r\n      // Flatten item object for binding access (item.text → \"item.text\": value)\r\n      const flattenedState = this.flattenItemState(itemState, item);\r\n\r\n      // Render item template\r\n      return this.renderItemTemplate(loopTemplate.item_template, flattenedState);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Flatten item object for template binding access\r\n   *\r\n   * @param itemState - Current state including item\r\n   * @param item - The array item to flatten\r\n   * @returns Flattened state with \"item.property\" keys\r\n   *\r\n   * @example\r\n   * flattenItemState({ item: { id: 1, text: \"A\" } }, { id: 1, text: \"A\" })\r\n   * → { \"item.id\": 1, \"item.text\": \"A\", item: {...}, ... }\r\n   */\r\n  private static flattenItemState(\r\n    itemState: Record<string, any>,\r\n    item: any\r\n  ): Record<string, any> {\r\n    const flattened = { ...itemState };\r\n\r\n    if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\r\n      // Flatten object properties with \"item.\" prefix\r\n      for (const key in item) {\r\n        flattened[`item.${key}`] = item[key];\r\n      }\r\n    }\r\n\r\n    return flattened;\r\n  }\r\n\r\n  /**\r\n   * Render item template to VNode\r\n   *\r\n   * @param itemTemplate - Template for individual list item\r\n   * @param stateValues - State values with flattened item properties\r\n   * @returns Rendered VNode\r\n   */\r\n  private static renderItemTemplate(\r\n    itemTemplate: ItemTemplate,\r\n    stateValues: Record<string, any>\r\n  ): VNode {\r\n    switch (itemTemplate.type) {\r\n      case 'Text': {\r\n        const content = this.renderTemplatePatch(itemTemplate.template_patch, stateValues);\r\n        return {\r\n          type: 'Text',\r\n          content\r\n        } as VText;\r\n      }\r\n\r\n      case 'Element': {\r\n        // Render props\r\n        const props: Record<string, string> = {};\r\n        if (itemTemplate.props_templates) {\r\n          for (const [propName, propTemplate] of Object.entries(itemTemplate.props_templates)) {\r\n            props[propName] = this.renderTemplatePatch(propTemplate, stateValues);\r\n          }\r\n        }\r\n\r\n        // Render children\r\n        const children = (itemTemplate.children_templates || []).map(childTemplate =>\r\n          this.renderItemTemplate(childTemplate, stateValues)\r\n        );\r\n\r\n        // Render key\r\n        const key = itemTemplate.key_binding\r\n          ? String(stateValues[itemTemplate.key_binding])\r\n          : undefined;\r\n\r\n        return {\r\n          type: 'Element',\r\n          tag: itemTemplate.tag,\r\n          props,\r\n          children,\r\n          key\r\n        } as VElement;\r\n      }\r\n\r\n      default:\r\n        throw new Error(`Unknown item template type: ${(itemTemplate as any).type}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert rendered loop VNodes to concrete patches\r\n   * Generates Create/Replace patches for list update\r\n   *\r\n   * @param parentPath - Path to parent element containing the list\r\n   * @param vnodes - Rendered VNodes for list items\r\n   * @returns Array of patches to update the list\r\n   */\r\n  private static convertLoopToPatches(\r\n    parentPath: number[],\r\n    vnodes: VNode[]\r\n  ): Patch[] {\r\n    // For Phase 4A simplicity: Replace entire list with Create patches\r\n    // TODO Phase 4C: Optimize with incremental diffing\r\n\r\n    return vnodes.map((node, index) => ({\r\n      type: 'Create',\r\n      path: [...parentPath, index],\r\n      node\r\n    } as Patch));\r\n  }\r\n}\r\n","import { Patch } from './types';\r\nimport { TemplateRenderer } from './template-renderer';\r\n\r\n/**\r\n * Queued hint with pre-computed patches\r\n */\r\ninterface QueuedHint {\r\n  hintId: string;\r\n  componentId: string;\r\n  patches: Patch[];\r\n  confidence: number;\r\n  predictedState: Record<string, any>;\r\n  queuedAt: number;\r\n  /** True if this hint contains template patches (for statistics) */\r\n  isTemplate?: boolean;\r\n}\r\n\r\n/**\r\n * Manages hint queue for usePredictHint\r\n * Stores pre-computed patches and applies them when state changes match\r\n */\r\nexport class HintQueue {\r\n  private hints: Map<string, QueuedHint> = new Map();\r\n  private debugLogging: boolean;\r\n  private maxHintAge: number = 5000; // 5 seconds TTL\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Queue a hint from the server\r\n   */\r\n  queueHint(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n    predictedState: Record<string, any>;\r\n  }): void {\r\n    const key = `${data.componentId}:${data.hintId}`;\r\n\r\n    // Check if this hint contains template patches\r\n    const isTemplate = data.patches.some(patch => TemplateRenderer.isTemplatePatch(patch));\r\n\r\n    this.hints.set(key, {\r\n      ...data,\r\n      queuedAt: Date.now(),\r\n      isTemplate\r\n    });\r\n\r\n    const patchType = isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n    this.log(`${patchType} hint '${data.hintId}' queued for ${data.componentId}`, data);\r\n\r\n    // Auto-expire old hints\r\n    this.cleanupStaleHints();\r\n  }\r\n\r\n  /**\r\n   * Check if a state change matches any queued hint\r\n   * Returns patches if match found, null otherwise\r\n   */\r\n  matchHint(componentId: string, stateChanges: Record<string, any>): {\r\n    hintId: string;\r\n    patches: Patch[];\r\n    confidence: number;\r\n  } | null {\r\n    // Find hints for this component\r\n    const componentHints = Array.from(this.hints.entries())\r\n      .filter(([key]) => key.startsWith(`${componentId}:`))\r\n      .map(([, hint]) => hint);\r\n\r\n    // Check each hint to see if it matches the state change\r\n    for (const hint of componentHints) {\r\n      if (this.stateMatches(hint.predictedState, stateChanges)) {\r\n        const patchType = hint.isTemplate ? '📐 TEMPLATE' : '📄 CONCRETE';\r\n        this.log(`${patchType} hint '${hint.hintId}' matched!`, { hint, stateChanges });\r\n\r\n        // Remove from queue\r\n        const key = `${componentId}:${hint.hintId}`;\r\n        this.hints.delete(key);\r\n\r\n        // Materialize template patches with current state values\r\n        const materializedPatches = TemplateRenderer.materializePatches(\r\n          hint.patches,\r\n          stateChanges\r\n        );\r\n\r\n        return {\r\n          hintId: hint.hintId,\r\n          patches: materializedPatches,\r\n          confidence: hint.confidence\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Check if predicted state matches actual state change\r\n   */\r\n  private stateMatches(predicted: Record<string, any>, actual: Record<string, any>): boolean {\r\n    // Check if all predicted keys match actual values\r\n    for (const [key, predictedValue] of Object.entries(predicted)) {\r\n      if (!(key in actual)) {\r\n        return false; // Key not in actual change\r\n      }\r\n\r\n      // Deep equality check (simplified - could use lodash.isEqual in production)\r\n      if (JSON.stringify(actual[key]) !== JSON.stringify(predictedValue)) {\r\n        return false; // Value doesn't match\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove hints older than maxHintAge\r\n   */\r\n  private cleanupStaleHints(): void {\r\n    const now = Date.now();\r\n    const staleKeys: string[] = [];\r\n\r\n    for (const [key, hint] of this.hints.entries()) {\r\n      if (now - hint.queuedAt > this.maxHintAge) {\r\n        staleKeys.push(key);\r\n      }\r\n    }\r\n\r\n    if (staleKeys.length > 0) {\r\n      this.log(`Removing ${staleKeys.length} stale hint(s)`, staleKeys);\r\n      for (const key of staleKeys) {\r\n        this.hints.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToRemove = Array.from(this.hints.keys())\r\n      .filter(key => key.startsWith(`${componentId}:`));\r\n\r\n    for (const key of keysToRemove) {\r\n      this.hints.delete(key);\r\n    }\r\n\r\n    if (keysToRemove.length > 0) {\r\n      this.log(`Cleared ${keysToRemove.length} hint(s) for component ${componentId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all hints\r\n   */\r\n  clearAll(): void {\r\n    this.hints.clear();\r\n    this.log('Cleared all hints');\r\n  }\r\n\r\n  /**\r\n   * Get stats about queued hints\r\n   */\r\n  getStats() {\r\n    const allHints = Array.from(this.hints.values());\r\n    const templateHints = allHints.filter(h => h.isTemplate);\r\n    const concreteHints = allHints.filter(h => !h.isTemplate);\r\n\r\n    return {\r\n      totalHints: this.hints.size,\r\n      templateHints: templateHints.length,\r\n      concreteHints: concreteHints.length,\r\n      templatePercentage: this.hints.size > 0\r\n        ? Math.round((templateHints.length / this.hints.size) * 100)\r\n        : 0,\r\n      hintsByComponent: allHints.reduce((acc, hint) => {\r\n        acc[hint.componentId] = (acc[hint.componentId] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>)\r\n    };\r\n  }\r\n\r\n  private log(message: string, ...args: any[]): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact HintQueue] ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Bridge for communicating prediction events to playground parent window\r\n * Emits postMessage events that the React playground can listen to\r\n */\r\nexport class PlaygroundBridge {\r\n  private debugLogging: boolean;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Notify that a prediction was received from server\r\n   */\r\n  predictionReceived(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    patchCount: number;\r\n    confidence: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:prediction-received',\r\n      data\r\n    });\r\n\r\n    this.log('Prediction received', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache hit occurred (instant patch application)\r\n   */\r\n  cacheHit(data: {\r\n    componentId: string;\r\n    hintId: string;\r\n    latency: number;\r\n    confidence: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-hit',\r\n      data: {\r\n        ...data,\r\n        cacheHit: true,\r\n        elapsedMs: data.latency\r\n      }\r\n    });\r\n\r\n    this.log('🟢 CACHE HIT', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a cache miss occurred (had to compute on server)\r\n   */\r\n  cacheMiss(data: {\r\n    componentId: string;\r\n    methodName: string;\r\n    latency: number;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:cache-miss',\r\n      data: {\r\n        ...data,\r\n        cacheHit: false,\r\n        elapsedMs: data.latency,\r\n        predictionConfidence: 0\r\n      }\r\n    });\r\n\r\n    this.log('🔴 CACHE MISS', data);\r\n  }\r\n\r\n  /**\r\n   * Notify that a correction was applied (prediction was wrong)\r\n   */\r\n  correctionApplied(data: {\r\n    componentId: string;\r\n    patchCount: number;\r\n  }): void {\r\n    this.postMessage({\r\n      type: 'minimact:correction',\r\n      data\r\n    });\r\n\r\n    this.log('Correction applied (prediction was incorrect)', data);\r\n  }\r\n\r\n  /**\r\n   * Post message to parent window (for iframe communication)\r\n   */\r\n  private postMessage(message: any): void {\r\n    // Check if we're in an iframe\r\n    if (window.parent && window.parent !== window) {\r\n      window.parent.postMessage(message, '*');\r\n    }\r\n\r\n    // Also dispatch as custom event for same-window listeners\r\n    window.dispatchEvent(new CustomEvent(message.type, { detail: message.data }));\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PlaygroundBridge] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Client-Computed State Manager\r\n *\r\n * Manages variables that are computed on the client using external libraries\r\n * (lodash, moment, etc.) and syncs them to the server for SSR.\r\n *\r\n * This enables Option 1 auto-detection: developers use external libraries\r\n * naturally, and the system automatically handles client-server sync.\r\n */\r\n\r\n/**\r\n * A function that computes a value based on component state\r\n */\r\nexport type ComputeFunction = () => any;\r\n\r\n/**\r\n * Registry entry for a single client-computed variable\r\n */\r\ninterface ClientComputedVariable {\r\n  varName: string;\r\n  computeFn: ComputeFunction;\r\n  lastValue?: any;\r\n  dependencies?: string[]; // State keys this variable depends on\r\n}\r\n\r\n/**\r\n * Registry of client-computed variables per component\r\n */\r\ninterface ClientComputedRegistry {\r\n  [componentId: string]: {\r\n    [varName: string]: ClientComputedVariable;\r\n  };\r\n}\r\n\r\nconst computedRegistry: ClientComputedRegistry = {};\r\n\r\n/**\r\n * Debug logging\r\n */\r\nlet debugLogging = false;\r\n\r\nexport function setDebugLogging(enabled: boolean): void {\r\n  debugLogging = enabled;\r\n}\r\n\r\nfunction log(message: string, data?: any): void {\r\n  if (debugLogging) {\r\n    console.log(`[ClientComputed] ${message}`, data || '');\r\n  }\r\n}\r\n\r\n/**\r\n * Register a client-computed variable for a component\r\n *\r\n * @param componentId - Unique identifier for the component\r\n * @param varName - Name of the variable being computed\r\n * @param computeFn - Function that computes the value\r\n * @param dependencies - Optional list of state keys this variable depends on\r\n */\r\nexport function registerClientComputed(\r\n  componentId: string,\r\n  varName: string,\r\n  computeFn: ComputeFunction,\r\n  dependencies?: string[]\r\n): void {\r\n  if (!computedRegistry[componentId]) {\r\n    computedRegistry[componentId] = {};\r\n  }\r\n\r\n  computedRegistry[componentId][varName] = {\r\n    varName,\r\n    computeFn,\r\n    dependencies\r\n  };\r\n\r\n  log(`Registered client-computed variable`, { componentId, varName, dependencies });\r\n}\r\n\r\n/**\r\n * Compute a single variable's value\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The computed value or undefined if not found\r\n */\r\nexport function computeVariable(componentId: string, varName: string): any {\r\n  const computed = computedRegistry[componentId]?.[varName];\r\n\r\n  if (!computed) {\r\n    console.warn(`[ClientComputed] Variable '${varName}' not registered for component '${componentId}'`);\r\n    return undefined;\r\n  }\r\n\r\n  try {\r\n    const value = computed.computeFn();\r\n    computed.lastValue = value;\r\n    log(`Computed variable`, { componentId, varName, value });\r\n    return value;\r\n  } catch (error) {\r\n    console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute all client-computed variables for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all computed values\r\n */\r\nexport function computeAllForComponent(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    log(`No computed variables for component`, { componentId });\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    try {\r\n      const value = variable.computeFn();\r\n      variable.lastValue = value;\r\n      result[varName] = value;\r\n    } catch (error) {\r\n      console.error(`[ClientComputed] Error computing '${varName}':`, error);\r\n      result[varName] = undefined;\r\n    }\r\n  }\r\n\r\n  log(`Computed all variables`, { componentId, result });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Compute only variables that depend on a specific state key\r\n *\r\n * @param componentId - Component identifier\r\n * @param changedStateKey - State key that changed\r\n * @returns Object with affected computed values\r\n */\r\nexport function computeDependentVariables(\r\n  componentId: string,\r\n  changedStateKey: string\r\n): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    // If no dependencies specified, assume it depends on everything\r\n    const shouldRecompute = !variable.dependencies ||\r\n                           variable.dependencies.includes(changedStateKey);\r\n\r\n    if (shouldRecompute) {\r\n      try {\r\n        const value = variable.computeFn();\r\n        variable.lastValue = value;\r\n        result[varName] = value;\r\n        log(`Recomputed dependent variable`, { componentId, varName, changedStateKey, value });\r\n      } catch (error) {\r\n        console.error(`[ClientComputed] Error recomputing '${varName}':`, error);\r\n        result[varName] = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Get the last computed value without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @param varName - Variable name\r\n * @returns The last computed value or undefined\r\n */\r\nexport function getLastValue(componentId: string, varName: string): any {\r\n  return computedRegistry[componentId]?.[varName]?.lastValue;\r\n}\r\n\r\n/**\r\n * Get all last computed values without recomputing\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Object with all last computed values\r\n */\r\nexport function getAllLastValues(componentId: string): Record<string, any> {\r\n  const computed = computedRegistry[componentId];\r\n\r\n  if (!computed) {\r\n    return {};\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [varName, variable] of Object.entries(computed)) {\r\n    result[varName] = variable.lastValue;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Check if a component has any client-computed variables\r\n *\r\n * @param componentId - Component identifier\r\n * @returns True if component has computed variables\r\n */\r\nexport function hasClientComputed(componentId: string): boolean {\r\n  return !!computedRegistry[componentId] &&\r\n         Object.keys(computedRegistry[componentId]).length > 0;\r\n}\r\n\r\n/**\r\n * Get list of all computed variable names for a component\r\n *\r\n * @param componentId - Component identifier\r\n * @returns Array of variable names\r\n */\r\nexport function getComputedVariableNames(componentId: string): string[] {\r\n  const computed = computedRegistry[componentId];\r\n  return computed ? Object.keys(computed) : [];\r\n}\r\n\r\n/**\r\n * Clear all computed variables for a component\r\n * Used when component is unmounted\r\n *\r\n * @param componentId - Component identifier\r\n */\r\nexport function clearComponent(componentId: string): void {\r\n  delete computedRegistry[componentId];\r\n  log(`Cleared component`, { componentId });\r\n}\r\n\r\n/**\r\n * Clear all computed variables (for testing/cleanup)\r\n */\r\nexport function clearAll(): void {\r\n  Object.keys(computedRegistry).forEach(key => delete computedRegistry[key]);\r\n  log('Cleared all computed variables');\r\n}\r\n\r\n/**\r\n * Get debug info about registered computations\r\n * Useful for dev tools / debugging\r\n */\r\nexport function getDebugInfo(): {\r\n  componentCount: number;\r\n  components: Record<string, { variableCount: number; variables: string[] }>;\r\n} {\r\n  const components: Record<string, { variableCount: number; variables: string[] }> = {};\r\n\r\n  for (const [componentId, computed] of Object.entries(computedRegistry)) {\r\n    const variables = Object.keys(computed);\r\n    components[componentId] = {\r\n      variableCount: variables.length,\r\n      variables\r\n    };\r\n  }\r\n\r\n  return {\r\n    componentCount: Object.keys(computedRegistry).length,\r\n    components\r\n  };\r\n}\r\n","/**\r\n * Template State Manager - Client-Side Template Rendering\r\n *\r\n * Manages \"virtual state\" for text nodes using parameterized templates.\r\n * This enables instant hot reload with 100% coverage and minimal memory.\r\n *\r\n * Architecture:\r\n * - Templates loaded from .templates.json at component init\r\n * - State changes trigger template re-rendering\r\n * - Hot reload updates templates without server round-trip\r\n *\r\n * Memory: ~2KB per component (vs 100KB with prediction-based approach)\r\n * Coverage: 100% (works with any value)\r\n * Latency: <5ms for template updates\r\n */\r\n\r\nexport interface Template {\r\n  /** Template string with {0}, {1}, etc. placeholders */\r\n  template: string;\r\n  /** State bindings that fill the template slots */\r\n  bindings: string[];\r\n  /** Character positions where params are inserted */\r\n  slots: number[];\r\n  /** DOM path to the text node */\r\n  path: number[];\r\n  /** Template type: static | dynamic | attribute */\r\n  type: 'static' | 'dynamic' | 'attribute';\r\n  /** Attribute name (only for attribute templates) */\r\n  attribute?: string;\r\n}\r\n\r\nexport interface TemplateMap {\r\n  component: string;\r\n  version: string;\r\n  generatedAt: number;\r\n  templates: Record<string, Template>;\r\n}\r\n\r\nexport interface TemplatePatch {\r\n  type: 'UpdateTextTemplate' | 'UpdatePropTemplate';\r\n  componentId: string;\r\n  path: number[];\r\n  template: string;\r\n  params: any[];\r\n  bindings: string[];\r\n  slots: number[];\r\n  attribute?: string;\r\n}\r\n\r\n/**\r\n * Template State Manager\r\n */\r\nexport class TemplateStateManager {\r\n  private templates: Map<string, Template> = new Map();\r\n  private componentStates: Map<string, Map<string, any>> = new Map();\r\n\r\n  /**\r\n   * Initialize templates from .templates.json file\r\n   */\r\n  loadTemplateMap(componentId: string, templateMap: TemplateMap): void {\r\n    console.log(`[TemplateState] Loading ${Object.keys(templateMap.templates).length} templates for ${componentId}`);\r\n\r\n    for (const [nodePath, template] of Object.entries(templateMap.templates)) {\r\n      const key = `${componentId}:${nodePath}`;\r\n      this.templates.set(key, template);\r\n    }\r\n\r\n    // Initialize component state tracking\r\n    if (!this.componentStates.has(componentId)) {\r\n      this.componentStates.set(componentId, new Map());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a template for a specific node path\r\n   */\r\n  registerTemplate(\r\n    componentId: string,\r\n    nodePath: string,\r\n    template: Template\r\n  ): void {\r\n    const key = `${componentId}:${nodePath}`;\r\n    this.templates.set(key, template);\r\n  }\r\n\r\n  /**\r\n   * Get template by component ID and node path\r\n   */\r\n  getTemplate(componentId: string, nodePath: string): Template | undefined {\r\n    const key = `${componentId}:${nodePath}`;\r\n    return this.templates.get(key);\r\n  }\r\n\r\n  /**\r\n   * Get all templates for a component\r\n   */\r\n  getComponentTemplates(componentId: string): Map<string, Template> {\r\n    const result = new Map<string, Template>();\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        const nodePath = key.substring(componentId.length + 1);\r\n        result.set(nodePath, template);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get templates bound to a specific state variable\r\n   */\r\n  getTemplatesBoundTo(componentId: string, stateKey: string): Template[] {\r\n    const templates: Template[] = [];\r\n\r\n    for (const [key, template] of this.templates.entries()) {\r\n      if (key.startsWith(`${componentId}:`) && template.bindings.includes(stateKey)) {\r\n        templates.push(template);\r\n      }\r\n    }\r\n\r\n    return templates;\r\n  }\r\n\r\n  /**\r\n   * Update component state (from useState)\r\n   */\r\n  updateState(componentId: string, stateKey: string, value: any): void {\r\n    let state = this.componentStates.get(componentId);\r\n    if (!state) {\r\n      state = new Map();\r\n      this.componentStates.set(componentId, state);\r\n    }\r\n    state.set(stateKey, value);\r\n  }\r\n\r\n  /**\r\n   * Get component state value\r\n   */\r\n  getStateValue(componentId: string, stateKey: string): any {\r\n    return this.componentStates.get(componentId)?.get(stateKey);\r\n  }\r\n\r\n  /**\r\n   * Render template with current state values\r\n   */\r\n  render(componentId: string, nodePath: string): string | null {\r\n    const template = this.getTemplate(componentId, nodePath);\r\n    if (!template) return null;\r\n\r\n    // Get state values for bindings\r\n    const params = template.bindings.map(binding =>\r\n      this.getStateValue(componentId, binding)\r\n    );\r\n\r\n    return this.renderWithParams(template.template, params);\r\n  }\r\n\r\n  /**\r\n   * Render template with specific parameter values\r\n   */\r\n  renderWithParams(template: string, params: any[]): string {\r\n    let result = template;\r\n\r\n    // Replace {0}, {1}, etc. with parameter values\r\n    params.forEach((param, index) => {\r\n      const placeholder = `{${index}}`;\r\n      const value = param !== undefined && param !== null ? String(param) : '';\r\n      result = result.replace(placeholder, value);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Apply template patch from hot reload\r\n   */\r\n  applyTemplatePatch(patch: TemplatePatch): { text: string; path: number[] } | null {\r\n    const { componentId, path, template, params, bindings, slots, attribute } = patch;\r\n\r\n    // Render template with params\r\n    const text = this.renderWithParams(template, params);\r\n\r\n    // Build node path key\r\n    const nodePath = this.buildNodePathKey(path);\r\n    const key = `${componentId}:${nodePath}`;\r\n\r\n    // Update stored template\r\n    const existingTemplate = this.templates.get(key);\r\n    if (existingTemplate) {\r\n      existingTemplate.template = template;\r\n      existingTemplate.bindings = bindings;\r\n      existingTemplate.slots = slots;\r\n      if (attribute) {\r\n        existingTemplate.attribute = attribute;\r\n      }\r\n    } else {\r\n      // Register new template\r\n      this.templates.set(key, {\r\n        template,\r\n        bindings,\r\n        slots,\r\n        path,\r\n        type: attribute ? 'attribute' : 'dynamic',\r\n        attribute\r\n      });\r\n    }\r\n\r\n    console.log(`[TemplateState] Applied template patch: \"${template}\" → \"${text}\"`);\r\n\r\n    return { text, path };\r\n  }\r\n\r\n  /**\r\n   * Build node path key from path array\r\n   * Example: [0, 1, 0] → \"0_1_0\"\r\n   */\r\n  private buildNodePathKey(path: number[]): string {\r\n    return path.join('_');\r\n  }\r\n\r\n  /**\r\n   * Clear all templates for a component\r\n   */\r\n  clearComponent(componentId: string): void {\r\n    const keysToDelete: string[] = [];\r\n\r\n    for (const key of this.templates.keys()) {\r\n      if (key.startsWith(`${componentId}:`)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    for (const key of keysToDelete) {\r\n      this.templates.delete(key);\r\n    }\r\n\r\n    this.componentStates.delete(componentId);\r\n  }\r\n\r\n  /**\r\n   * Clear all templates\r\n   */\r\n  clear(): void {\r\n    this.templates.clear();\r\n    this.componentStates.clear();\r\n  }\r\n\r\n  /**\r\n   * Get statistics\r\n   */\r\n  getStats() {\r\n    const componentCount = this.componentStates.size;\r\n    const templateCount = this.templates.size;\r\n\r\n    // Estimate memory usage (rough estimate)\r\n    let memoryBytes = 0;\r\n    for (const template of this.templates.values()) {\r\n      memoryBytes += template.template.length * 2; // UTF-16\r\n      memoryBytes += template.bindings.length * 20; // Rough estimate\r\n      memoryBytes += template.slots.length * 4; // 4 bytes per number\r\n      memoryBytes += template.path.length * 4;\r\n    }\r\n\r\n    return {\r\n      componentCount,\r\n      templateCount,\r\n      memoryKB: Math.round(memoryBytes / 1024),\r\n      avgTemplatesPerComponent: templateCount / Math.max(componentCount, 1)\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Global template state manager instance\r\n */\r\nexport const templateState = new TemplateStateManager();\r\n","/**\r\n * Server Task - Client-side representation of a long-running server task\r\n *\r\n * Provides reactive state management for async operations that execute on the server.\r\n * Automatically syncs state changes from server and triggers component re-renders.\r\n */\r\n\r\nexport type ServerTaskStatus = 'idle' | 'running' | 'complete' | 'error' | 'cancelled';\r\n\r\n/**\r\n * Options for configuring a server task\r\n */\r\nexport interface ServerTaskOptions {\r\n  /** Enable streaming mode (for async generators) */\r\n  stream?: boolean;\r\n  /** Estimated number of chunks (for progress calculation in streaming mode) */\r\n  estimatedChunks?: number;\r\n  /** Callback invoked for each chunk in streaming mode */\r\n  onChunk?: (chunk: any, index: number) => void;\r\n  /** Maximum number of chunks to keep in memory (for memory management) */\r\n  maxChunksInMemory?: number;\r\n}\r\n\r\n/**\r\n * Server task interface - Represents a long-running operation on the server\r\n */\r\nexport interface ServerTask<T> {\r\n  // Status\r\n  status: ServerTaskStatus;\r\n  progress: number; // 0.0 to 1.0\r\n\r\n  // Result\r\n  result?: T;\r\n  error?: Error;\r\n\r\n  // Streaming-specific\r\n  streaming: boolean;\r\n  partial?: T; // Latest partial result (accumulated)\r\n  chunks: T[]; // All chunks received so far\r\n  chunkCount: number; // Number of chunks received\r\n\r\n  // Control methods\r\n  start(...args: any[]): void;\r\n  retry(...args: any[]): void;\r\n  cancel(): void;\r\n\r\n  // Promise interface (for await)\r\n  promise: Promise<T>;\r\n\r\n  // Metadata\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number; // milliseconds\r\n\r\n  // Computed properties\r\n  readonly idle: boolean;\r\n  readonly running: boolean;\r\n  readonly complete: boolean;\r\n  readonly failed: boolean;\r\n  readonly cancelled: boolean;\r\n}\r\n\r\n/**\r\n * Server task implementation\r\n */\r\nexport class ServerTaskImpl<T> implements ServerTask<T> {\r\n  status: ServerTaskStatus = 'idle';\r\n  progress: number = 0;\r\n  result?: T;\r\n  error?: Error;\r\n  startedAt?: Date;\r\n  completedAt?: Date;\r\n  duration?: number;\r\n\r\n  // Streaming props\r\n  streaming: boolean;\r\n  partial?: T;\r\n  chunks: T[] = [];\r\n  chunkCount: number = 0;\r\n\r\n  private _promise?: Promise<T>;\r\n  private _resolve?: (value: T) => void;\r\n  private _reject?: (error: Error) => void;\r\n  private _options: ServerTaskOptions;\r\n\r\n  constructor(\r\n    private taskId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    options: ServerTaskOptions = {}\r\n  ) {\r\n    this._options = options;\r\n    this.streaming = options.stream || false;\r\n    this._createPromise();\r\n  }\r\n\r\n  private _createPromise(): void {\r\n    this._promise = new Promise<T>((resolve, reject) => {\r\n      this._resolve = resolve;\r\n      this._reject = reject;\r\n    });\r\n  }\r\n\r\n  get promise(): Promise<T> {\r\n    return this._promise!;\r\n  }\r\n\r\n  get idle(): boolean {\r\n    return this.status === 'idle';\r\n  }\r\n\r\n  get running(): boolean {\r\n    return this.status === 'running';\r\n  }\r\n\r\n  get complete(): boolean {\r\n    return this.status === 'complete';\r\n  }\r\n\r\n  get failed(): boolean {\r\n    return this.status === 'error';\r\n  }\r\n\r\n  get cancelled(): boolean {\r\n    return this.status === 'cancelled';\r\n  }\r\n\r\n  /**\r\n   * Start the server task with optional arguments\r\n   */\r\n  start(...args: any[]): void {\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    // Clear previous results\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    // Trigger re-render to show \"running\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server task via SignalR\r\n    this.signalR.invoke('StartServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to start task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retry a failed or cancelled task\r\n   */\r\n  retry(...args: any[]): void {\r\n    if (this.status !== 'error' && this.status !== 'cancelled') {\r\n      console.warn('[Minimact] Can only retry failed or cancelled tasks');\r\n      return;\r\n    }\r\n\r\n    // Reset promise for new attempt\r\n    this._createPromise();\r\n\r\n    this.status = 'running';\r\n    this.startedAt = new Date();\r\n    this.completedAt = undefined;\r\n    this.progress = 0;\r\n    this.error = undefined;\r\n\r\n    if (this.streaming) {\r\n      this.chunks = [];\r\n      this.chunkCount = 0;\r\n      this.partial = undefined;\r\n    } else {\r\n      this.result = undefined;\r\n    }\r\n\r\n    this._triggerRerender();\r\n\r\n    this.signalR.invoke('RetryServerTask', this.componentId, this.taskId, args || [])\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to retry task ${this.taskId}:`, err);\r\n        this.status = 'error';\r\n        this.error = err;\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Cancel a running task\r\n   */\r\n  cancel(): void {\r\n    if (this.status !== 'running') {\r\n      console.warn('[Minimact] Can only cancel running tasks');\r\n      return;\r\n    }\r\n\r\n    this.signalR.invoke('CancelServerTask', this.componentId, this.taskId)\r\n      .then(() => {\r\n        this.status = 'cancelled';\r\n        this.completedAt = new Date();\r\n        this.duration = this.completedAt.getTime() - (this.startedAt?.getTime() || 0);\r\n        this._reject?.(new Error('Task cancelled by user'));\r\n        this._triggerRerender();\r\n      })\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to cancel task ${this.taskId}:`, err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update task state from server\r\n   * Called by Minimact when server sends task state updates via SignalR\r\n   */\r\n  _updateFromServer(state: any): void {\r\n    const previousStatus = this.status;\r\n\r\n    this.status = state.status;\r\n    this.progress = state.progress || 0;\r\n    this.result = state.result;\r\n\r\n    if (state.error) {\r\n      this.error = new Error(state.error);\r\n    }\r\n\r\n    if (state.startedAt) {\r\n      this.startedAt = new Date(state.startedAt);\r\n    }\r\n\r\n    if (state.completedAt) {\r\n      this.completedAt = new Date(state.completedAt);\r\n    }\r\n\r\n    if (state.duration) {\r\n      this.duration = state.duration;\r\n    }\r\n\r\n    // Resolve/reject promise based on status change\r\n    if (this.status === 'complete' && previousStatus !== 'complete') {\r\n      if (this._resolve) {\r\n        this._resolve(this.result!);\r\n      }\r\n    } else if (this.status === 'error' && previousStatus !== 'error') {\r\n      if (this._reject) {\r\n        this._reject(this.error!);\r\n      }\r\n    } else if (this.status === 'cancelled' && previousStatus !== 'cancelled') {\r\n      if (this._reject) {\r\n        this._reject(new Error('Task cancelled'));\r\n      }\r\n    }\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousStatus !== this.status || this.progress !== state.progress) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.taskId]: {\r\n        status: this.status,\r\n        progress: this.progress,\r\n        chunkCount: this.chunkCount\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Task state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Task state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Server Reducer - Client-side representation of a reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n */\r\n\r\n/**\r\n * Server reducer interface - Represents a reducer executing on the server\r\n */\r\nexport interface ServerReducer<TState, TAction> {\r\n  // Current state\r\n  state: TState;\r\n\r\n  // Dispatch an action to the server\r\n  dispatch(action: TAction): void;\r\n\r\n  // Async dispatch with Promise interface (for await)\r\n  dispatchAsync(action: TAction): Promise<TState>;\r\n\r\n  // Status flags\r\n  readonly dispatching: boolean;\r\n  readonly error?: Error;\r\n\r\n  // Metadata\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n}\r\n\r\n/**\r\n * Server reducer implementation\r\n */\r\nexport class ServerReducerImpl<TState, TAction> implements ServerReducer<TState, TAction> {\r\n  state: TState;\r\n  dispatching: boolean = false;\r\n  error?: Error;\r\n  lastDispatchedAt?: Date;\r\n  lastActionType?: string;\r\n\r\n  private _pendingPromise?: Promise<TState>;\r\n  private _pendingResolve?: (value: TState) => void;\r\n  private _pendingReject?: (error: Error) => void;\r\n\r\n  constructor(\r\n    private reducerId: string,\r\n    private componentId: string,\r\n    private signalR: any,\r\n    private context: any,\r\n    initialState: TState\r\n  ) {\r\n    this.state = initialState;\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server (fire-and-forget)\r\n   */\r\n  dispatch(action: TAction): void {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging (if action has a 'type' field)\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._triggerRerender();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Dispatch an action to the server and wait for the result\r\n   */\r\n  dispatchAsync(action: TAction): Promise<TState> {\r\n    this.dispatching = true;\r\n    this.error = undefined;\r\n    this.lastDispatchedAt = new Date();\r\n\r\n    // Extract action type for debugging\r\n    if (action && typeof action === 'object' && 'type' in action) {\r\n      this.lastActionType = String((action as any).type);\r\n    }\r\n\r\n    // Create promise for this dispatch\r\n    this._pendingPromise = new Promise<TState>((resolve, reject) => {\r\n      this._pendingResolve = resolve;\r\n      this._pendingReject = reject;\r\n    });\r\n\r\n    // Trigger re-render to show \"dispatching\" state immediately\r\n    this._triggerRerender();\r\n\r\n    // Invoke server reducer via SignalR\r\n    this.signalR.invoke('DispatchServerReducer', this.componentId, this.reducerId, action)\r\n      .catch((err: Error) => {\r\n        console.error(`[Minimact] Failed to dispatch action to reducer ${this.reducerId}:`, err);\r\n        this.dispatching = false;\r\n        this.error = err;\r\n        this._pendingReject?.(err);\r\n        this._triggerRerender();\r\n      });\r\n\r\n    return this._pendingPromise;\r\n  }\r\n\r\n  /**\r\n   * Update reducer state from server\r\n   * Called by Minimact when server sends reducer state updates via SignalR\r\n   */\r\n  _updateFromServer(newState: TState, error?: string): void {\r\n    const previousState = this.state;\r\n\r\n    this.state = newState;\r\n    this.dispatching = false;\r\n\r\n    if (error) {\r\n      this.error = new Error(error);\r\n      this._pendingReject?.(this.error);\r\n    } else {\r\n      this.error = undefined;\r\n      this._pendingResolve?.(newState);\r\n    }\r\n\r\n    // Clear pending promise handlers\r\n    this._pendingPromise = undefined;\r\n    this._pendingResolve = undefined;\r\n    this._pendingReject = undefined;\r\n\r\n    // Trigger re-render when state changes\r\n    if (previousState !== newState) {\r\n      this._triggerRerender();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger component re-render\r\n   * Uses hint queue to check for predicted patches\r\n   */\r\n  private _triggerRerender(): void {\r\n    if (!this.context || !this.context.hintQueue) {\r\n      return;\r\n    }\r\n\r\n    const stateChanges: Record<string, any> = {\r\n      [this.reducerId]: {\r\n        state: this.state,\r\n        dispatching: this.dispatching,\r\n        error: this.error?.message\r\n      }\r\n    };\r\n\r\n    const hint = this.context.hintQueue.matchHint(this.context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // Cache hit! Apply predicted patches\r\n      console.log(`[Minimact] 🟢 Reducer state change predicted! Applying ${hint.patches.length} patches`);\r\n      this.context.domPatcher.applyPatches(this.context.element, hint.patches);\r\n    } else {\r\n      // Cache miss - server will send patches\r\n      console.log(`[Minimact] 🔴 Reducer state change not predicted`);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * useComputed Hook\r\n *\r\n * Compute values on the client using browser-only APIs or external libraries,\r\n * then sync to the server for rendering.\r\n *\r\n * This replaces the conceptually flawed \"useClientState\" with a sound approach:\r\n * - Client computes values using browser APIs (lodash, moment, geolocation, crypto)\r\n * - Results are synced to server via UpdateClientComputedState\r\n * - Server accesses values via GetClientState<T>(key) for rendering\r\n * - Server still does ALL rendering (dehydrationist architecture)\r\n */\r\n\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface UseComputedOptions<T = any> {\r\n  /** Enable memoization (default: true) */\r\n  memoize?: boolean;\r\n  /** Cache expiry in milliseconds (e.g., 5000 = 5 seconds) */\r\n  expiry?: number;\r\n  /** Debounce sync to server (milliseconds) */\r\n  debounce?: number;\r\n  /** Throttle sync to server (milliseconds) */\r\n  throttle?: number;\r\n  /** Initial value before first computation */\r\n  initialValue?: T;\r\n}\r\n\r\ninterface ComputedCache<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  deps: any[];\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\nlet computedIndex = 0;\r\n\r\n/**\r\n * Set the current component context for useComputed\r\n * Called by setComponentContext in hooks.ts\r\n */\r\nexport function setComputedContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * Clear the current component context\r\n */\r\nexport function clearComputedContext(): void {\r\n  currentContext = null;\r\n  computedIndex = 0;\r\n}\r\n\r\n/**\r\n * useComputed Hook\r\n *\r\n * @param key - Unique identifier for server-side access via GetClientState<T>(key)\r\n * @param computeFn - Function that computes the value (runs on client)\r\n * @param deps - Dependency array (like useEffect)\r\n * @param options - Configuration options\r\n * @returns The computed value\r\n *\r\n * @example\r\n * // With lodash\r\n * const sortedUsers = useComputed('sortedUsers', () => {\r\n *   return _.sortBy(users, 'name');\r\n * }, [users]);\r\n *\r\n * @example\r\n * // With geolocation\r\n * const location = useComputed('location', async () => {\r\n *   const pos = await new Promise((resolve) => {\r\n *     navigator.geolocation.getCurrentPosition(resolve);\r\n *   });\r\n *   return { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n * }, []);\r\n *\r\n * @example\r\n * // With memoization and expiry\r\n * const result = useComputed('result', () => compute(data), [data], {\r\n *   memoize: true,\r\n *   expiry: 5000  // Cache for 5 seconds\r\n * });\r\n */\r\nexport function useComputed<T>(\r\n  key: string,\r\n  computeFn: () => T,\r\n  deps: any[] = [],\r\n  options: UseComputedOptions<T> = {}\r\n): T {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useComputed must be called within a component render');\r\n  }\r\n\r\n  const {\r\n    memoize = true,  // Default to true for performance\r\n    expiry,\r\n    debounce,\r\n    throttle,\r\n    initialValue\r\n  } = options;\r\n\r\n  const context = currentContext;\r\n  const index = computedIndex++;\r\n  const computedKey = `computed_${index}_${key}`;\r\n\r\n  // Store computed value in state\r\n  const [value, setValue] = useState<T>(\r\n    initialValue !== undefined ? initialValue : null as T\r\n  );\r\n\r\n  // Cache for memoization\r\n  const cache = useRef<ComputedCache<T> | null>(null);\r\n\r\n  // Debounce timer ref\r\n  const debounceTimer = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check if we should use cached value\r\n    if (memoize && cache.current) {\r\n      // Check if deps changed\r\n      const depsChanged = deps.length !== cache.current.deps.length ||\r\n        deps.some((dep, i) => !Object.is(dep, cache.current!.deps[i]));\r\n\r\n      if (!depsChanged) {\r\n        // Deps haven't changed\r\n        if (expiry) {\r\n          // Check if cache expired\r\n          const age = Date.now() - cache.current.timestamp;\r\n          if (age < expiry) {\r\n            // Cache is still valid, use cached value\r\n            return;\r\n          }\r\n          // Cache expired, continue to recompute\r\n        } else {\r\n          // No expiry, use cached value indefinitely\r\n          return;\r\n        }\r\n      }\r\n      // Deps changed, continue to recompute\r\n    }\r\n\r\n    // Compute new value\r\n    let computed: T;\r\n    try {\r\n      computed = computeFn();\r\n    } catch (error) {\r\n      console.error(`[Minimact] Error in useComputed('${key}'):`, error);\r\n      throw error;\r\n    }\r\n\r\n    // Handle async computations\r\n    if (computed instanceof Promise) {\r\n      computed.then((resolvedValue) => {\r\n        // Update cache if memoization enabled\r\n        if (memoize) {\r\n          cache.current = {\r\n            value: resolvedValue,\r\n            timestamp: Date.now(),\r\n            deps: [...deps]\r\n          };\r\n        }\r\n\r\n        // Update local state\r\n        setValue(resolvedValue);\r\n\r\n        // Sync to server\r\n        syncToServer(resolvedValue);\r\n      }).catch((error) => {\r\n        console.error(`[Minimact] Async error in useComputed('${key}'):`, error);\r\n      });\r\n\r\n      return; // Don't sync yet, wait for promise to resolve\r\n    }\r\n\r\n    // Update cache if memoization enabled\r\n    if (memoize) {\r\n      cache.current = {\r\n        value: computed,\r\n        timestamp: Date.now(),\r\n        deps: [...deps]\r\n      };\r\n    }\r\n\r\n    // Update local state\r\n    setValue(computed);\r\n\r\n    // Sync to server\r\n    syncToServer(computed);\r\n\r\n  }, deps);\r\n\r\n  /**\r\n   * Sync computed value to server via SignalR\r\n   */\r\n  function syncToServer(computedValue: T): void {\r\n    const doSync = () => {\r\n      if (!context.signalR) {\r\n        console.warn(`[Minimact] SignalR not available, cannot sync useComputed('${key}')`);\r\n        return;\r\n      }\r\n\r\n      context.signalR.updateClientComputedState(context.componentId, { [key]: computedValue })\r\n        .catch(err => {\r\n          console.error(`[Minimact] Failed to sync computed state '${key}':`, err);\r\n        });\r\n    };\r\n\r\n    // Apply debounce if specified\r\n    if (debounce) {\r\n      if (debounceTimer.current !== null) {\r\n        clearTimeout(debounceTimer.current);\r\n      }\r\n      debounceTimer.current = window.setTimeout(() => {\r\n        doSync();\r\n        debounceTimer.current = null;\r\n      }, debounce);\r\n      return;\r\n    }\r\n\r\n    // TODO: Implement throttle\r\n    if (throttle) {\r\n      // For now, just sync immediately\r\n      // Proper throttle implementation would track last sync time\r\n      doSync();\r\n      return;\r\n    }\r\n\r\n    // No debounce/throttle, sync immediately\r\n    doSync();\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { HintQueue } from './hint-queue';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { IConnectionManager } from './connection-manager';\r\nimport { templateState } from './template-state';\r\nimport { ServerTask, ServerTaskImpl, ServerTaskOptions } from './server-task';\r\nimport { ServerReducer, ServerReducerImpl } from './server-reducer';\r\nimport { setComputedContext } from './useComputed';\r\n\r\n/**\r\n * Component instance context for hooks\r\n */\r\nexport interface ComponentContext {\r\n  componentId: string;\r\n  element: HTMLElement;\r\n  state: Map<string, any>;\r\n  effects: Array<{ callback: () => void | (() => void), deps: any[] | undefined, cleanup?: () => void }>;\r\n  refs: Map<string, { current: any }>;\r\n  serverTasks?: Map<string, ServerTaskImpl<any>>; // For useServerTask integration\r\n  serverReducers?: Map<string, ServerReducerImpl<any, any>>; // For useServerReducer integration\r\n  computedValues?: Map<string, any>; // For useComputed integration\r\n  hintQueue: HintQueue;\r\n  domPatcher: DOMPatcher;\r\n  playgroundBridge?: PlaygroundBridge;\r\n  signalR: IConnectionManager; // For syncing state to server (works with SignalR or SignalM)\r\n  // Note: domElementStates and confidenceWorker are added via module augmentation by minimact-punch\r\n}\r\n\r\n// Global context tracking\r\nlet currentContext: ComponentContext | null = null;\r\nlet stateIndex = 0;\r\nlet effectIndex = 0;\r\nlet refIndex = 0;\r\nlet serverTaskIndex = 0;\r\nlet serverReducerIndex = 0;\r\n\r\n/**\r\n * Set the current component context (called before render)\r\n */\r\nexport function setComponentContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n  stateIndex = 0;\r\n  effectIndex = 0;\r\n  refIndex = 0;\r\n  serverTaskIndex = 0;\r\n  serverReducerIndex = 0;\r\n\r\n  // Reset computed index for useComputed hook\r\n  setComputedContext(context);\r\n}\r\n\r\n/**\r\n * Clear the current component context (called after render)\r\n */\r\nexport function clearComponentContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Find DOM element by path array\r\n * Example: [0, 1, 0] → first child, second child, first child\r\n */\r\nfunction findElementByPath(root: HTMLElement, path: number[]): Node | null {\r\n  let current: Node | null = root;\r\n\r\n  for (const index of path) {\r\n    if (!current || !current.childNodes) return null;\r\n    current = current.childNodes[index] || null;\r\n  }\r\n\r\n  return current;\r\n}\r\n\r\n/**\r\n * useState hook - manages component state with hint queue integration\r\n */\r\nexport function useState<T>(initialValue: T): [T, (newValue: T | ((prev: T) => T)) => void] {\r\n  if (!currentContext) {\r\n    throw new Error('useState must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = stateIndex++;\r\n  const stateKey = `state_${index}`;\r\n\r\n  // Initialize state if not exists\r\n  if (!context.state.has(stateKey)) {\r\n    context.state.set(stateKey, initialValue);\r\n  }\r\n\r\n  const currentValue = context.state.get(stateKey) as T;\r\n\r\n  const setState = (newValue: T | ((prev: T) => T)) => {\r\n    const startTime = performance.now();\r\n\r\n    const actualNewValue = typeof newValue === 'function'\r\n      ? (newValue as (prev: T) => T)(context.state.get(stateKey) as T)\r\n      : newValue;\r\n\r\n    // Build state change object for hint matching\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: actualNewValue\r\n    };\r\n\r\n    // Check hint queue for match\r\n    const hint = context.hintQueue.matchHint(context.componentId, stateChanges);\r\n\r\n    if (hint) {\r\n      // 🟢 CACHE HIT! Apply queued patches immediately\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🟢 CACHE HIT! Hint '${hint.hintId}' matched - applying ${hint.patches.length} patches in ${latency.toFixed(2)}ms`);\r\n\r\n      context.domPatcher.applyPatches(context.element, hint.patches);\r\n\r\n      // Notify playground of cache hit\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheHit({\r\n          componentId: context.componentId,\r\n          hintId: hint.hintId,\r\n          latency,\r\n          confidence: hint.confidence,\r\n          patchCount: hint.patches.length\r\n        });\r\n      }\r\n    } else {\r\n      // 🔴 CACHE MISS - No prediction found\r\n      const latency = performance.now() - startTime;\r\n      console.log(`[Minimact] 🔴 CACHE MISS - No prediction for state change:`, stateChanges);\r\n\r\n      // Notify playground of cache miss\r\n      if (context.playgroundBridge) {\r\n        context.playgroundBridge.cacheMiss({\r\n          componentId: context.componentId,\r\n          methodName: `setState(${stateKey})`,\r\n          latency,\r\n          patchCount: 0\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update state\r\n    context.state.set(stateKey, actualNewValue);\r\n\r\n    // Update template state for template rendering\r\n    templateState.updateState(context.componentId, stateKey, actualNewValue);\r\n\r\n    // Re-render templates bound to this state\r\n    const boundTemplates = templateState.getTemplatesBoundTo(context.componentId, stateKey);\r\n    for (const template of boundTemplates) {\r\n      // Build node path from template path array\r\n      const nodePath = template.path.join('_');\r\n\r\n      // Render template with new value\r\n      const newText = templateState.render(context.componentId, nodePath);\r\n\r\n      if (newText !== null) {\r\n        // Find DOM element by path and update it\r\n        const element = findElementByPath(context.element, template.path);\r\n        if (element) {\r\n          if (element.nodeType === Node.TEXT_NODE) {\r\n            element.textContent = newText;\r\n          } else if (element instanceof HTMLElement) {\r\n            // For attribute templates\r\n            if (template.attribute) {\r\n              element.setAttribute(template.attribute, newText);\r\n            } else {\r\n              element.textContent = newText;\r\n            }\r\n          }\r\n\r\n          console.log(`[Minimact] 📋 Template updated: \"${newText}\" (${stateKey} changed)`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sync state to server to prevent stale data\r\n    context.signalR.updateComponentState(context.componentId, stateKey, actualNewValue)\r\n      .catch(err => {\r\n        console.error('[Minimact] Failed to sync state to server:', err);\r\n      });\r\n  };\r\n\r\n  // If value is an array, add array helpers\r\n  if (Array.isArray(currentValue)) {\r\n    return [currentValue, createArrayStateSetter(setState, currentValue, stateKey, context)] as any;\r\n  }\r\n\r\n  return [currentValue, setState];\r\n}\r\n\r\n/**\r\n * useEffect hook - runs side effects after render\r\n */\r\nexport function useEffect(callback: () => void | (() => void), deps?: any[]): void {\r\n  if (!currentContext) {\r\n    throw new Error('useEffect must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = effectIndex++;\r\n\r\n  // Get or create effect entry\r\n  if (!context.effects[index]) {\r\n    context.effects[index] = {\r\n      callback,\r\n      deps,\r\n      cleanup: undefined\r\n    };\r\n\r\n    // Run effect after render\r\n    queueMicrotask(() => {\r\n      const cleanup = callback();\r\n      if (typeof cleanup === 'function') {\r\n        context.effects[index].cleanup = cleanup;\r\n      }\r\n    });\r\n  } else {\r\n    const effect = context.effects[index];\r\n\r\n    // Check if deps changed\r\n    const depsChanged = !deps || !effect.deps ||\r\n      deps.length !== effect.deps.length ||\r\n      deps.some((dep, i) => dep !== effect.deps![i]);\r\n\r\n    if (depsChanged) {\r\n      // Run cleanup if exists\r\n      if (effect.cleanup) {\r\n        effect.cleanup();\r\n      }\r\n\r\n      // Update effect\r\n      effect.callback = callback;\r\n      effect.deps = deps;\r\n\r\n      // Run new effect\r\n      queueMicrotask(() => {\r\n        const cleanup = callback();\r\n        if (typeof cleanup === 'function') {\r\n          effect.cleanup = cleanup;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * useRef hook - creates a mutable ref object\r\n */\r\nexport function useRef<T>(initialValue: T): { current: T } {\r\n  if (!currentContext) {\r\n    throw new Error('useRef must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = refIndex++;\r\n  const refKey = `ref_${index}`;\r\n\r\n  // Initialize ref if not exists\r\n  if (!context.refs.has(refKey)) {\r\n    context.refs.set(refKey, { current: initialValue });\r\n  }\r\n\r\n  return context.refs.get(refKey)!;\r\n}\r\n\r\n/**\r\n * Cleanup all effects for a component\r\n */\r\nexport function cleanupEffects(context: ComponentContext): void {\r\n  for (const effect of context.effects) {\r\n    if (effect.cleanup) {\r\n      effect.cleanup();\r\n    }\r\n  }\r\n  context.effects = [];\r\n}\r\n\r\n/**\r\n * Array operation metadata for semantic state updates\r\n * @public\r\n */\r\nexport interface ArrayOperation {\r\n  type: 'Append' | 'Prepend' | 'InsertAt' | 'RemoveAt' | 'UpdateAt';\r\n  index?: number;\r\n  item?: any;\r\n}\r\n\r\n/**\r\n * Enhanced state setter with array helper methods\r\n */\r\nexport interface ArrayStateSetter<T> {\r\n  // Standard setter (for compatibility)\r\n  (newValue: T[] | ((prev: T[]) => T[])): void;\r\n\r\n  // Array operation helpers\r\n  append(item: T): void;\r\n  prepend(item: T): void;\r\n  insertAt(index: number, item: T): void;\r\n  removeAt(index: number): void;\r\n  updateAt(index: number, updates: Partial<T> | ((prev: T) => T)): void;\r\n  clear(): void;\r\n\r\n  // Batch operations\r\n  appendMany(items: T[]): void;\r\n  removeMany(indices: number[]): void;\r\n\r\n  // Conditional operations\r\n  removeWhere(predicate: (item: T) => boolean): void;\r\n  updateWhere(predicate: (item: T) => boolean, updates: Partial<T>): void;\r\n}\r\n\r\n/**\r\n * Create array state setter with semantic helper methods\r\n */\r\nfunction createArrayStateSetter<T>(\r\n  baseSetState: (value: T[]) => void,\r\n  currentArray: T[],\r\n  stateKey: string,\r\n  context: ComponentContext\r\n): ArrayStateSetter<T> {\r\n  // Base setter function\r\n  const setter: any = baseSetState;\r\n\r\n  // Append helper\r\n  setter.append = (item: T) => {\r\n    const newArray = [...currentArray, item];\r\n\r\n    // Update local state\r\n    context.state.set(stateKey, newArray);\r\n\r\n    // Update template state\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    // Notify server of APPEND operation (not just new array)\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Append', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array append to server:', err);\r\n    });\r\n\r\n    // TODO: Try to predict patch using loop template\r\n    console.log(`[Minimact] 🔵 Array append: ${stateKey}`, item);\r\n  };\r\n\r\n  // Prepend helper\r\n  setter.prepend = (item: T) => {\r\n    const newArray = [item, ...currentArray];\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'Prepend', item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array prepend to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array prepend: ${stateKey}`, item);\r\n  };\r\n\r\n  // InsertAt helper\r\n  setter.insertAt = (index: number, item: T) => {\r\n    const newArray = [...currentArray];\r\n    newArray.splice(index, 0, item);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'InsertAt', index, item }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array insert to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array insertAt(${index}): ${stateKey}`, item);\r\n  };\r\n\r\n  // RemoveAt helper\r\n  setter.removeAt = (index: number) => {\r\n    const newArray = currentArray.filter((_, i) => i !== index);\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'RemoveAt', index }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array remove to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array removeAt(${index}): ${stateKey}`);\r\n  };\r\n\r\n  // UpdateAt helper\r\n  setter.updateAt = (index: number, updates: Partial<T> | ((prev: T) => T)) => {\r\n    const newArray = [...currentArray];\r\n    newArray[index] = typeof updates === 'function'\r\n      ? (updates as (prev: T) => T)(currentArray[index])\r\n      : { ...currentArray[index] as any, ...updates };\r\n\r\n    context.state.set(stateKey, newArray);\r\n    templateState.updateState(context.componentId, stateKey, newArray);\r\n\r\n    context.signalR.updateComponentStateWithOperation(\r\n      context.componentId,\r\n      stateKey,\r\n      newArray,\r\n      { type: 'UpdateAt', index, item: newArray[index] }\r\n    ).catch(err => {\r\n      console.error('[Minimact] Failed to sync array update to server:', err);\r\n    });\r\n\r\n    console.log(`[Minimact] 🔵 Array updateAt(${index}): ${stateKey}`, newArray[index]);\r\n  };\r\n\r\n  // Clear helper\r\n  setter.clear = () => {\r\n    baseSetState([]);\r\n  };\r\n\r\n  // RemoveWhere helper\r\n  setter.removeWhere = (predicate: (item: T) => boolean) => {\r\n    const newArray = currentArray.filter(item => !predicate(item));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // UpdateWhere helper\r\n  setter.updateWhere = (predicate: (item: T) => boolean, updates: Partial<T>) => {\r\n    const newArray = currentArray.map(item =>\r\n      predicate(item) ? { ...item as any, ...updates } : item\r\n    );\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // AppendMany helper\r\n  setter.appendMany = (items: T[]) => {\r\n    const newArray = [...currentArray, ...items];\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  // RemoveMany helper\r\n  setter.removeMany = (indices: number[]) => {\r\n    const newArray = currentArray.filter((_, i) => !indices.includes(i));\r\n    baseSetState(newArray);\r\n  };\r\n\r\n  return setter as ArrayStateSetter<T>;\r\n}\r\n\r\n/**\r\n * useServerTask - Execute long-running operations on the server with reactive client state\r\n *\r\n * @param taskFactory - Optional async function (will be transpiled to C# by Babel plugin)\r\n * @param options - Configuration options for the server task\r\n * @returns ServerTask interface with status, result, and control methods\r\n *\r\n * @example\r\n * const analysis = useServerTask(async () => {\r\n *   // This code runs on the SERVER (transpiled to C#)\r\n *   const data = await fetchData();\r\n *   return processData(data);\r\n * });\r\n *\r\n * // In JSX:\r\n * <button onClick={analysis.start}>Start</button>\r\n * {analysis.running && <Spinner />}\r\n * {analysis.complete && <div>{analysis.result}</div>}\r\n */\r\nexport function useServerTask<T>(\r\n  taskFactory?: () => Promise<T>,\r\n  options: ServerTaskOptions = {}\r\n): ServerTask<T> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerTask must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverTaskIndex++;\r\n  const taskKey = `serverTask_${index}`;\r\n\r\n  // Initialize serverTasks map if not exists\r\n  if (!context.serverTasks) {\r\n    context.serverTasks = new Map();\r\n  }\r\n\r\n  // Get or create server task instance\r\n  if (!context.serverTasks.has(taskKey)) {\r\n    const task = new ServerTaskImpl<T>(\r\n      taskKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      options\r\n    );\r\n\r\n    context.serverTasks.set(taskKey, task);\r\n  }\r\n\r\n  return context.serverTasks.get(taskKey)!;\r\n}\r\n\r\n/**\r\n * useServerReducer - React-like reducer that executes on the server\r\n *\r\n * Similar to React's useReducer, but the reducer function runs on the server side.\r\n * This allows complex state transitions with validation, side effects, and database\r\n * operations to happen server-side while maintaining reactive UI updates.\r\n *\r\n * @example\r\n * ```tsx\r\n * type CounterState = { count: number };\r\n * type CounterAction = { type: 'increment' } | { type: 'decrement' } | { type: 'set', value: number };\r\n *\r\n * const counter = useServerReducer<CounterState, CounterAction>({ count: 0 });\r\n *\r\n * // In JSX:\r\n * <button onClick={() => counter.dispatch({ type: 'increment' })}>+</button>\r\n * <span>{counter.state.count}</span>\r\n * <button onClick={() => counter.dispatch({ type: 'decrement' })}>-</button>\r\n * {counter.dispatching && <Spinner />}\r\n * {counter.error && <div>Error: {counter.error.message}</div>}\r\n * ```\r\n *\r\n * @example\r\n * ```tsx\r\n * // With async dispatch (await the result)\r\n * const handleReset = async () => {\r\n *   const newState = await counter.dispatchAsync({ type: 'set', value: 0 });\r\n *   console.log('Counter reset to:', newState.count);\r\n * };\r\n * ```\r\n */\r\nexport function useServerReducer<TState, TAction>(\r\n  initialState: TState\r\n): ServerReducer<TState, TAction> {\r\n  if (!currentContext) {\r\n    throw new Error('useServerReducer must be called within a component render');\r\n  }\r\n\r\n  const context = currentContext;\r\n  const index = serverReducerIndex++;\r\n  const reducerKey = `serverReducer_${index}`;\r\n\r\n  // Initialize serverReducers map if not exists\r\n  if (!context.serverReducers) {\r\n    context.serverReducers = new Map();\r\n  }\r\n\r\n  // Get or create server reducer instance\r\n  if (!context.serverReducers.has(reducerKey)) {\r\n    const reducer = new ServerReducerImpl<TState, TAction>(\r\n      reducerKey,\r\n      context.componentId,\r\n      context.signalR,\r\n      context,\r\n      initialState\r\n    );\r\n\r\n    context.serverReducers.set(reducerKey, reducer);\r\n  }\r\n\r\n  return context.serverReducers.get(reducerKey)!;\r\n}\r\n","/**\r\n * useContext - Server-side cache system with multiple scope types\r\n *\r\n * This reimagines React's context API as a Redis-like in-memory cache\r\n * that enables shared state across components with flexible lifetime management.\r\n */\r\n\r\nimport type { ComponentContext } from './hooks';\r\n\r\nexport interface ContextOptions {\r\n  scope?: 'request' | 'session' | 'application' | 'url';\r\n  urlPattern?: string;\r\n  expiry?: number;\r\n  defaultValue?: any;\r\n}\r\n\r\nexport interface Context<T> {\r\n  key: string;\r\n  options: ContextOptions;\r\n}\r\n\r\nlet currentContext: ComponentContext | null = null;\r\n\r\n/**\r\n * Set the current component context for hook execution\r\n * Called internally by Minimact before rendering\r\n */\r\nexport function setContextHookContext(context: ComponentContext): void {\r\n  currentContext = context;\r\n}\r\n\r\n/**\r\n * Clear the current component context after rendering\r\n * Called internally by Minimact after rendering\r\n */\r\nexport function clearContextHookContext(): void {\r\n  currentContext = null;\r\n}\r\n\r\n/**\r\n * Create a context with specified scope and options\r\n *\r\n * @example\r\n * // Session-scoped user context\r\n * const UserContext = createContext<User>('current-user', {\r\n *   scope: 'session',\r\n *   expiry: 3600000 // 1 hour\r\n * });\r\n *\r\n * @example\r\n * // URL-scoped dashboard filters\r\n * const DashboardFilters = createContext<Filters>('dashboard-filters', {\r\n *   scope: 'url',\r\n *   urlPattern: '/dashboard/*',\r\n *   expiry: 3600000\r\n * });\r\n */\r\nexport function createContext<T>(\r\n  key: string,\r\n  options: ContextOptions = {}\r\n): Context<T> {\r\n  // Validate URL pattern if scope is 'url'\r\n  if (options.scope === 'url' && !options.urlPattern) {\r\n    throw new Error(`Context '${key}' with scope 'url' requires urlPattern`);\r\n  }\r\n\r\n  return {\r\n    key,\r\n    options: {\r\n      scope: options.scope || 'request',\r\n      urlPattern: options.urlPattern,\r\n      expiry: options.expiry,\r\n      defaultValue: options.defaultValue\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Use a context - returns [value, setValue, clearValue]\r\n *\r\n * Unlike React's useContext, this doesn't require a Provider component.\r\n * The context is stored server-side in a cache with the specified scope.\r\n *\r\n * @returns Tuple of [value, setValue, clearValue]\r\n *\r\n * @example\r\n * // Read and write to context\r\n * function LoginForm() {\r\n *   const [_, setUser] = useContext(UserContext);\r\n *\r\n *   const handleLogin = async (credentials) => {\r\n *     const user = await authenticate(credentials);\r\n *     setUser(user); // Stored in session-scoped cache\r\n *   };\r\n *\r\n *   return <form onSubmit={handleLogin}>...</form>;\r\n * }\r\n *\r\n * @example\r\n * // Read from context (different component, no parent-child relationship needed)\r\n * function UserProfile() {\r\n *   const [user] = useContext(UserContext);\r\n *\r\n *   if (!user) return <Login />;\r\n *   return <div>Welcome, {user.name}</div>;\r\n * }\r\n */\r\nexport function useContext<T>(\r\n  context: Context<T>\r\n): [T | undefined, (value: T) => void, () => void] {\r\n  if (!currentContext) {\r\n    throw new Error('[Minimact] useContext must be called within a component render');\r\n  }\r\n\r\n  const ctx = currentContext;\r\n  const stateKey = `context_${context.key}`;\r\n\r\n  // Get current value from component state (initialized from server)\r\n  let currentValue = ctx.state.get(stateKey) as T | undefined;\r\n\r\n  // If no value and has default, use default\r\n  if (currentValue === undefined && context.options.defaultValue !== undefined) {\r\n    currentValue = context.options.defaultValue;\r\n  }\r\n\r\n  // Setter - updates local state and syncs to server\r\n  const setContextValue = (newValue: T) => {\r\n    // Update local state immediately for instant feedback\r\n    ctx.state.set(stateKey, newValue);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: newValue\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('UpdateContext', {\r\n      key: context.key,\r\n      value: newValue,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern,\r\n      expiry: context.options.expiry\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to update context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  // Clear - removes value from cache\r\n  const clearContextValue = () => {\r\n    // Clear local state\r\n    ctx.state.set(stateKey, undefined);\r\n\r\n    // Apply any cached patches if available\r\n    const stateChanges: Record<string, any> = {\r\n      [stateKey]: undefined\r\n    };\r\n    const hint = ctx.hintQueue.matchHint(ctx.componentId, stateChanges);\r\n    if (hint) {\r\n      ctx.domPatcher.applyPatches(ctx.element, hint.patches);\r\n    }\r\n\r\n    // Sync to server cache\r\n    ctx.signalR.invoke('ClearContext', {\r\n      key: context.key,\r\n      scope: context.options.scope,\r\n      urlPattern: context.options.urlPattern\r\n    }).catch(err => {\r\n      console.error(`[Minimact] Failed to clear context '${context.key}':`, err);\r\n    });\r\n  };\r\n\r\n  return [currentValue, setContextValue, clearContextValue];\r\n}\r\n","/**\r\n * Client-side pub/sub event aggregator\r\n * Enables component-to-component communication without prop drilling\r\n */\r\n\r\nexport interface PubSubMessage<T = any> {\r\n  value: T;\r\n  error?: string;\r\n  waiting?: number;\r\n  source?: string;\r\n  timestamp: number;\r\n  isStale?: boolean;\r\n}\r\n\r\ntype Subscriber<T = any> = (message: PubSubMessage<T>) => void;\r\n\r\n/**\r\n * Global event aggregator for client-side pub/sub\r\n */\r\nclass EventAggregator {\r\n  private channels: Map<string, {\r\n    subscribers: Set<Subscriber>;\r\n    lastMessage: PubSubMessage | null;\r\n  }> = new Map();\r\n\r\n  private debugLogging: boolean = false;\r\n\r\n  constructor(options: { debugLogging?: boolean } = {}) {\r\n    this.debugLogging = options.debugLogging || false;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a channel\r\n   */\r\n  subscribe<T = any>(\r\n    channel: string,\r\n    callback?: Subscriber<T>\r\n  ): PubSubMessage<T> {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    // Add callback if provided\r\n    if (callback) {\r\n      channelData.subscribers.add(callback as Subscriber);\r\n    }\r\n\r\n    // Return reactive message object\r\n    const message: PubSubMessage<T> = channelData.lastMessage || {\r\n      value: undefined as T,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.log(`Subscribed to '${channel}'`, { hasCallback: !!callback });\r\n\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from a channel\r\n   */\r\n  unsubscribe(channel: string, callback: Subscriber): void {\r\n    const channelData = this.channels.get(channel);\r\n    if (channelData) {\r\n      channelData.subscribers.delete(callback);\r\n      this.log(`Unsubscribed from '${channel}'`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Publish a message to a channel\r\n   */\r\n  publish<T = any>(\r\n    channel: string,\r\n    value: T,\r\n    options: {\r\n      source?: string;\r\n      error?: string;\r\n      waiting?: number;\r\n    } = {}\r\n  ): void {\r\n    if (!this.channels.has(channel)) {\r\n      this.channels.set(channel, {\r\n        subscribers: new Set(),\r\n        lastMessage: null\r\n      });\r\n    }\r\n\r\n    const channelData = this.channels.get(channel)!;\r\n\r\n    const message: PubSubMessage<T> = {\r\n      value,\r\n      error: options.error,\r\n      waiting: options.waiting,\r\n      source: options.source,\r\n      timestamp: Date.now(),\r\n      isStale: false\r\n    };\r\n\r\n    // Update last message\r\n    channelData.lastMessage = message;\r\n\r\n    // Notify all subscribers\r\n    channelData.subscribers.forEach(subscriber => {\r\n      try {\r\n        subscriber(message);\r\n      } catch (error) {\r\n        console.error(`[Minimact PubSub] Error in subscriber for '${channel}':`, error);\r\n      }\r\n    });\r\n\r\n    this.log(`Published to '${channel}'`, {\r\n      subscribers: channelData.subscribers.size,\r\n      value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear a channel\r\n   */\r\n  clear(channel: string): void {\r\n    this.channels.delete(channel);\r\n    this.log(`Cleared channel '${channel}'`);\r\n  }\r\n\r\n  /**\r\n   * Clear all channels\r\n   */\r\n  clearAll(): void {\r\n    this.channels.clear();\r\n    this.log('Cleared all channels');\r\n  }\r\n\r\n  /**\r\n   * Get stats\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalChannels: this.channels.size,\r\n      channels: Array.from(this.channels.entries()).map(([name, data]) => ({\r\n        name,\r\n        subscribers: data.subscribers.size,\r\n        hasLastMessage: !!data.lastMessage\r\n      }))\r\n    };\r\n  }\r\n\r\n  private log(message: string, data?: any): void {\r\n    if (this.debugLogging) {\r\n      console.log(`[Minimact PubSub] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Global singleton instance\r\nlet globalAggregator: EventAggregator | null = null;\r\n\r\nexport function getEventAggregator(options?: { debugLogging?: boolean }): EventAggregator {\r\n  if (!globalAggregator) {\r\n    globalAggregator = new EventAggregator(options);\r\n  }\r\n  return globalAggregator;\r\n}\r\n\r\n/**\r\n * Hook: usePub - Publish to a channel\r\n */\r\nexport function usePub<T = any>(channel: string): (value: T, options?: {\r\n  source?: string;\r\n  error?: string;\r\n  waiting?: number;\r\n}) => void {\r\n  const aggregator = getEventAggregator();\r\n\r\n  return (value: T, options = {}) => {\r\n    aggregator.publish(channel, value, options);\r\n  };\r\n}\r\n\r\n/**\r\n * Hook: useSub - Subscribe to a channel\r\n */\r\nexport function useSub<T = any>(\r\n  channel: string,\r\n  callback?: (message: PubSubMessage<T>) => void\r\n): PubSubMessage<T> {\r\n  const aggregator = getEventAggregator();\r\n\r\n  // Subscribe and return reactive message object\r\n  const message = aggregator.subscribe<T>(channel, callback);\r\n\r\n  // TODO: Integrate with component lifecycle for auto-unsubscribe\r\n  // For now, developers must manually unsubscribe or we rely on component unmount\r\n\r\n  return message;\r\n}\r\n","import { SignalMManager } from './signalm-manager';\r\nimport { DOMPatcher } from './dom-patcher';\r\nimport { ClientStateManager } from './client-state';\r\nimport { EventDelegation } from './event-delegation';\r\nimport { HydrationManager } from './hydration';\r\nimport { HintQueue } from './hint-queue';\r\nimport { PlaygroundBridge } from './playground-bridge';\r\nimport { HotReloadManager } from './hot-reload';\r\nimport * as ClientComputed from './client-computed';\r\nimport { MinimactOptions, Patch } from './types';\r\n\r\n/**\r\n * Main Minimact client runtime\r\n * Orchestrates SignalM (lightweight WebSocket), DOM patching, state management, and hydration\r\n *\r\n * Bundle size: ~10 KB gzipped (vs 25 KB with SignalR)\r\n */\r\nexport class Minimact {\r\n  private signalR: SignalMManager;\r\n  private domPatcher: DOMPatcher;\r\n  private clientState: ClientStateManager;\r\n  private hydration: HydrationManager;\r\n  private hintQueue: HintQueue;\r\n  private playgroundBridge: PlaygroundBridge;\r\n  private eventDelegation: EventDelegation | null = null;\r\n  private options: Required<MinimactOptions>;\r\n  private rootElement: HTMLElement;\r\n\r\n  constructor(rootElement: HTMLElement | string = document.body, options: MinimactOptions = {}) {\r\n    // Resolve root element\r\n    if (typeof rootElement === 'string') {\r\n      const element = document.querySelector(rootElement);\r\n      if (!element) {\r\n        throw new Error(`[Minimact] Root element not found: ${rootElement}`);\r\n      }\r\n      this.rootElement = element as HTMLElement;\r\n    } else {\r\n      this.rootElement = rootElement;\r\n    }\r\n\r\n    // Default options\r\n    this.options = {\r\n      hubUrl: options.hubUrl || '/minimact',\r\n      enableDebugLogging: options.enableDebugLogging || false,\r\n      reconnectInterval: options.reconnectInterval || 5000\r\n    };\r\n\r\n    // Initialize subsystems (using lightweight SignalM!)\r\n    this.signalR = new SignalMManager(this.options.hubUrl, {\r\n      reconnectInterval: this.options.reconnectInterval,\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.domPatcher = new DOMPatcher({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.clientState = new ClientStateManager({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hydration = new HydrationManager(this.clientState, {\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.hintQueue = new HintQueue({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    this.playgroundBridge = new PlaygroundBridge({\r\n      debugLogging: this.options.enableDebugLogging\r\n    });\r\n\r\n    // Enable debug logging for client-computed module\r\n    ClientComputed.setDebugLogging(this.options.enableDebugLogging);\r\n\r\n    this.setupSignalRHandlers();\r\n    this.log('Minimact initialized', { rootElement: this.rootElement, options: this.options });\r\n  }\r\n\r\n  /**\r\n   * Start the Minimact runtime\r\n   */\r\n  async start(): Promise<void> {\r\n    // Connect to SignalR hub\r\n    await this.signalR.start();\r\n\r\n    // Hydrate all components\r\n    this.hydration.hydrateAll();\r\n\r\n    // Setup event delegation\r\n    this.eventDelegation = new EventDelegation(\r\n      this.rootElement,\r\n      (componentId, methodName, args) => this.signalR.invokeComponentMethod(componentId, methodName, args),\r\n      { debugLogging: this.options.enableDebugLogging }\r\n    );\r\n\r\n    // Register all components with server\r\n    await this.registerAllComponents();\r\n\r\n    this.log('Minimact started');\r\n  }\r\n\r\n  /**\r\n   * Stop the Minimact runtime\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (this.eventDelegation) {\r\n      this.eventDelegation.destroy();\r\n      this.eventDelegation = null;\r\n    }\r\n\r\n    await this.signalR.stop();\r\n\r\n    this.log('Minimact stopped');\r\n  }\r\n\r\n  /**\r\n   * Setup SignalR event handlers\r\n   */\r\n  private setupSignalRHandlers(): void {\r\n    // Handle full HTML updates\r\n    this.signalR.on('updateComponent', ({ componentId, html }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.replaceHTML(component.element, html);\r\n        this.log('Component HTML updated', { componentId });\r\n      }\r\n    });\r\n\r\n    // Handle patch updates\r\n    this.signalR.on('applyPatches', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Patches applied', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle predicted patches (instant UI updates!)\r\n    this.signalR.on('applyPrediction', ({ componentId, patches, confidence }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log(`Prediction applied (${(confidence * 100).toFixed(0)}% confident)`, { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle corrections if prediction was wrong\r\n    this.signalR.on('applyCorrection', ({ componentId, patches }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component) {\r\n        this.domPatcher.applyPatches(component.element, patches as Patch[]);\r\n        this.log('Correction applied (prediction was incorrect)', { componentId, patchCount: patches.length });\r\n      }\r\n    });\r\n\r\n    // Handle hint queueing (usePredictHint)\r\n    this.signalR.on('queueHint', (data) => {\r\n      this.hintQueue.queueHint(data);\r\n      this.log(`Hint '${data.hintId}' queued for component ${data.componentId}`, {\r\n        patchCount: data.patches.length,\r\n        confidence: (data.confidence * 100).toFixed(0) + '%'\r\n      });\r\n\r\n      // Notify playground that prediction was received\r\n      this.playgroundBridge.predictionReceived({\r\n        componentId: data.componentId,\r\n        hintId: data.hintId,\r\n        patchCount: data.patches.length,\r\n        confidence: data.confidence\r\n      });\r\n    });\r\n\r\n    // Handle reconnection\r\n    this.signalR.on('reconnected', async () => {\r\n      this.log('Reconnected - re-registering components');\r\n      await this.registerAllComponents();\r\n    });\r\n\r\n    // Handle server reducer state updates\r\n    this.signalR.on('UpdateServerReducerState', ({ componentId, reducerId, state, error }) => {\r\n      const component = this.hydration.getComponent(componentId);\r\n      if (component && component.context.serverReducers) {\r\n        const reducer = component.context.serverReducers.get(reducerId);\r\n        if (reducer) {\r\n          reducer._updateFromServer(state, error);\r\n          this.log('Server reducer state updated', { componentId, reducerId });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Handle errors\r\n    this.signalR.on('error', ({ message }) => {\r\n      console.error('[Minimact] Server error:', message);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register all components with the server\r\n   */\r\n  private async registerAllComponents(): Promise<void> {\r\n    const components = document.querySelectorAll('[data-minimact-component]');\r\n\r\n    for (const element of Array.from(components)) {\r\n      const componentId = element.getAttribute('data-minimact-component');\r\n      if (componentId) {\r\n        try {\r\n          await this.signalR.registerComponent(componentId);\r\n          this.log('Registered component', { componentId });\r\n        } catch (error) {\r\n          console.error('[Minimact] Failed to register component:', componentId, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually hydrate a component\r\n   */\r\n  hydrateComponent(componentId: string, element: HTMLElement): void {\r\n    this.hydration.hydrateComponent(componentId, element);\r\n  }\r\n\r\n  /**\r\n   * Get component by ID (for hot reload)\r\n   */\r\n  getComponent(componentId: string): any {\r\n    return this.hydration.getComponent(componentId);\r\n  }\r\n\r\n  /**\r\n   * Get client state for a component\r\n   */\r\n  getClientState(componentId: string, key: string): any {\r\n    return this.clientState.getState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Set client state for a component\r\n   */\r\n  setClientState(componentId: string, key: string, value: any): void {\r\n    this.clientState.setState(componentId, key, value);\r\n\r\n    // Recompute client-computed variables that depend on this state\r\n    this.recomputeAndSyncClientState(componentId, key);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to client state changes\r\n   */\r\n  subscribeToState(componentId: string, key: string, callback: (value: any) => void): () => void {\r\n    return this.clientState.subscribe(componentId, key, callback);\r\n  }\r\n\r\n  /**\r\n   * Recompute client-computed variables after state change and sync to server\r\n   */\r\n  private async recomputeAndSyncClientState(componentId: string, changedStateKey?: string): Promise<void> {\r\n    // Check if component has any client-computed variables\r\n    if (!ClientComputed.hasClientComputed(componentId)) {\r\n      return;\r\n    }\r\n\r\n    // Compute affected variables\r\n    const computed = changedStateKey\r\n      ? ClientComputed.computeDependentVariables(componentId, changedStateKey)\r\n      : ClientComputed.computeAllForComponent(componentId);\r\n\r\n    // If there are computed values, send to server\r\n    if (Object.keys(computed).length > 0) {\r\n      try {\r\n        await this.signalR.updateClientComputedState(componentId, computed);\r\n        this.log('Client-computed state synced', { componentId, computed });\r\n      } catch (error) {\r\n        console.error('[Minimact] Failed to sync client-computed state:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection state\r\n   */\r\n  get connectionState(): string {\r\n    return this.signalR.state.toString();\r\n  }\r\n\r\n  /**\r\n   * Get SignalR connection ID\r\n   */\r\n  get connectionId(): string | null {\r\n    return this.signalR.connectionId;\r\n  }\r\n\r\n  /**\r\n   * Debug logging\r\n   */\r\n  private log(message: string, data?: any): void {\r\n    if (this.options.enableDebugLogging) {\r\n      console.log(`[Minimact] ${message}`, data || '');\r\n    }\r\n  }\r\n}\r\n\r\n// Export all types and classes for advanced usage\r\nexport { SignalMManager } from './signalm-manager';\r\nexport { DOMPatcher } from './dom-patcher';\r\nexport { ClientStateManager } from './client-state';\r\nexport { EventDelegation } from './event-delegation';\r\nexport { HydrationManager } from './hydration';\r\nexport { HintQueue } from './hint-queue';\r\n\r\n// Client-computed state (for external libraries)\r\nexport {\r\n  registerClientComputed,\r\n  computeVariable,\r\n  computeAllForComponent,\r\n  computeDependentVariables,\r\n  getLastValue,\r\n  getAllLastValues,\r\n  hasClientComputed,\r\n  getComputedVariableNames,\r\n  clearComponent as clearClientComputedComponent,\r\n  getDebugInfo as getClientComputedDebugInfo\r\n} from './client-computed';\r\n\r\n// Template state (for hot reload)\r\nexport { TemplateStateManager, templateState } from './template-state';\r\nexport type { Template, TemplateMap } from './template-state';\r\n\r\n// Template renderer (for runtime prediction)\r\nexport { TemplateRenderer } from './template-renderer';\r\n\r\n// Core hooks\r\nexport { useState, useEffect, useRef, useServerTask, useServerReducer, setComponentContext, clearComponentContext, ComponentContext } from './hooks';\r\n\r\n// useComputed hook (for client-side computation with browser APIs/libraries)\r\nexport { useComputed } from './useComputed';\r\nexport type { UseComputedOptions } from './useComputed';\r\n\r\n// Context hooks\r\nexport { createContext, useContext, setContextHookContext, clearContextHookContext } from './useContext';\r\nexport type { Context, ContextOptions } from './useContext';\r\n\r\n// Server task types\r\nexport type { ServerTask, ServerTaskOptions, ServerTaskStatus } from './server-task';\r\n\r\n// Server reducer types\r\nexport type { ServerReducer } from './server-reducer';\r\n\r\n// Paginated server task\r\nexport { usePaginatedServerTask } from './usePaginatedServerTask';\r\nexport type { PaginatedServerTask, PaginatedServerTaskOptions, PaginationParams } from './usePaginatedServerTask';\r\n\r\n// Pub/Sub hooks\r\nexport { usePub, useSub } from './pub-sub';\r\nexport type { PubSubMessage } from './pub-sub';\r\n\r\n// Task scheduling hooks\r\nexport { useMicroTask, useMacroTask, useAnimationFrame, useIdleCallback } from './task-scheduling';\r\n\r\n// NOTE: useSignalR hook is NOT available in the SignalM version\r\n// It requires the full SignalR client library\r\n// If you need useSignalR, use 'minimact/signalr' instead\r\n\r\n// Types\r\nexport * from './types';\r\n\r\n// Auto-initialize if data-minimact-auto-init is present\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n        const minimact = new Minimact(document.body, {\r\n          enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n        });\r\n        minimact.start().catch(console.error);\r\n        (window as any).minimact = minimact;\r\n      }\r\n    });\r\n  } else {\r\n    if (document.body.hasAttribute('data-minimact-auto-init')) {\r\n      const minimact = new Minimact(document.body, {\r\n        enableDebugLogging: document.body.hasAttribute('data-minimact-debug')\r\n      });\r\n      minimact.start().catch(console.error);\r\n      (window as any).minimact = minimact;\r\n    }\r\n  }\r\n}\r\n\r\n// Make available globally\r\nif (typeof window !== 'undefined') {\r\n  (window as any).Minimact = Minimact;\r\n}\r\n\r\nexport default Minimact;\r\n","/**\r\n * Task scheduling hooks for fine-grained render timing control\r\n * useMicroTask - runs before paint (microtask queue)\r\n * useMacroTask - runs after paint (task queue)\r\n */\r\n\r\n/**\r\n * Hook: useMicroTask\r\n * Schedules a callback to run in the microtask queue (before next paint)\r\n * Perfect for: DOM measurements, layout calculations, critical updates\r\n */\r\nexport function useMicroTask(callback: () => void): void {\r\n  queueMicrotask(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMicroTask] Error in microtask:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Hook: useMacroTask\r\n * Schedules a callback to run in the task queue (after paint)\r\n * Perfect for: Analytics, logging, non-critical updates, deferred work\r\n */\r\nexport function useMacroTask(callback: () => void, delay: number = 0): void {\r\n  setTimeout(() => {\r\n    try {\r\n      callback();\r\n    } catch (error) {\r\n      console.error('[Minimact useMacroTask] Error in macrotask:', error);\r\n    }\r\n  }, delay);\r\n}\r\n\r\n/**\r\n * Hook: useAnimationFrame\r\n * Schedules a callback for the next animation frame\r\n * Perfect for: Animations, visual updates, smooth transitions\r\n */\r\nexport function useAnimationFrame(callback: (timestamp: number) => void): number {\r\n  const rafId = requestAnimationFrame((timestamp) => {\r\n    try {\r\n      callback(timestamp);\r\n    } catch (error) {\r\n      console.error('[Minimact useAnimationFrame] Error in animation frame:', error);\r\n    }\r\n  });\r\n\r\n  return rafId;\r\n}\r\n\r\n/**\r\n * Hook: useIdleCallback\r\n * Schedules a callback for when the browser is idle\r\n * Perfect for: Low-priority work, background tasks, optimization\r\n */\r\nexport function useIdleCallback(\r\n  callback: (deadline: IdleDeadline) => void,\r\n  options?: IdleRequestOptions\r\n): number {\r\n  if ('requestIdleCallback' in window) {\r\n    return requestIdleCallback((deadline) => {\r\n      try {\r\n        callback(deadline);\r\n      } catch (error) {\r\n        console.error('[Minimact useIdleCallback] Error in idle callback:', error);\r\n      }\r\n    }, options);\r\n  } else {\r\n    // Fallback to setTimeout for browsers without requestIdleCallback\r\n    return setTimeout(() => {\r\n      const deadline: IdleDeadline = {\r\n        didTimeout: false,\r\n        timeRemaining: () => 50\r\n      };\r\n      callback(deadline);\r\n    }, 1) as unknown as number;\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an animation frame\r\n */\r\nexport function cancelAnimationFrame(id: number): void {\r\n  window.cancelAnimationFrame(id);\r\n}\r\n\r\n/**\r\n * Cancel an idle callback\r\n */\r\nexport function cancelIdleCallback(id: number): void {\r\n  if ('cancelIdleCallback' in window) {\r\n    window.cancelIdleCallback(id);\r\n  } else {\r\n    clearTimeout(id);\r\n  }\r\n}\r\n","/**\r\n * usePaginatedServerTask - Pagination built on useServerTask\r\n *\r\n * Extends the existing useServerTask infrastructure to add pagination capabilities.\r\n * Reuses transpilers, FFI bridge, and task runtime for zero additional complexity.\r\n */\r\n\r\nimport { useServerTask } from './hooks';\r\nimport { useState, useEffect, useRef } from './hooks';\r\nimport { ServerTaskOptions } from './server-task';\r\n\r\n/**\r\n * Pagination parameters passed to the fetch function\r\n */\r\nexport interface PaginationParams<TFilter = any> {\r\n  page: number;\r\n  pageSize: number;\r\n  filters: TFilter;\r\n}\r\n\r\n/**\r\n * Options for configuring a paginated server task\r\n */\r\nexport interface PaginatedServerTaskOptions<T, TFilter = any> {\r\n  /** Number of items per page (default: 20) */\r\n  pageSize?: number;\r\n\r\n  /** Function to get total count (for calculating total pages) */\r\n  getTotalCount: (filters: TFilter) => Promise<number>;\r\n\r\n  /** Enable automatic prefetching of next page (default: false) */\r\n  prefetchNext?: boolean;\r\n\r\n  /** Enable automatic prefetching of previous page (default: false) */\r\n  prefetchPrev?: boolean;\r\n\r\n  /** Dependencies that trigger re-fetch when changed */\r\n  dependencies?: any[];\r\n\r\n  /** Runtime selection: 'csharp' or 'rust' (inherited from useServerTask) */\r\n  runtime?: 'csharp' | 'rust';\r\n\r\n  /** Enable parallel execution (for Rust runtime with Rayon) */\r\n  parallel?: boolean;\r\n}\r\n\r\n/**\r\n * Paginated server task result\r\n */\r\nexport interface PaginatedServerTask<T> {\r\n  // Data\r\n  items: T[];\r\n  total: number;\r\n  totalPages: number;\r\n\r\n  // State\r\n  page: number;\r\n  pageSize: number;\r\n  pending: boolean;\r\n  error?: string;\r\n\r\n  // Navigation\r\n  hasNext: boolean;\r\n  hasPrev: boolean;\r\n  next: () => void;\r\n  prev: () => void;\r\n  goto: (page: number) => void;\r\n  refresh: () => void;\r\n\r\n  // Advanced: Access to underlying tasks\r\n  _fetchTask: any;\r\n  _countTask: any;\r\n}\r\n\r\n/**\r\n * usePaginatedServerTask Hook\r\n *\r\n * Wraps useServerTask to provide pagination with intelligent prefetching.\r\n *\r\n * @example\r\n * const users = usePaginatedServerTask(\r\n *   async ({ page, pageSize, filters }) => {\r\n *     return await db.users\r\n *       .where(u => filters.role ? u.role === filters.role : true)\r\n *       .skip((page - 1) * pageSize)\r\n *       .take(pageSize)\r\n *       .toList();\r\n *   },\r\n *   {\r\n *     pageSize: 20,\r\n *     getTotalCount: async (filters) => {\r\n *       return await db.users\r\n *         .where(u => filters.role ? u.role === filters.role : true)\r\n *         .count();\r\n *     },\r\n *     prefetchNext: true,\r\n *     dependencies: [filters]\r\n *   }\r\n * );\r\n */\r\nexport function usePaginatedServerTask<T, TFilter = any>(\r\n  fetchFn: (params: PaginationParams<TFilter>) => Promise<T[]>,\r\n  options: PaginatedServerTaskOptions<T, TFilter>\r\n): PaginatedServerTask<T> {\r\n  const pageSize = options.pageSize || 20;\r\n\r\n  // State\r\n  const [page, setPage] = useState(1);\r\n  const [items, setItems] = useState<T[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Prefetch cache\r\n  const prefetchCache = useRef<Map<number, T[]>>(new Map());\r\n\r\n  // Last args (for retry)\r\n  const lastArgs = useRef<any[]>([]);\r\n\r\n  // Build current filters from dependencies\r\n  const filters = buildFilters(options.dependencies);\r\n\r\n  // ✅ Reuse useServerTask for fetch logic!\r\n  // Note: The actual function is passed via Babel transpilation\r\n  // At runtime, we just get a task instance and call .start(args)\r\n  const fetchTask = useServerTask<T[]>(\r\n    undefined, // Function extracted by Babel plugin\r\n    {\r\n      runtime: options.runtime,\r\n      parallel: options.parallel\r\n    } as ServerTaskOptions\r\n  );\r\n\r\n  // ✅ Reuse useServerTask for count query!\r\n  const countTask = useServerTask<number>(\r\n    undefined, // Function extracted by Babel plugin\r\n    { runtime: options.runtime } as ServerTaskOptions\r\n  );\r\n\r\n  /**\r\n   * Fetch a specific page\r\n   */\r\n  const fetchPage = async (targetPage: number, fromCache = true) => {\r\n    // Check prefetch cache\r\n    if (fromCache && prefetchCache.current.has(targetPage)) {\r\n      const cached = prefetchCache.current.get(targetPage)!;\r\n      setItems(cached);\r\n      setPage(targetPage);\r\n      prefetchCache.current.delete(targetPage);\r\n\r\n      console.log(`[usePaginatedServerTask] 🟢 Cache hit for page ${targetPage}`);\r\n\r\n      // Trigger next prefetch\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Fetch from server via useServerTask\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    lastArgs.current = [args];\r\n\r\n    fetchTask.start(args);\r\n\r\n    // Wait for completion (using promise)\r\n    try {\r\n      const result = await fetchTask.promise;\r\n\r\n      setItems(result as T[]);\r\n      setPage(targetPage);\r\n      setError(null);\r\n\r\n      console.log(`[usePaginatedServerTask] 🔴 Fetched page ${targetPage} from server`);\r\n\r\n      // Prefetch adjacent pages if configured\r\n      if (options.prefetchNext && targetPage < totalPages) {\r\n        prefetchInBackground(targetPage + 1);\r\n      }\r\n\r\n      if (options.prefetchPrev && targetPage > 1) {\r\n        prefetchInBackground(targetPage - 1);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch page');\r\n      console.error(`[usePaginatedServerTask] Error fetching page ${targetPage}:`, err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Prefetch in background (non-blocking)\r\n   */\r\n  const prefetchInBackground = async (targetPage: number) => {\r\n    if (prefetchCache.current.has(targetPage)) {\r\n      return; // Already cached\r\n    }\r\n\r\n    const args = {\r\n      page: targetPage,\r\n      pageSize,\r\n      filters\r\n    };\r\n\r\n    // Create a separate task instance for prefetching\r\n    // Note: This will be optimized later to reuse task instances\r\n    fetchTask.start(args);\r\n\r\n    try {\r\n      const result = await fetchTask.promise;\r\n      prefetchCache.current.set(targetPage, result as T[]);\r\n      console.log(`[usePaginatedServerTask] ⚡ Prefetched page ${targetPage}`);\r\n    } catch (err) {\r\n      console.error(`[usePaginatedServerTask] Prefetch failed for page ${targetPage}:`, err);\r\n      // Silently fail - prefetch is optional\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get total count on mount and when filters change\r\n   */\r\n  useEffect(() => {\r\n    countTask.start(filters);\r\n\r\n    countTask.promise.then((count) => {\r\n      setTotal(count as number);\r\n    }).catch((err) => {\r\n      console.error('[usePaginatedServerTask] Failed to get total count:', err);\r\n    });\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  /**\r\n   * Initial fetch\r\n   */\r\n  useEffect(() => {\r\n    fetchPage(1, false);\r\n  }, []);\r\n\r\n  /**\r\n   * Re-fetch when dependencies change\r\n   */\r\n  useEffect(() => {\r\n    if (options.dependencies && options.dependencies.length > 0) {\r\n      prefetchCache.current.clear();\r\n      fetchPage(1, false);\r\n    }\r\n  }, [JSON.stringify(filters)]);\r\n\r\n  // Computed properties\r\n  const totalPages = Math.ceil(total / pageSize);\r\n  const hasNext = page < totalPages;\r\n  const hasPrev = page > 1;\r\n\r\n  // Navigation methods\r\n  const next = () => {\r\n    if (hasNext) {\r\n      fetchPage(page + 1);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    if (hasPrev) {\r\n      fetchPage(page - 1);\r\n    }\r\n  };\r\n\r\n  const goto = (targetPage: number) => {\r\n    if (targetPage >= 1 && targetPage <= totalPages) {\r\n      fetchPage(targetPage);\r\n    }\r\n  };\r\n\r\n  const refresh = () => {\r\n    prefetchCache.current.clear();\r\n    fetchPage(page, false);\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    items,\r\n    total,\r\n    totalPages,\r\n\r\n    // State\r\n    page,\r\n    pageSize,\r\n    pending: fetchTask.status === 'running',\r\n    error: error || fetchTask.error?.message,\r\n\r\n    // Navigation\r\n    hasNext,\r\n    hasPrev,\r\n    next,\r\n    prev,\r\n    goto,\r\n    refresh,\r\n\r\n    // ✅ Expose underlying tasks for advanced use\r\n    _fetchTask: fetchTask,\r\n    _countTask: countTask\r\n  };\r\n}\r\n\r\n/**\r\n * Helper: Build filters object from dependencies array\r\n */\r\nfunction buildFilters(dependencies?: any[]): any {\r\n  if (!dependencies || dependencies.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // If single object, use as-is\r\n  if (dependencies.length === 1 && typeof dependencies[0] === 'object') {\r\n    return dependencies[0];\r\n  }\r\n\r\n  // Otherwise, create indexed object\r\n  return dependencies.reduce((acc, dep, i) => {\r\n    acc[`dep${i}`] = dep;\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n"],"names":["ConnectionState","MessageType","ExponentialBackoffRetryPolicy","constructor","this","delays","maxDelay","nextRetryDelay","retryAttempt","length","JsonProtocol","writeHandshake","handshake","protocol","protocolName","version","protocolVersion","JSON","stringify","RECORD_SEPARATOR","parseHandshake","data","cleanData","endsWith","slice","parse","error","Error","writeInvocation","invocationId","target","args","type","arguments","writeMessage","writePing","writeClose","parseMessage","serializeMessage","message","isInvocation","isCompletion","isPing","isClose","EventEmitter","events","Map","on","event","handler","has","set","get","push","off","handlers","index","indexOf","splice","once","onceHandler","emit","forEach","console","removeAllListeners","delete","clear","listenerCount","eventNames","Array","from","keys","SignalMConnection","url","options","ws","pendingInvocations","state","Disconnected","reconnectAttempts","reconnectTimeoutId","reconnectPolicy","debugLogging","debug","connectionTimeout","invocationTimeout","eventEmitter","start","Connecting","log","connect","stop","clearTimeout","close","invoke","methodName","Connected","generateInvocationId","Promise","resolve","reject","timeout","setTimeout","serialized","send","onConnected","onDisconnected","onReconnecting","onReconnected","onError","connectionState","wsUrl","buildWebSocketUrl","WebSocket","handshakeComplete","onopen","onmessage","handleMessage","response","onerror","onclose","handleClose","messages","split","filter","msg","messageData","handleInvocation","handleCompletion","handlePing","pending","result","pongMessage","code","reason","attemptReconnect","delay","Reconnecting","async","startsWith","window","location","host","toString","undefined","SignalMManager","hubUrl","eventHandlers","connection","setupEventHandlers","componentId","html","patches","confidence","toFixed","hintId","connectionId","registerComponent","invokeComponentMethod","argsJson","updateClientState","key","value","valueJson","updateClientComputedState","computedValues","updateComponentState","stateKey","updateDomElementState","snapshot","updateComponentStateWithOperation","newValue","operation","updateQueryResults","queryKey","results","resultCount","Set","add","DOMPatcher","applyPatches","rootElement","count","patch","applyPatch","targetElement","getElementByPath","path","patchCreate","node","patchRemove","patchReplace","patchUpdateText","content","patchUpdateProps","props","patchReorderChildren","order","warn","newElement","createElementFromVNode","innerHTML","appendChild","parentPath","parent","childNodes","insertBefore","element","parentNode","removeChild","oldElement","newNode","replaceChild","nodeType","Node","TEXT_NODE","textContent","oldAttrs","attributes","attr","name","removeAttribute","Object","entries","setAttribute","className","keyedChildren","child","HTMLElement","getAttribute","i","currentChild","current","vnode","document","createTextNode","velem","createElement","tag","toLowerCase","children","fragment","createDocumentFragment","vfrag","div","replaceHTML","ClientStateManager","states","subscribers","initializeComponent","initialState","getState","componentState","setState","oldValue","notifySubscribers","subscribe","callback","componentSubscribers","keySubscribers","getComponentState","updateState","updates","clearComponent","bindToElement","property","initialValue","updateElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","String","bindInput","input","inputHandler","e","addEventListener","unsubscribe","removeEventListener","EventDelegation","componentMethodInvoker","hintQueue","domPatcher","playgroundBridge","eventListeners","setupEventDelegation","eventTypes","eventType","listener","createEventListener","handlerElement","findHandlerElement","getEventHandler","preventDefault","executeHandler","attrName","legacyAttrName","hasAttribute","parentElement","handlerStr","parts","findComponentId","startTime","performance","now","argsObj","MouseEvent","mouse","clientX","clientY","button","KeyboardEvent","keyboard","ctrlKey","shiftKey","altKey","argsArray","isArray","matchedHint","tryMatchHint","componentElement","findComponentElement","latency","cacheHit","patchCount","catch","err","cacheMiss","querySelector","destroy","HydrationManager","clientState","components","hydrateComponent","firstElementChild","metadata","serverState","hydrateClientZones","bindStateElements","clientZones","querySelectorAll","zone","stateName","getInitialValue","boundElements","elem","bindKey","isClientScope","isInClientScope","bindProperty","determineBindProperty","checked","valueAsNumber","dehydrateComponent","getComponent","updateServerState","hydrateAll","TemplateRenderer","renderTemplate","template","params","param","placeholder","formatValue","replace","renderTemplatePatch","templatePatch","stateValues","conditionalTemplates","conditionalBindingIndex","bindingIndex","conditionBinding","bindings","conditionKey","conditionValue","conditionalTemplate","includes","map","binding","transform","applyTransform","materializePatch","propName","vnodes","renderLoopTemplate","loopTemplate","convertLoopToPatches","materializePatches","materialized","decimals","parseInt","match","Number","multiplier","parseFloat","substring","divisor","addend","subtrahend","toUpperCase","trim","v","join","isTemplatePatch","extractBindings","validateBindings","every","getMissingBindings","array","array_binding","item","itemState","index_var","flattenedState","flattenItemState","renderItemTemplate","item_template","flattened","itemTemplate","template_patch","props_templates","propTemplate","children_templates","childTemplate","key_binding","HintQueue","hints","maxHintAge","queueHint","isTemplate","some","queuedAt","Date","patchType","cleanupStaleHints","matchHint","stateChanges","componentHints","hint","stateMatches","predictedState","materializedPatches","predicted","actual","predictedValue","staleKeys","keysToRemove","clearAll","getStats","allHints","values","templateHints","h","concreteHints","totalHints","size","templatePercentage","Math","round","hintsByComponent","reduce","acc","PlaygroundBridge","predictionReceived","postMessage","elapsedMs","predictionConfidence","correctionApplied","dispatchEvent","CustomEvent","detail","computedRegistry","computeAllForComponent","computed","varName","variable","computeFn","lastValue","computeDependentVariables","changedStateKey","dependencies","hasClientComputed","TemplateStateManager","templates","componentStates","loadTemplateMap","templateMap","nodePath","registerTemplate","getTemplate","getComponentTemplates","getTemplatesBoundTo","getStateValue","render","renderWithParams","applyTemplatePatch","slots","attribute","text","buildNodePathKey","existingTemplate","keysToDelete","componentCount","templateCount","memoryBytes","memoryKB","avgTemplatesPerComponent","max","templateState","ServerTaskImpl","taskId","signalR","context","status","progress","chunks","chunkCount","_options","streaming","stream","_createPromise","_promise","_resolve","_reject","promise","idle","running","complete","failed","cancelled","startedAt","completedAt","partial","_triggerRerender","duration","getTime","retry","cancel","then","_updateFromServer","previousStatus","ServerReducerImpl","reducerId","dispatching","dispatch","action","lastDispatchedAt","lastActionType","dispatchAsync","_pendingPromise","_pendingResolve","_pendingReject","newState","previousState","currentContext","stateIndex","effectIndex","refIndex","serverTaskIndex","serverReducerIndex","findElementByPath","root","useState","currentValue","actualNewValue","boundTemplates","newText","createArrayStateSetter","useEffect","deps","effects","effect","dep","cleanup","queueMicrotask","useRef","refKey","refs","baseSetState","currentArray","setter","append","newArray","prepend","insertAt","removeAt","_","updateAt","removeWhere","predicate","updateWhere","appendMany","items","removeMany","indices","useServerTask","taskFactory","taskKey","serverTasks","task","EventAggregator","channels","channel","lastMessage","channelData","timestamp","hasCallback","publish","waiting","source","isStale","subscriber","totalChannels","hasLastMessage","globalAggregator","getEventAggregator","Minimact","body","eventDelegation","enabled","enableDebugLogging","reconnectInterval","hydration","setupSignalRHandlers","registerAllComponents","component","serverReducers","reducer","getClientState","setClientState","recomputeAndSyncClientState","subscribeToState","ClientComputed.hasClientComputed","ClientComputed.computeDependentVariables","ClientComputed.computeAllForComponent","readyState","minimact","scope","urlPattern","expiry","defaultValue","variables","variableCount","setComputedContext","requestAnimationFrame","memoize","debounce","throttle","setValue","cache","debounceTimer","syncToServer","computedValue","doSync","is","resolvedValue","ctx","requestIdleCallback","deadline","didTimeout","timeRemaining","fetchFn","pageSize","page","setPage","setItems","total","setTotal","setError","prefetchCache","lastArgs","filters","fetchTask","runtime","parallel","countTask","fetchPage","targetPage","fromCache","cached","prefetchNext","totalPages","prefetchInBackground","prefetchPrev","ceil","hasNext","hasPrev","next","prev","goto","refresh","_fetchTask","_countTask","aggregator","reducerKey"],"mappings":"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"}